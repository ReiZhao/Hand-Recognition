node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "s\225L \265\341\314?\343{\213\366\224\366\314?\002\350\346\321C#\315?\353\002\223X\250.\315?a\006\344\304\267-\315?4*\255\025&9\315?\364\303\027\014\377@\315?\363Re\243iL\315?\305l9\377\305_\315?\321\034uN\225j\315?\2608g\007\006W\315?F\021\\)\'A\315?%\002)?\026S\315?i\027\236Z\'5\315?<\2501\022\273%\315?\276\243\226K\202.\315?^\035\327\361%5\315?}>\251z\"\035\315?s\300<\321f\366\314?\301N\206\352\263\361\314?\343\221;\026\"\372\314?\200\033\035\350\205\341\314?\262\260\027r\273\303\314?\343\240\301\374\316\234\314?zz\261\237\341g\314?\213W\223\206\236=\314?c\202\r\224\2035\314?c\251+(\327\027\314?zMLmb\356\313?\016]g{\250\270\313?\344S\024pN\263\313?=\330\270\267\210\223\313?\304_\230\356\243\212\313?P]\366t@\225\313?h\337\005\337n\250\313?\267\355\362\342\001\273\313?:\016\344\"\274\322\313?\317|\307#\312\364\313?\322\231I\016\267\007\314?\\\344C\365{\007\314?{mkH2$\314?z\320|f\3729\314?\000\331w\207\014R\314?/\351\314\226\334\203\314?~\303\271\220\213\315\314?/b:\325\243\356\314?\203\244.\235\377\354\314?\301(\030\000p\315\314?\217&\247\016\243t\314?O\024\305\004e5\314?\317\261\363\236\031\360\313?\244\210N\307J\251\313?[\331}Hqn\313?\203)\031\354\305\021\313?E\267J\357\234\337\312?T\017\003#P\271\312?1\223;{M\240\312?NZ\365\017\333\203\312?\300\206T\017\240x\312?)F\211\242\257\274\312?%\303\202\337\254\337\312?\327l\371\t\346\266\312?\374y\263\0037\235\312?O\214\275\373\t\305\312?x\037\267\307!\016\313?\246\024{5.\006\313?\355\203;6S\370\312?%\254#\315s\322\312?\227T\325\0326\t\313?>\305I\030\010-\313?[\344\350;\tv\313?\234\373C\344\010\232\313?pj\363A\307\265\313?t\202a\271\330\306\313?\245\335>d\367\310\313?L\225\251\373`\326\313?\317\324?\026\017\340\313?\014\t\374\007\257\342\313?\224\305I\326\353\332\313?c*\213/\313\270\313?\263\301}u9\213\313?\225\367\253\337\320\304\313?\231\216W%3\314\313?\323p\362\244J\251\313?[A\221\366X\235\313?\232\334vAG\242\313?j\334\211\374t\250\313?\320_/\347.\226\313?\322\265\013\332\237\234\313?:\360\365\253\274\201\313?\376Up\r\246\200\313?\315\235)\014{\256\313?_\376\354B\321\316\313?\013\374\2120\243\352\313?I\336\224M\024\374\313?\206p_\026\371\006\314?\250\023$Df\037\314?\306\342\004\224\360>\314?Q\253\'t\020T\314?K\2778I\327r\314?\373\365\306\355\360\207\314?\355\327\315\'S\216\314?\352\240\321q\303\234\314?\2242\312\257\366\242\314?/v:\021v\252\314?\303(\371\362\261\244\314?\222\250\357\263\314\215\314?\336\310\346\361N\232\314?\243\213{cp\243\314?\372\027\006\0019\256\314?,\243\373\263\313\251\314?\366\000\326\335N\270\314?\332\213\335H\035\300\314?|$<\331\201\276\314?\267\340\n\375S\267\314?\273e\364\224\266\247\314?\230Q;\342\341\224\314?\246\237\271L\"\202\314?V\032\245\t\343\200\314?\005\244\266:$h\314?|X\235\014\366u\314?\372\366q\336F]\314?\240\225XrED\314?N\016\346I\256/\314?}t\224\312\256\020\314?\023\367\365\317\025\335\313?\010\347\203\000A\302\313?e/\030\262s\200\313?\264\232\270\231-\200\313?\246\230\033\275.\204\313?6\344\273n\363\201\313?)\316\230\034S\204\313?\356t$\355\377\211\313?5 \rjiu\313?\"\271\263\261=s\313?\345\027[\221cn\313?L\242\320ERq\313?\372J{\336\350~\313?z\203\360\347bs\313?\003\353\022\267\005i\313?u\223\321.\312_\313?!\230\335ry\\\313?\n]\364\333\370O\313?\305\3766\264\226<\313?\177\330\017\007\302;\313?\027L\277\356\273<\313?\303\353~>_-\313?\362\245\001\3151*\313?6\006\322\002\n.\313?\263G\255\322\013.\313?\263\023D.O\037\313?A\020/n\364\010\313?\354\344K)a\006\313?%\263\022\244f\020\313?\354t\217\210\003\n\313?\371\243\267^$\013\313?\rh\337\230B\000\313?\251@\252\204\316\373\312?\366\362a\024\t\010\313?\336\320\364\017\253\n\313?\225q\257s\243\355\312?\225Z_\214\227\332\312?\201\302\020\241`\362\312?|\274\346\016\310\t\313?-\241*\302\'\377\312?\251\344\246J\267\014\313?(\003\230\026\033\021\313?\027:\273$\352\037\313?\027\334:\370\2744\313?\255H\027^\3631\313?\312{\327\313\257\031\313?\336o\313\177\3740\313?(\330.V\2346\313?\214 07a@\313?\035$\365\262\256P\313?\007\214\370\305\332\\\313?\350\357E~t_\313?\2720\002\305\360Z\313?~\351\212\245\212Z\313?\273\254\342\275\005:\313?\216\232\373 \3254\313?\003\3570b\2512\313?,}\241\255n(\313?N[\017\236\212\r\313?\323:\247\342\221\373\312?7\277\025\024\374\362\312?\334\333\360e\351\335\312?\3021u\236K\315\312?\363\337\213Hw\304\312?|&\027=\231\272\312?*\2105 8\252\312?X;\260:w\235\312?\336\2204\"\222\215\312?}.ZM\305p\312?\024Me&Xi\312?K\340\355y\262f\312?n8a\377\313n\312?X\363\201\274\325u\312?\0011\270\317\362\210\312?\356\272\211\352E\236\312?&y\224\233\277\301\312?\034\342n\374\310\356\312?\345*\372i\372\361\312?\003\213\335\355c\r\313?\266V#\327\'\"\313?\035Ok\235/+\313?jU\374\363\365;\313?\317&\001\026kK\313?3l\013\004>U\313?\237\013\203/\325W\313?h\247|\216\343U\313?&\230\355\347m\\\313?\323=\326\177\342o\313?\303\024\226\214$\200\313?z\270\2677\314\213\313?=\372\277 r\205\313?\314\356\267\340\206\204\313?s\315\267\032\346\177\313?$L\220\222\3206\313?ES\202m\340(\313?\205+\310\030\035%\313?\355?\220\216;\375\312?\306\327\253\203\024\340\312?[\313\302\251\237\317\312?\353\323}Bn\255\312?\216<\013\240\352\240\312?+>\006w\334z\312?\024.#v\037\340\312?\377&\237\024i\377\312?Q\302\201\315\2178\313?\274\246Q\222\277E\313?\333\366\221\351=F\313?_\227\322\024\260F\313?\013>\337\254G5\313?&\327\354\377\036\'\313?\341\331\341Y\311!\313?HZ\3746\\\025\313?HV<\375\271\013\313?\027\342w$u\372\312?q\026\3134g\353\312?\n\231\233\327\'\354\312?\017\322\232\271\234\337\312?\270\243\300\201\027\335\312?!<\271*y\312\312?\367\366j$b\272\312?\036\266\222\365R\263\312?\247\327\354\234\364\253\312?\272b\033\370\036\234\312?\316\362\2737&\216\312?\217\336\345,0\207\312?P^\311-dp\312?F\277\365\342=g\312?j\252\371\272\244[\312?\225,\013L\305K\312?\305\023\315Et\366\311?j4!\374w\274\311?\322\001\300\346Y\237\311?\034\215\343\212\002\262\311?`\377k\374f\273\311?^|\246\236\322\257\311?hBB}\223\262\311?\377\333\3072F\251\311?\367\267M\266V{\311?\242B\376dOl\311?\017\004\366\010\235f\311?\227\325\331h\267X\311?\217\027\322\341!L\311?\302|5\344\370Q\311?\325\1771\266k\235\311?L\305\313uH\341\311?\201\347\324Q\262\365\311?\216Z\311\335\323\024\312?2\352>&p0\312?\271\375\260\255\270[\312?\200kp \371\212\312?o\310\350{k\262\312?\305\035\031\362\242\313\312?M\317\276i/\337\312?e\227)_0\365\312?i\017X\222l\020\313?\304;w\275_E\313?^\273\027\014l]\313?\234oj\276Ow\313?\307\224)\225\331h\313?\213\037\344np\237\313?\241X\372\022\"\307\313?\nn/_\032\343\313?\016\353(/{\027\314?\200C\013}n0\314?\221\345s\332\222V\314?\233\315\030#h\205\314?*%sHD\232\314?sM\213>B\264\314?$\322\231(\000\316\314?\333a\305\tI\357\314?\344*\334\023\240\375\314?\013\014\347\207\002\027\315?\375\237\363\265\217\036\315?\201\030\014\241\217!\315?\371\352\243\206H#\315?\212[\201\370+*\315?\2464?W\213*\315?\021\304\213\033=\022\315?\350\242\216\177\200\344\314?\305S\200\t\213\263\314?\254\234\300\353h\231\314?\217\235\'\006\227z\314?\314\032\231\240\266h\314?q\372\357\313\335J\314?\026\326t\332\246\372\313?rBS<O\270\313?\007\177\006n\271\207\313?R\314\305\010vv\313?x\274fE\026a\313?\007K|\273\023V\313?S\003\315\347\334-\313?\032\230V\357\342\020\313?\236\256r\221\020\037\313?\210^N\"%*\313?,\252{\355d3\313?\220\"\254r\023\210\313?L#\306h\246\306\313?+5\006\223\236\006\314?$\302\226\211\350\370\313?\365\346\n\313\254\331\313?\245\010\207\026\215\300\313?\344\374\311\357\237\264\313?\014\223\360W\335\267\313?\202\306\177\223\003\274\313?s\177\237\270\266\314\313?\310\r,8\235\023\314?\034\326\177\226\341Q\314?\004\307D\316\353]\314?\354\010\274\240yQ\314?\360\244v\240\3751\314?\\\017\371C@9\314?e\201\215#\212T\314?\026\"\267\221xZ\314?\t\273e\335\370@\314?x\226]\206\270\037\314?x\261\303\247\037%\314?\372ANy#\034\314?X5\376\000H\006\314?Z\363l!\213\336\313?\364 \024\306\334\326\313?4\355\261\340\275\244\313?\375.F\006\264\222\313?\257N\034\340L\203\313?+\033\020\000\240s\313?,\017`\376\373m\313?\333C\033\260F^\313?\276C\313f\200^\313?~e\231\326\212\\\313?\345u\023h\357M\313?\027\265\034diR\313?Ui\375\300dI\313?\226\203\212\276CP\313?#L\230\003\031N\313?m:D\324+B\313?@E\376.\2468\313?\205@\323\267q0\313?\223fm\377< \313?\266\353Jp\217J\313?iW\235\254\203I\313?\r\006 \263\210(\313?\213>\361,\331\"\313?\361%k\014\356\022\313?\340=\204\024\343\014\313?\312s\335\221:\014\313?\322\333j\231\266\006\313?\353\234\004\016\037\023\313?X\025r\211I\026\313?sl\252\337f \313?_\3635\301\363/\313?$\316>\032D\'\313?\016+\356\325M=\313?\203\236\3038\\D\313?|\034\320I$N\313?8\361\361\343\021W\313?\0038\3655VX\313?\337z\320\220Ja\313?\315\\\214\363\312D\313?\250\366\257\315BR\313?_\200\032J/b\313?\3175\364\230Fh\313?>+\267T\250e\313?b\3223Kop\313?\224+\032=G|\313?\234S\207\344}\177\313?\026\312\333tx\206\313?\376\240\337\013T\205\313?\367.\243-\356\214\313?\020\302{\305U\220\313?\221\206\302\203@\220\313?\356\213N\ri\221\313?\355E\223\017j\224\313?\362Zl\007\341\231\313?\360\256\260ip\236\313?\233\215j\030\013\261\313?2\337\371\371z\264\313?\277:\243\272t\244\313?\210\342\356\251%\250\313?\375\373\301\375\326\307\313?\254\370\2163\260\302\313?O\004\227\345\360+\313?/\"\250\037v\024\313?\337=\216\206V\036\313?\371jL*H#\313?&7\205\363{+\313?\034\375(\035\276\"\313?\332\255\315\025\221 \313?\275s\324C\307\035\313?h_\360\236@.\313?\223\320\264\311\203\"\313?@\307[o\032)\313?\326E\341\345\2571\313?43Y\372\325>\313?\001\014\323\020\270b\313?\300\322\250\251-A\313?`iK\3438,\313? 7\204\251\264%\313?B\341\356\327]\023\313?KQ}\3233\376\312?\263\364ia\213\'\313?\220\221o\223\252\035\313?\304\210\003<\367\013\313?\200 \367\257\3274\313?\246\027\233\247Q@\313?r\255rxs>\313?7\335W\212\211\262\311?\245Y>j\312\020\312?_\374\317\302\347\014\312?I/\322\332 \022\312?\253\357\006\025x\016\312?(<\226\256\310\376\311?\030\3545&\214\362\311?|\210\3670<\365\311?*\202|,$\360\311?\346g\t\203I\351\311?8\315\034A\023\351\311?[d\274_e\352\311?.P\217\303\031\351\311?\233.\373\335\212\360\311?[\372\225\243\007\013\312?\n\351\031\220\367\t\312?\335i\211\232\212\002\312?`u:I \t\312?\023\334\311Y8\006\312?}|\276=:\373\311?\230\272\313H4\366\311?5\000\273\235\364\363\311?@\214\342\345\201\371\311?\244wiD\342\376\311?\233G\223\305\334\371\311?\2730\375\0137\362\311?\246N\366\205F\346\311?\032\003\324\234\010\327\311?\242l\367\226e\324\311?\205\343x\214\222\332\311?\014\277WQ\334\341\311?!\r\2200X\346\311?\336\215z\222\270\352\311?x\000\325\211\025\377\311?\023\254D\265\225\022\312?\360d\220\353A)\312?\341\314\211\037^5\312?\263\036\306\275\\8\312?Z\030\262R\362>\312?o\221\026\217\324@\312?\253\346Z0\310H\312?b:\271N?B\312?K\207r\2253C\312?\220\2210/gF\312?\321\373\\\363\376M\312?\336O\232\301pR\312?bW:\357dO\312?\227\226\361\354{_\312?>U\372\023\331j\312?\232.\3012\001\202\312?}\0275\346\025\222\312?\014hE{\214\227\312?C\273\r\341\315\227\312?\270\214\330}\200\233\312?\014\362\"/E\233\312?\'\335\226\310\005\247\312?\353\267I!\235\265\312? w?\336\023\272\312?\3709\231\023\017\303\312?\313\221\022\336\305\313\312?^&b\310\354\327\312?\235*!P\344\346\312?(\276D6<\357\312?\356\254\025!\000\356\312?v\037\224\270\r\361\312?\241\005\243\275\272\335\312?\013\230\322\220w\342\312?\337\2259j@\325\312?s[\336\371\236\301\312?\246!\202(\232\262\312?\260\310!uJ\246\312?\206\204i\304>\224\312?\373\343A\243\t\216\312?\036\026[\"\306\224\312?\003\034\347\333\'l\312?W\350\220\217nh\312?W\037\351\265\324_\312?\n\226\260W\3247\312?iX\177\220\324\036\312?=B\271\254C\'\312?\326\335\220\324\257%\312?+\010\200R6*\312?\202\244fG^!\312?`\245\374P\333\031\312?\346p\013h\262\027\312?@I\230\241\245\366\311?D\361D\277\237\342\311?\034~\033\210\203\311\311?A\353\225=\377\271\311?m\332\374\'\316\275\311?\220n\211\376\376\304\311?w\\\304\337E\313\311?\371WEn<\316\311?\302U\207\244b\030\311?N\263\311\254\241\376\310?G\004l\3220\346\310?O\232E\2516\330\310?0\325\275/\335\315\310?.\204\026\2760\354\310?\336r~U\361\360\310?T\212\263\250\243\361\310?\321$\3752\"\025\311?j\204X\337\273+\311?Z\245p\024\213e\311?K\252L\267@\220\311?\016k\326\2134\200\311?\0234m\314\331%\311?t\261{\210\314\360\310?\346P|8%\271\310?\326u\267\321Q\245\310?\220)\202\254e\272\310?\267 w\353\336\305\310?\233Gr\267\363\026\311?^\001\304\336=`\311?XP\023\333\257\213\311?rf\261\320\253\232\311?;A0\201:\251\311?\014\273\275\336\334c\312?\31111\024\262^\312?bq\375\220\276V\312?p]\2501^I\312?\337\007M6\021B\312?^\231\\1\310B\312?\302\343}J\005=\312?\262\245\223\341\2020\312?\247\025\203\340!\'\312?\014\243j\005\227\030\312?-\312\360\310\355\021\312?\234\317\244@\253\373\311?\001A\372\322M\365\311?\344\356\253&\023\355\311?\024\311d,+\361\311?g\374\242\324\303\357\311?\362=\024\346\354\006\312?B\251~$s\014\312?\374\342\357j\373\017\312?\365\303\3206s\022\312?\336\037W9\240$\312?\311$\346\003I2\312?\370\334\302 \3248\312?\004Bv\324T3\312?/\302\356\0350-\312?\353=\203\360\342)\312?\325\005\354\005\307.\312?K5\341\316\3554\312?&(\023\361\265+\312?\030\266\361\035\270\'\312?t\n_P\300%\312?\"v\3454\275$\312?&\311\001(7+\312?\250\010\230B\3454\312?\014k\225&\306.\312?\023\204\254 f,\312?\224\276\231c<4\312?\315\213\331\263c:\312?&$2\251*?\312?\335^\002R\303@\312?P\272s\2573H\312?&\303zndH\312?\257\276\226d\3309\312?F\031\014\326\2011\312?\256\226\231\244\3020\312?\300\355\246\347\0375\312?\316Z\232\363=7\312?\343\031v\020\"6\312?\252\n\010\013\3710\312?\\\3678\316\3133\312?\035B\251~$3\312?B4\302\364 1\312?\364kt\231]!\312?\362\372fwU\033\312?\257\343\331\224\024 \312?\375v\225\222>\035\312?\223I\231\026\355\030\312?\r(\'\034r\032\312?mI\002e7\031\312?\242\0144#\254\033\312?\254`+\323\365%\312?\tE\336e\313!\312?\r\334G\217[#\312?\n\006\306\260y\013\312?*\354yiP\025\312?7\031\3430\211\024\312?\324v*\030I\006\312?\301:\373\273X\007\312?\354y\333\245=\000\312?\n\347\326Hk\374\311?\214\311\277\357\017\366\311?\227\020K\201\007\361\311?\225\217\242\243\\\347\311?\204\352\230S\377\351\311?i\201\371\010U\332\311?\030\226\206\264\242\332\311?\303\344\207\366#\330\311?p\272-\335\231\323\311?\nu\303|\232\317\311?\031\274OXY\320\311?\025\370\t\356\247\311\311?\325\3066{0\301\311?~\235\367\246\271\272\311?rc\371A\375\261\311?\324y\\m(\251\311?\004=\263\250x\261\311?\025\337A\315?\243\311?\2071L\032a\231\311?vr\021\325\027\246\311?\221\254uB\345\250\311?\272A\214\216\346\263\311?\325\234\344\220\322\301\311?\335h(7O\312\311?Y\230\300\330;\326\311?\271\356\023+\226\347\311?\213.#\200\221\323\311?\275R\335\366\031\344\311?\262\243\307\250\230\356\311?\307M\000\n\235\363\311?\353\235\203\307\264\377\311?\340#\334\020U\013\312?\370\272\356\250\217\022\312?\313t\243 \\\'\312?8\303z\224++\312?;UL\022<\037\312?\253\305G\216\353\024\312?\231\251A\177>\035\312?\242\205s)\210#\312?\352k`\"\023-\312?\234\336\305\373q;\312?V\177\223\214\355L\312?;\207\370\250;f\312?vu\"\034\016f\312?\\v4\200Jd\312?\031Oy~\225_\312?d\020\377\200lq\312?3;\007\246\005u\312?\325\3772\022\263t\312?\001\262=\236\211u\312?\273\332\\\305zT\312?\025\n\367\033\004U\312?\021\210Vu\366X\312?\232j\223\256\214R\312?Q\202\202{3d\312?G\373\260\302Sf\312?(a\350\t2\037\312?\337\232P\225\252\005\312?\177\000Eq6\371\311?\357\020s\007\271\344\311?\323\331\371\031?\326\311?3Z\351\343\021\304\311?\n$\242D\275\263\311?\\\345K\240o\250\311?\301n;\341\343\233\311?\013\362A<\003\204\311?\017\025\013\305\033n\311?\226<i\244Or\311?\rd\231%\321p\311?\017\\\374\245\371n\311?\022_\346n\351n\311?\3750Bx\264q\311?\252\007b_\006q\311?\316\355\341o\324z\311?\267\202\321\245\262z\311?\300qQ\341\223\204\311?7\306\033\207d\202\311?\033J\377(p\206\311?\270\2344\325\337\207\311?;(\223\340.w\311?I\004\323\376A\203\311?j,\006\264\031\214\311?e5~]]\300\311?\242\032s\372!\306\311?v,w\345\001\214\311?^\031\264\215\310\202\311?\275pJ\355\003\330\311?\213R\223\367\251\236\311?\233\010\004\002\351\227\311?fK\351\250\211\217\311?\324\227\226rm\221\311?\350\303U\223\027\201\311?\371F\0073\214\214\311?-g\347\033n\223\311?\321\343\302D-\224\311?0\014\353\325\346\220\311?\356\351\326\252\336\223\311?#F#-\002\224\311?\224U\302\'^\244\311?qEK\346\244\254\311?\250\t\177\337\357\262\311?J\302\232\327\314\262\311?\232\343\261\246\177\267\311?\350\333\202\245\272\300\311?\212\202\256\267\254\306\311?1,\034\224r\257\311?\347\314i[<\230\311?\031\250\352\360\240q\311?lI`\3268Y\311?se\246m)K\311?\345\237\266\231LM\311?9fZ\024\326C\311?Y\322\022\252\"<\311?E\030\237\377\247-\311?\327\250\233L[*\311?\376\221\252l\246\"\311?\207\252\005\347m\033\311?\221\335N \301\024\311?\265\'\004Oz\017\311?\276(N\251\243\007\311?0,\240\314\026\373\310?]\373Xz\232\367\310?\0230W\222~\363\310? y\240{\372\373\310?q?\217:\002\004\311?RB\253\361\244\025\311?\333\302\322D\310N\311?\306\212\311\004\304p\311?\346\356\3165\'\212\311?\376[H\016x\243\311?\272\014\263[\301\262\311?\263\366t\376\270\300\311?\356=\316\307\304\314\311?ru\322\213r\332\311?~\340K]\t\317\311?\3339\002\365\274\324\311?i\345\313\374\204\342\311?ck\343s\032\356\311?B\003\005lt\377\311?\261\330\233\"\004\007\312?\204\357:q\362\010\312?t\002\303\207L\030\312?\013N.\332\244!\312?\014\237T\313;&\312?\022A\237?\242F\312?uFJi\354A\312?,\227\232\370\373)\312?\233v\364i\\\022\312?\223l\0379l\367\311?\027Hb\337\324\333\311?Zl\002( \317\311?\356\345%\234i\204\311?W\211\216\361\034b\311?\354\304,N\221P\311?P\005\324\202\264R\311?b\373\022\357\325N\311?\020\314\001\035\016T\311?~T\031\177\010U\311?\311-\212w\260`\311?\'\260\233z&y\311?\025\276\267\034\301c\311?\016\317}\377\007T\311?\314\207\344\207\361j\311?1\277G\273\331x\311?0\355\371l\255\207\311?0]`\rR\233\311?>\242(!o\261\311?\025\256\024\360\325\310\311?\263\\H\035\243\320\311?o3\347\251\246\325\311?\320\204\242P\201\331\311?/\245\330\030\016\340\311?\t\227t\345\312\330\311?\234\310\236\315B\354\311?5\222\3125\201\371\311?\224iC\344E\375\311?\377\204x\371\335\001\312?\250;\226\021\363\371\311?\017a/&\223\331\311?\367;\363\366\020\342\311?`k\344*~\342\311?\023\330{u~\337\311?\340\360,\210\033\314\311?\375\\j\rp\304\311?\234[j\202}\273\311?I\364\251\230\207\242\311?\026?\370\026\367\233\311?\311\363\256\264k\206\311?V\022C\354\370a\311?\304A\000x]b\311?\326\207\300T\335j\311?\326(Q\032]j\311?\026\346e\226\002g\311?\303\366\000\316l\006\311?\374\356y\245\374\t\311?\331\234\270Y\022\031\311?\200Xn\035\247\036\311?\275f\022%\274%\311?\333\207T\002v6\311?\001ur\2427>\311?/\021\002\001QA\311?R(\006\246\245B\311?B\362\371!iI\311?x\320\376\235sK\311?\016/\270\201cX\311?x\276\307\342\374b\311?\2330\'\211\241l\311?\030[\221c\256v\311?\336X\tC\010{\311?Q\013\203\004U{\311?\332\277\352|\003\211\311?\254z\274:\016\226\311?N\377\345\234\320\222\311?z\346O\225\233\232\311?\366-\357\201\210\232\311?A\'Jc0\226\311?\314\305\177\204\330\216\311?%\211\370cg\205\311?\241\206\346o\177\204\311?\004\205DQ\325\201\311?\324\034VA\327\201\311?\024\206\376\222\037t\311?\353\\\315\021d\212\311?#|M\341\321\236\311?\277\365T\223O\253\311?\":\016\000x\253\311?\220\340Z\256\375\253\311?\014\026\3374\243\275\311?\006\024\330\006h\307\311?N\027\200K\242\314\311?\025\036\321\2203\305\311?\322\246\345e\037\264\311?\267\357cby\253\311?)w\300\361\214\250\311?\001\032QLq\244\311?\243(r\266\360\244\311?@\222W\274\230\263\311?\035R`\217\366\260\311?\304\350^\314;\263\311?\375\215\362\243L\260\311??c\364\026\356\240\311?\243\031\230\320\265\223\311?/\200`\366\001t\311?2e\313\345KW\311?\217\022o(rD\311?\221\014\343\265\3458\311?\0106\312\324\006\"\311?\240\331\013\213\245\026\311?\372\361\227\026\365\t\311?\254\367\213Av\n\311?\372\367y\211:\376\310?\315\205MA\327\356\310?L\200{M\370\355\310?\272\341\213\267\024\336\310?\213@\314\220\360\336\310?\206\354\325*n\332\310?\007/U\304D\336\310?\215\251\2161\204\327\310?\2200\273\020s\325\310?\027\277\332e\200\312\310?\010\226N\344|\303\310?~\310\370\203\303\303\310?\204\270\223\004\270\313\310?\352=\206\250q\330\310?d\215\352\334\003\340\310?U9\025\362\006\355\310?m\271\370\260\036\004\311?6gG!\376\036\311?MD\016\375R@\311?\234\235[\324f]\311?\tL\235\003\250\202\311?\211\212W\252\"\224\311?\313K\330`\334\253\311?\313\334($,\271\311?Q\357N\343\203\303\311?\232]\307\035\016\311\311?\240]\375Y\245\324\311?\223\330\004\004\262\330\311?-\0362s\356\347\311?\250\010\005\337\023\357\311?|\224\201k=\357\311?\340\314\262\236\217\357\311?556_\030\365\311?<\352k:[\360\311?\275\341,\217\257\351\311?Yz\346E#\350\311?\'\264+{\262\345\311?\t\326f\323y\343\311?!\232/\3452\344\311?\021\005\320{\245\344\311?x\216\257\332\210\351\311?s\370\210\276\331\353\311?\330\3502\273B\355\311?\352\374F\001\303\356\311?jd\246\240\032\360\311?\022U\312\373\320\366\311?\355\033~\210$\362\311?]\302l\305\250\362\311?\2749\253\361\021\362\311?\232\361g\214\227\355\311?\235\245\316\035\251\360\311?3\224\231&\372\351\311?\032\273\370f\221\351\311?@\240\r\242\260\351\311?\031(\276\024\375\345\311?$]u\0259\341\311?_\354\317\333^\346\311?4\340x\263\020\341\311?\370i\303\376>\345\311?\310U\314\013\'\336\311?\307x\215\220\223\337\311?F\251\364{\261\343\311?\236\3637\307\327\343\311?<>}\253E\351\311?\372T\023\031]\353\311?2\206]\007\023\356\311?@\306X}\340\360\311?\363\273\312\211_\371\311?O\340.\337 \370\311?Tp\340$\271\373\311?\237R\312\020l\001\312?\220\316:\217\374\024\312?\214\"\246o\222\031\312?f)O\334\316\027\312?\020\033\217\306_\"\312?\037BU\177\226D\312?\214\260\"O\004D\312?\203CL\342\334A\312?\032M;\360\302:\312?YI\301\331\001%\312?\307U\270\'@\373\311?\002\3114\315M\361\311?\256\347nNZ\365\311?\252>\246\241\205\005\312?\276\033Jn\306\t\312?]\310<U2\376\311?\003\250j\001(\346\311?\273\343Y\361)\332\311?\251QR\244\036\311\311?\026\212\334\"\034\262\311?\241\023\022\316F\245\311?\304\'\322:\000\233\311?\025\255\300\266\234\220\311? *Z\2474\234\311?\032\206\321\244\373\226\311?\255\305\334\362\347\224\311?$\\\n@\212\227\311?\334jx\250\335\227\311?\0320CA\373\241\311?AB\'\2239\247\311?\\\256\222Py\302\311?\220\006\253B\347\333\311?J\n\217\252\344\353\311?\225:\335\206\014\374\311?\000\020Jt\243\003\312?\215y{\342\311\006\312?/ \334\346\213\022\312?\236\260\260\037\343\003\312?^FeN\215\023\312?\322\255\206\255\241 \312?\303\313\352U\030&\312?\311\346Ty\325\037\312?\265e\242\003\360!\312?\214ko\374\370\'\312?DS%\263B\035\312?\313\200\007\224\272\025\312?\030gq\236h\031\312?o\326\321R(4\312?\'\322m\361?%\312?\344+\363\351\300\030\314?\305]\212\231\347B\314?\250dzn\023A\314?YG<v\243Q\314?^\244Z\2101P\314?B\314\251\215\177Y\314?lJ\211\217\025]\314?\203Pg\271/Q\314?`?\330\352\361I\314?\321#Z\263\024W\314?\324\005\311\366\262Q\314?y\354\302j\207Z\314?\001\312\351/\027X\314?\344c\252r7N\314?\263\314\333>\317R\314?rJ\236\275\303E\314?M\365\227\357vC\314?\025\221\357\277\206A\314?\305O\203l\320L\314?K\241\221\247cP\314?o\035(_\354W\314?\201&\307?a@\314?\363\005 \372]4\314?Z8\021Ii@\314?3\235\325\266\354F\314?\225\226}\226hB\314?Z\250\225?hH\314?\300\303k\2317G\314?1H\004\'\376O\314?\240\236\227\272\306O\314?J\233\230\230\250J\314?\324\346y\034xH\314?\357\036.\246\212C\314?kk\007\315\365P\314?\255\275\\\177\243A\314?\032B\211\'\237D\314?\225\207\357>sH\314?G\036\210,\322D\314?\013\222*\311\273\\\314?U\322%DBY\314?\323\302S2zZ\314?d\310\213.jU\314?\245\342\345:\244P\314?\344\305\314\202\254N\314?\2569\n\207\023U\314?0\010Qc\347R\314?\223\225\'\\\004P\314?\357\027\007%9Q\314?\3239yp\373N\314?l\307e\300\177Q\314?Hg\257*:S\314?\221\245~\372\251S\314?Z\225Q DV\314?\233\355taPX\314?k\221E~#X\314?\023\266(~OV\314?\020\376\311\010=U\314?\264gHu7X\314?\266\004\331\345mB\314?\001X\006\235\\H\314?\006\205\360QG\023\314?V\006\252\206\312-\314?Z\316$8\225\017\314?\216\367\020xS\026\314?\303\345qK\275\004\314?\222\307EH\354\371\313?\256\212\027\333\t\016\314?f\n\325\2017\032\314?\034\201}\026y\t\314?\207\237t,3\010\314?\360U?\367d\014\314?j)\026{\014/\314?g^/\311\330;\314?\320\002.t\227W\314?\265\216!5*\206\314?\301C\220\004\223\273\314?\013\250\235\2050\003\315?\337~=\202\3020\315?v\\\374\211\244?\315?R\217\317\214\307J\315?J\306\215\002\024H\315?\263`Y\236DZ\315?\177\271\273s\315\211\315?4\360\025p\336\236\315?\353\025\021#V\217\315?\346\232-\031\372y\315?\364\312\246p\305D\315?p\373 \366\002&\315?\367\307\317\324X3\315?\240\220\375)\336\023\315?\"a\323\333\203\366\314?\271N\356:\305\361\314?\377\206?y\016\333\314?a\361\025\211{\277\314?\312\343\304\262\364\274\314?@#4)\325\243\314?\177\274x\2735\233\314?\275\367\206\256\203\204\314?\202X\304\035`\207\314?^\235.N&u\314?\221\245\225\226\037e\314?\017u\364\377w2\314?\336N%zN7\314?\227\327\276>B&\314?\352\247-\345\344\024\314?X\302=C\366\t\314?\375\'\376vy\375\313?R]t=\307\003\314?\357)W}P\005\314?\353\225\211\215?\362\313?\255[\237\232\024\344\313?\305\000\25249\347\313?\365r\366\323!\345\313?\013H\310.\273\341\313?u\321\372\325\310\340\313?x\240y\371\320\327\313?l\344n\233\237\336\313?\343n\352\345r\341\313?[l]\341\222\340\313?\302\2268\241\371\344\313?\372F\002z\322\343\313?\374\231\247^\252\336\313?#\305L\027l\347\313?\231\323\2710?\350\313?\t\234\225\202\250\332\313?H\306\261\310\213\331\313?\'\241}w\356\347\313?U1\327\232\224\337\313?\025O\301\n\205\302\313?\247\365G\260\"\267\313?\013\017XA%\221\313?>\277\016\355za\313?\333\034\354\357\232G\313?\275\037\226QU6\313?;\266B\261E-\313?\214\352\320\220\301/\313?h\236\r\rL-\313?\241\376>\331PN\313?\224|}\221\366\235\313?\374\023sH\036\323\313?\337B3\\\330\353\313?\230<.Bb\017\314?\352\021T\241B4\314?\3240\247\304\250=\314?\3762\250\316T\\\314?\3112\023\370\002t\314?\247e{_\"\177\314?\016\253\037k\253q\314?\314C\314C\2535\314?\355V4u\325>\314?\347t\264\005\337O\314?\341\312\317\311/\\\314?\202\224\274`\216c\314? \370\037f\035x\314?\362\274\332\245\233q\314?y\263s\213\332l\314?\357(\204\304,j\314?\222\0279\0163i\314?\232I\333\305\"p\314?@Nw\"\261r\314?\034CVp\245\202\314?\272\312\335^\007\213\314?\201\0018\201\337\202\314?\030\034\266\021u}\314?\210\240\213\002Tc\314?\001\204\310O\316C\314?xD/\352-:\314?\016\344\362\202\374*\314?;\3417\033\261*\314?\335\336\240\203O/\314?\315\366\014\324n#\314?\326\343\017\035:q\314?\332\027\ro\217\213\314?T\221\036G\362\243\314?\2620\317@\350\275\314?\277\203\026G\"\312\314?t\014\351l\330\341\314?&\327\354\377\036\347\314?\236\362R+\370\337\314?\365V\212\010\362\370\314?\355\322\206\303\322\000\315?\261\204*?\355\023\315?vV\025^\245\"\315?G\324b\365\351&\315?b\303\037\272\2520\315?\245\247\341\276\2022\315?]C\355\332\2056\315?\307>\252\\\006.\315?\270\210\302C%)\315?e\202[#\364\006\315?\270\034$Nk\366\314?\356B,\310\272\353\314?\330\211\344\216\253\317\314?\221\366\251\244\372\300\314?(\366=\333\204\252\314?]\264\244\374\324\223\314?\303e\342D^\220\314?\261\'.\205\017~\314?\275F\273\237\215{\314?\316\004D:\234v\314?\te\201y?c\314?\205M\360\217\3579\314?E\241\300\226\262\'\314?\337\000h\321\221\325\313?\356\227\306d\256\342\313?\030\307v.\364\327\313?\035eK\366\322\313\313?\254\3601\317\177\314\313?\032\216\271\373\264\273\313?\177\336\354\300M\307\313?\273$\333\264\252\311\313?\025\336d\242\250\266\313?\361U\002\224L\257\313?\202\314$\2430\223\313?\034Of\344u\202\313?\307]\3716Aw\313?\307#(\346on\313?\327<\273:\317q\313?|\264$\177\261p\313?\010\030y3Lh\313?\357\205\030\233\225n\313?\364/\024s\272s\313?\361n\203\337(g\313?\027\322eZ0k\313?\374dM\253o\200\313?\273hj\007\223\312\313?= \207\303\375\000\314?\241\033\350AD!\314?:\353\026+\261E\314?\205\250\021\346\265S\314?\231\333\'\301\307R\314?\264\317\024N\223X\314?g\226\317\265\331_\314?\2610?\225\245f\314?\2756\305*xf\314?\301D\332\313Xb\314?\374OR\356\253c\314?I\230\336\010\317g\313?C\005\364\263r\336\313?k\260}\274\350\317\313?\366\365o\243p\331\313?\265\322\345y\342\314\313?\005\333-nH\310\313?\271\351\367Fr\316\313?=\033\214\355\302\312\313?\345t,\313\344\317\313?\373@\001\372\316\306\313?\241\t\204\005F\312\313?\334\221\223\204\242\313\313?\221)\335e\330\313\313?\234{\376j\304\302\313?\3234\324\232y\301\313?k\211g\231\335\304\313?R\246\316,\324\335\313?\332\240O\024\203\350\313?\363\274\370\373\365\345\313?\371\311\341+k\357\313?\364\307\201E\350\341\313?\273I\251\327o\336\313?9\223\314pW\275\313?\204>\310\032D\227\313?\210$\250Q\260\225\313?\330\233\307J\224\211\313?\221`\271\304\342\216\313?\362\274L\373\203\224\313?\203,\277\227\270\221\313?\361\030\251\355\342\232\313?\035\266\227\256\014\234\313?\362\337wd\220\241\313?\245.\261\343\323\244\313?\341\351\213@\231\237\313?\006L\243s\305\237\313?\375(\006\"m\236\313?\302\340\215\021\370\237\313? \316Vm\035\255\313?7,\316\227e\257\313?\t]f1\341\262\313??\333rGb\266\313?\251\305\221\033\006\262\313?\264B\335|-\254\313?\2203\\\003\254\254\313?<t\303\264D\256\313?A\276\361\246<\251\313?A{\317*.\254\313?\373o\346\326\362\252\313?\036\022^\205\013\256\313?<\272b]\024\261\313?\203\033\r\006\365\262\313?\344K@\375{\261\313?,\260\360\303{\255\313?(\"w\234\230\261\313?\327\242w\275C\260\313?\362T\260[>\261\313?R\325\t\n\261\252\313?N\007W\345\347\253\313?\306\227-\262\315\250\313?\022\261\017R\272\253\313?[\254\241\007P\251\313?\306\362\244\010M\253\313?\333A\340\331\002\250\313?\237\233\373\200G\241\313?\261\n\260\234x\237\313?O\215o\246D}\313?\311Bl\227\3231\313?,\252\343\320\331\204\313?(\tT\302\275\271\313?\334\024\006\232\014]\311?\233\370r\270\271\345\311?\200Q&\216l\311\311?].\025-\326\366\311?\016]t\245\252\370\311?g\322\205\3345\366\311?\271uq\372\376\366\311?C\322\026\363M\374\311?CAc\005C\006\312?\222I\265k\034\023\312?\240I\273\001\001\023\312?\307\003d\304\022\n\312?]\237F\025V\016\312?]\203\264\202\203\026\312?x$\257\345\315\025\312?\t\260yiK\034\312?\230E\223Q\206&\312?\322\316\032\320\2231\312?\320f\n\332:1\312?\304I\215\025\2445\312?\263cI\327Q7\312?(\214Q\312\2609\312?\273$s\32158\312?>\312\273\374\344.\312?\257Ui(AA\312?\307Py4\010E\312?\231\2478\343;>\312?\2315y\026\371?\312?\254\301p\270\3239\312?\030La}\272<\312?\343P\260\340-9\312?\251)\367r\007@\312?\277\030\241\nE[\312?hS\025\035@t\312?\306\365\224AZ\210\312?c\303\252\2543\237\312?\271T\022\312\334\253\312?\325H\272\202G\275\312?\3178\344\321S\305\312?\266\\\024u\232\320\312?A\013K4/\344\312?\2116\312q\334\346\312?$$\315}D\334\312?\354\352ScI\306\312?\342%\306\237\231\301\312?\327&\222\013u\250\312?\325\247W\365\262\240\312?\010\223\003\362\374\224\312?y\206dY\024\234\312?\315\260\206\310?\254\312?\263\365\365D#\224\312?\031\325\r\007N\245\312?j\265{J\262\264\312?\3478\207\320\340\255\312?\236\224\2547(\251\312?\316\'\026\353`\254\312?q\216\3449\365\235\312?\016\265\204\264z\222\312?l\243],\334\227\312?\347\272:\021\016\307\312?\231>\212&\217\350\312?\310\306\213\236\276\022\313?\350\251\2179/K\313?\222XM5\205^\313?\2443\303U\204l\313?^\327\275\202%x\313?\342\203\331/\230r\313?\275\035~\212%]\313?y\371O\227\302L\313?\274\014\241x\005J\313?\302\215x\330b<\313?\370\352\272\"\2764\313?\244\244\374\256L\033\313?7\253\205,\347\037\313?3\326\236\\\312.\313?^C\323\206\2016\313?\357[\003\024PL\313?Or\352w\037\217\313?\325\331=7<V\313?\246\234\016\350u\231\312?\307\177\303<\022L\312?\257\340rMe7\312?R\354\306\215\3537\312?uWP\372=O\312?]\266Jn\034J\312?</\250~\304@\312?C\267\224|\267<\312?\376@\366\320\367@\312?\323\014?\276\330I\312?g\017\017\274\265g\312?\374qw\255\357\211\312?\354\242v,\247\236\312?\241\376\035\313g\253\312?\022\311 \017.\261\312?\233o\017\005\335e\312?\033\202l$\314^\312?\336|\tfc]\312?\246\350\314f\243m\312?\\\357\035\206m\203\312?\301jH\266\234\206\312?\203\354\030\376\243\224\312?\022\024Q\251\230\236\312?kM-:\335\242\312?!\243}X\341\251\312?\210\\\236>j\242\312?Yt\324\231\307\226\312?\375\351\302\354\276\223\312?~\274_\036\225\217\312?\233k\366\022\363\204\312?IA\236\372\223z\312? F\240\253\301|\312?\243\324w\341{}\312?h\374A\2533\201\312?\025;\352M\344\200\312?\354\333\237D\261\200\312?\246\026r\356t|\312?M\223\276\265\270k\314?\1779\231\t\235\217\314?\262\210\354y\272\227\314?$\344\3569\321\252\314?\244\227\261\236\343\256\314?+\243\010\336\315\251\314?\253\377\023&\003\265\314?\030D\372\246\026\265\314?\273\003\232\332\342\262\314?\265\"\263x\206\260\314?\014`7]0\247\314?\336\364\212Nf\241\314?\'\360\344Y\235\252\314?H\225\245\371\n\242\314?u\204nW1\232\314?\'\365wLc\217\314?-\357\216\262\234\211\314?f\006\2369\363\204\314?&\322c\177\314\223\314?a!6\0028\220\314?\371F\247\300_\222\314?f\345\304B\240\177\314?\341>8\300H\177\314?\265\343\225\n{q\314?\206\267lL\006\202\314?Ed2\376x\215\314?y\222\353\333\206\247\314?\221\356\003j\023\242\314?\034\250\356\362\366\245\314?C\006\326\227\303\263\314?\267\323\265zw\271\314?\262\267\321V\336\273\314?.\241\333{S\271\314?\267kI\024H\263\314?\265\312#\352\313\263\314?\216\031,\305#\253\314?($_*\262\255\314?\305G\233\025\027\250\314?l\371*\364\037\244\314?\323\205y\013\373\250\314?\310\2505DJ\260\314?\033\372\352T@\264\314?\223\250\313\355T\274\314?\242:\270\234\224\307\314?\214\222\302\202\034\320\314?=l\364\372+\325\314?q\307\267QF\327\314?\\\024WD6\330\314?\273\007\004\024\314\323\314?\360\n\005\353\206\315\314?\2122\206\377\225\321\314?E{\224\310@\311\314?\377\306\212Y\260\306\314?\020E\021\352\323\276\314?\341XOa0\265\314?\360\337\252U5\255\314?\230VJ\234\003\256\314?\215!\rb\370\254\314?} \353<9\251\314?2,:\352\314\243\314?\322\274\232>f\240\314?D@\014\024{\237\314?lp\324jE\344\314?\352\023d\367)\366\314?\333Zx\301T\361\314?\335\214m.\013\341\314?\326l\030\027\244\337\314?2\262M\362o\314\314?Ca\006\031\267\307\314?\366]\273\373\266\274\314?\327\357\240\021 N\314?tg\247\230\343\322\314?iq\366i=\005\315?\307\305N\001\373+\315?\331\366\326\275\236:\315?\227R ~\301X\315?GM&4jz\315?\016wN\343y\221\315?b\335J?y\211\315?\325\217\340U\365\203\315?\345PB\215\233\212\315?\202+\032\027\200\231\315?\354w=\245>\241\315?E\373\331A\205\240\315?\033D}(W\214\315?|\356\2103T\177\315?\313\345\3433\ty\315?\205\360\325\177\267o\315?)\362+\243\177l\315?P\275\245\004\023k\315?x\200\006\037ss\315?\357v{\030sz\315?\240KuW/l\315?\036\201\257P\272`\315?\032\370\2647\266f\315?\2063\355\322\356f\315?\312{yZ\256Y\315?\300h3\247\373[\315?\313\3209\276D\\\315?\376\263\363\361aZ\315?Bhj\375 W\315?\002[N\327MH\315?y\235Q\026eF\315?M<|\246RD\315?\351\006m\346N8\315?\323|[\321b@\315?\244\014\371\300\2768\315?\214\273\014\302\206.\315?\232YA\217\365-\315?\355\343\032\377;+\315?G\037\322\363\227+\315?\326\033\030\355\257&\315?\'\273\253\264K/\315?}l\247\272;C\315?\323:\261T\005M\315?T\363\376:\225^\315?B\027\356\013\321i\315?N\313=\224\320l\315?\255)\315<rQ\315?\366y@d\2074\315?{\241\302\t3J\315?rFFg\226M\315?Q\252\204\364\002V\315?\234\320w\371\316V\315?\322\260\001\3317l\315?\027\363d\030&|\315?\275\220\314\362\216v\315?XB\300\037S~\315?\367\275\350S\020\201\315?\313o,\203\305|\315?\266\022dK)\204\315?S}\271\3379\205\315?\"\371\003K\231\207\315?\341\375t\340\365\211\315?\356\253\211=h\201\315?\314_\252d\303\204\315?_L0%]v\315?3\223\366\246\354k\315?Qv\351\025\005p\315?t?\351<\021a\315?\252V\025\320\372J\315?5\321z\007^>\315?^\207\031\003\263N\315?\330\372kw\344O\315?+\220\004\332PC\315?\023\005(}\211G\315?\264\266\337\220\3747\315?_\01046F;\315?\356\206\273\032\243,\315?37w\245y\010\315?\323\347\003\377\344\372\314?\202\376\204\253\352\002\315?8\255\317-X\020\315?\036,\\\211R\030\315?}\353\024\302\242\026\315?O\\\034\0028\027\315?M)\376\333\244#\315?\273\336zp\036\036\315?\202\206\'\211_\020\315?\303\326\t\273j\026\315?!@S\235x\010\315?\307p^dN\014\315?\214\351\021\274\204\367\314?a\241\256l!\363\314?\245c\374k\341\010\315?o\221X\253\246\006\315?\371NZ%I\361\314?\351H^88\332\314?\031\032E\222\375\314\314?\215O\262\351\311\273\314?R\266W\005\273\270\314?N\240\0238\225\251\314?YWD\316t\217\314?\032@\222nX\216\314?\020\025;\3761\213\314?\370\200C\037a\225\314?N\035\0260\242\251\314?,\020\325E\036\311\314?\364o\016\014]\337\314?\303\026]\014U\331\314?|\035,\364\245\335\314?\315\n\010W\207\366\314?\334\377\375\262F\000\315?\362\321k~\277\002\315?\301\223\350\365\277\r\315?\240\264\005\276\201\r\315?tX\2422L\r\315?\210\023\363\007^\010\315?\334Iy\352\347\006\315?\302\374\323\025\205\000\315?\360\001\255\005e\366\314?\010\037p{\207\375\314?W\214\200+U\371\314?e\005\013\234v\365\314?v\263\007\246\017\347\314?\302[s\211\033\336\314?\232x\346i\351\037\315?a\236\0244\315>\315?\335\325\260\201\242i\315?\316\230Y\266\234\354\315?\320\366\362\177j#\316?\267\321\216\210\032f\316?\016\367\3300\037\235\316?\004\274\215L\016\277\316?\022;9\224\270\306\316?\254\334\302\365S\334\316?m\367\255\001\n\350\316?<\370\022\365E\354\316?\004\025\317\205\003\364\316?=T\367!\237\362\316?^\354\266>\276\332\316?\254\2363l\013\204\316?\2464\276\326u\r\316?\035T\214:\r\255\315?\201$\245\006\276\225\315?\267t*\353\307~\315?\202\274\257\2560[\315?L\255\202\016vg\315?\261=\260l\261\236\315?\213\316v\250M\354\315?\234\363\322\233\361\200\316?\257\212r\224|\337\316?g\002\304\253L\373\316?%\233,gO\377\316?\215V\256\352\276\371\316?\2169\225-\016\376\316?\301&\264\252\372\334\316?W\030K&\341\241\316?H\325I\222\364d\316?Q\251L\020\371\027\316?\205\313\026\210\037\325\315?\207\370\371\202%\275\315?\220\341 =\037\207\316?\272\022\017\2257a\316?\325E\225Wj\032\316??\021\325\245\220\365\315?[ox\232\374\361\315?\003\330\001\211\206\002\316?I \261\037Z\022\316?\342*\216\204/,\316?\253\236\\\353<>\316?$nl{]4\316?8\334\366&N:\316?\334\243\302\316\320\\\316?\253x\266V\232e\316?\351\337\216m\242a\316?\235;\333R\360\\\316?D\310\331qLa\316?\336\003\305\246\315l\316?\003\254\350\036\370i\316?\030&\341\257\272o\316?\355\246\376\273\352s\316?\353\3356\213\313|\316?%*+\270\345\204\316?\242\010\334\314~c\316?S\346\341b\027U\316?\222\210L\240XL\316?S7\330\032\230<\316?\364X&\010\306\035\316?I7s\\N\010\316?\266-\021B\034\370\315?-\2128L\035\354\315?\000\347\033\212h\337\315?cb\220G\262\277\315?S\231\343\216\227\253\315?\255\027\277\000-\243\315?6\226R\305\304\216\315?\336c\215\323@\216\315?\244\301\240^\206\205\315?\334\232j\351\256\205\315?<Y\372h\"\200\315?\314N\244\323qw\315?{\205m\332xo\315?\270P6;\013h\315?JAp\302\250W\315?#\301\257\354\335:\315?\001xv\277+>\315?4B\276\322\231>\315?\375\206\257\315\313C\315?j\262\254\037\216:\315?2#^\314\006A\315?##j\031\336)\315?\211%\323\013\270\023\315?\346\177\202#2@\315?sp\300\031\302R\315?:\3248\231\215U\315?9\340U7`U\315?\357\371\025\366\252Q\315?,\370\351OMO\315?5\036-M\230P\315?i\213\025|mR\315?\206\323\177_\356V\315?u\014I\337\004\\\315?\320b\010\204\306a\315?\254\206\205\331Rg\315?\204\224\031\033,o\315?\374\252@S\315q\315?\262\230\304\230ux\315?\"\341H\216\336j\315?\205\030@\334\373r\315?\342\200\337\204\027\204\315?\337u\335+X\202\315?Q\240\330\325\247\206\315?\324\205\200\305\337\213\315?\272\310\315\010 \211\315?e\213\222\372,{\315?\236q\034\2435y\315?\031\252\266)\213s\315?[\r\024n\265k\315?\204\342\217\356\\b\315?\313\375\006\3248g\315?\322\022\000#5[\315?\326\262\214?\027n\315?>\265\205\3353o\315?\013\233M\274\rn\315?n\324hD\371Z\315?5\rW\365\\`\315?\231\311m\204\020S\315?}$Uv\"J\315?3Si\252x:\315?3\376@cm&\315?\332\327\313\000a1\315?IZ\345\232\346C\315?\365:\230\003\363F\315?\260&m\257\247K\315?\246\025\346\n\335O\315?|\020-r\202H\315?\331\306D\357\371F\315?\226\206h\024\225D\315?=r\260\246\316=\315?\330X\255?\316#\315?\314\271\007-\223=\315?\301\016\"mq:\315?\260$\263Yy2\315?+j\nF <\315?r\241\227\366rD\315?u\267\321Q%B\315?Y\210vd\230R\315?\270\324n\337\226T\315?\305\366\203O\255]\315?G\225E\207\336g\315?\203E\333\267\256f\315?\26370m\303^\315?X\007\313\316^Z\315?G\200\233\021\032K\315?o\223$\344\220H\315?\352\rsY\267G\315?g\232\260\375dL\315?\006\363\352+._\315?\303K\376\224\033f\315?\'\364\244\223?t\315?Q\230\251\251bs\315?X\32187\032~\315?\324\315\254BVy\315?,\352\301\024Mv\315?\260\201\017\206\203\202\315?\0053\331Q2\177\315?\003\370~\325Wx\315?\2422\332\267Nt\315?\346\355\354Q\326t\315?\2767\322\216%p\315?\333\005\234\010\217t\315?\010\031\337OA\211\315?\224C^\353_\215\315?w\344\311\347u\201\315?\315\245N\306Lp\315?\307\016\241\177\277n\315?\'Q\336\2605g\315?\361^9k\205c\315?Q2>n\355t\315?\311\272\352\307G\307\317?v\366\024\207\323\314\317?\315\035Q/e\221\317?\257Z>7\331k\317?\263\203B\353~a\317?\215?c\274lO\317?\207Qa\203\275=\317?p\277\021\027_8\317?&\034\211\266\2641\317?\006\201\225C\213,\317?]\331w\330S\021\317?\270\237\257\000v\023\317?\277\tP\026h\376\316?I\344v\300Y\360\316?F\243\337\027\307\343\316?9\207\320\340m\340\316?Iu\336\037\037\317\316?\355\240=W\216\242\316?\230a\321\344\312\257\316?\250\000\321\371\024\263\316?\237A,c\217\305\316?4\276d %\357\316?\250\371\300\0249\022\317?P\357\315bn&\317?<\222`\344D?\317?P\270BKcc\317?\006\377\232-\322d\317?\327\242\276\222\317^\317?\201\333\357]>j\317?3\233\026\250\004\205\317?TO:\037\013\302\317?\263\rFf\332\360\317?\367\357H\\\312\360\317?\321L\232\200\013\004\320?\353\227\326F?\021\320?\022\313\264\235\271\036\320?\352\304\367[\301*\320?Dp\342\377\0343\320?9;\211p\3427\320?\327\314\202\322\025A\320?DP\242\026d:\320?\233#\206x\1777\320?\013\302\022\230\0319\320?\376r\216\203\020%\320?\r\351\275\037!$\320?\202\354\016\2140#\320?\336y\022sq\035\320?R_;\275\367\034\320?\236\313N\353\250\035\320?~\250K\376\333\020\320?\244\312\375\374a\005\320?\271\213!\032\214\372\317?\213\373}i\313\345\317?O`\334;\332\340\317?\250\033\341\032\303\317\317? \333\302\213o\274\317?C\235E1q\322\317?\366\332\227,!\361\317?\204rJ\\\241\361\317?\260v\024\347\250\003\320?g;\215Q*\003\321?\220z\006\017\376\336\320?\240\212\251a\260\334\320?\223\r\362\032\276\334\320?\375\205\0361z\316\320?\321\333\000\265\026\273\320?\212z\027\250\362\241\320?\234e\334\365N|\320?]\276\244\032\276Q\320?\272\307 \027\237\031\320?\212\346CH\304\361\317?\353\003@J)~\317?\326\005)i\337\013\317?\266\252\035\254\234\311\316?\232K\351\032\337w\316?0@\233O/N\316?$\330\"\343\375*\316?m\2145\r\236\n\316?\264\035\244\276d\027\316?\365Y\252z\0253\316?1\275\372\001\332Y\316?\315\374\n\234\343\221\316?$\312\225|\027o\316?v\014\014|\354>\316?\rh\2404\377(\316?l\243lW\t\022\316?W%aDz\010\316?\274ZQ\367\277\353\315?b\217\206\334\327\304\315?\324L@\021`\230\315?$u\310\356~l\315?\370\314\231\272\031X\315?\316\256\217\017\3715\315?\031\023\206\364 ,\315?IHX\337\2662\315?\024~\365-},\315?G\324\270\365\242\017\315?.\254\331\322\274\006\315?0\244e\322\026\377\314?\276V\024?^\371\314?;\002\377.H\007\315?u\374p\300I;\315?Y\363A\241.j\315?\253\"\014\236j\266\315?{P{\n\263\"\316?\n\261#\243=\275\316?\026\303\264\363&T\317?\200\327\026\207\373\324\317?\2174q\330\241-\320?\306?M\334\023l\320?\207\222\r\307\232\201\320?\022\365\006\210\027^\320?%\274\247\354\240$\320?\335B\214\024 \303\317?o\276\026\226mW\317?\224\216\203\\\363\364\316?\'#\224\342\326\251\316?d\346\273\301;l\316?j\021^v\340@\316?\3409\371\314\020\t\316?\2706,\304%\362\315?\210\367\223f0\334\315?X< \311\337\317\315?\273\014l\2065\304\315?4\262\274\217\311\300\315?\350\034{w\335\273\315?6\267\005\365t\310\315?O\310@1\301\317\315?\n)\322\014\310\357\315?\272\314\256P\253\365\315?nA\034\017\251\356\315?pDM\255$\035\316?\216\375\030\262;V\316?\216\233\335\004&\212\316?\031b\355\326\317\256\316?\301b\303\211\236\312\316?y\334R/A\313\316?\330\323b~\333\304\316?\344%\322\0228\315\316?\220\251\305$\177\327\316?\324\256D\313z\344\316?\270\356\317\r\231\347\316?\300)XU\302\342\316?\377Y\247U\352\325\316?0\332\023\277\212\325\316?\254_\213\013w\326\316?X\206\371q\202\326\316?T\032\340k\320\343\316?J\322\315\257\372\344\316?\272\232j\235 \000\317?om\270\372w\036\317?\266\241\377q\004!\317?\311\374{\247\004/\317?T\213\353\214\255/\317?\217\341\303\202\201;\317?\340\360\265yy@\317?^\373\215lj=\317?\024\340\005[6D\317?\033\222\222\322\367P\317?\221\324B\311\344T\317?\0101\026\324WZ\317? 2f\304eR\317?\\\016\361\230LX\317?\232\000!d\351[\317?\231$\352\223I~\317?g]\212H\240\203\317?\316\243\226qI\221\317?,|\260\236\360\230\317?\232~\027#\003\232\317?\326)f\357R\213\317?\032S\326\215|\200\317?\324\3374E\314\241\317?6\363\232\r\350\273\317?o\362\276\236m\275\317?3\361\021\2503\264\317?(\037>\215\324\253\317?\353\016n\332\250\250\317?\332\343\200\273\276\237\317?\026\304\316\201\326\235\317?\343.\331\260Z\244\317?\010\226o\362e\246\317?\363\\\242$k\247\317?\266\375\254\253b\247\317?\353I\r+\344\243\317?\220\244\377@\024\247\317?\025}}.\314\242\317?{\252\311\247U\241\317?y\275u\252\356\244\317?\253\3167\220\230\232\317?\036t\265\207Pt\317?{)\322\203\326\221\317?q\235&\003\245\200\317?\253\316\024\201\204}\317?\341\372fQ\216x\317?\356\025\272k9r\317?\207\343\267\360\325q\317?n9\260\177K~\317?\204\336/\'\347\222\317?= \262CZ\265\317?\004\017\367\2041\321\317?i\377)s\370\006\320?\274\010\251\224\004\214\313?\276la40T\314?\002\007\022\346\006[\314?q^H\371\334X\314?\240\303[k\030S\314?\371^\026\357\324W\314?\310\341\r\025UR\314?\375mTI\222W\314?\367\310\031\234\036Z\314?\331\363\305v\250z\314?\330:,e\375\214\314?tuZ\306l\232\314?\320m\250i.\257\314?\231\3219\206\232\375\314?\307\216\0241\357(\315?\017\266\262&\021?\315?\223t\322\235UV\315?\363\377\rN\002c\315?xDd\334\375\177\315?\255R\257\230g\236\315?\210X\016>\336\265\315?\030\32140\013\320\315?*M\277N.\351\315?W\327\250Tw\017\316?\n3\303\377\2033\316?\275\352\037I\353]\316?\232\324Q\207u`\316?\\v\324\r\036j\316?\327\177!\324\332n\316?\2119\316\216\320f\316?\203\261\232\273Q|\316?:\307\023P\307t\316?\321\272n\223Od\316?v\265V`:@\316?`\230\266\371+\326\315?\226a\300\270r{\315?I3\227\315|D\315?<\250\207\022t\016\315?\304L\3472Q\336\314?\037\003\276JZ\313\314?WK v\275\254\314?j\350\336D\246\234\314?H\025-\217!\177\314?\226$\004\350M~\314?\025\237\303\373\370k\314?\345V\311Fnm\314?.\372\337Q0Q\314?\365m\310\014B#\314?N\205$%\320/\314?#ig3\257,\314?C\273\330\356\375Q\314?)]\016|\213U\314?\331\374\2700\344n\314?+\315\314\035\024\214\314?\3533\273|X\240\314?\322\215\217\232\237\260\314?Ym\313n\320\330\314?0\037v\312\226\361\314?\373NT\265+\024\315?\324\314\377P\325)\315?\227\202\177[\301@\315?\316h/\313lJ\315?y\270\304a\316K\315?\360^q\025\344W\315?\246\377\320\277ii\315?@\361)!\324\\\315?8?V\324\206a\315?\242\330#77d\315?\250\304\274a\267\\\315?(<\376\221=P\315?\216i\207n\337+\315?A\244\247\024\260\'\315?\375\355M4\221\027\315?\002\246\302\216\265\365\314?\231z;\2241\326\314?\352\3749\327\300\256\314?\206j\020\007\205\230\314?\302/j\001\036t\314?\203\364\252T\244P\314?T\357\205\326~C\314?S\266\221\260D\'\314?LR\020q\260\r\314?\234&1\335+\000\314?\317\304\256\314\337\355\313?i\200\245\317\033\342\313?u\007\244\t\203\316\313?n$M\337\022\320\313?L7&\027\245\274\313?\255\202\212=\303\272\313?\245\271f\tj\254\313?\241\211\272S]\247\313?b\0273,\300\243\313?\241/\362\357\211\256\313?gW\2219\345}\313?\325\326\030\014_s\313?\313\343\330\226\333_\313?\274\256\200\276\004Y\313?\214\314\240\375\357X\313?%\\\356\352Z]\313?^\271\372\213\202[\313?\341]\306\376\306_\313?\302\022\373C\264O\313?\371,2\256v\\\313?\202\331N\245\260\\\313?{%B\203Je\313?\363\027\037\013vh\313?i\257\253\272(i\313?\223\265\341\013\356b\313?f\030D\222\303a\313?\024\337\300L*F\313?\245c\374k\341H\313?\212:\374\000gS\313?xWE\321fI\313?\242sQ\t\\R\313?\224g\323\0332A\313?\361A\327\327\035?\313?\275\036`nv2\313?z&\357t\3134\313?C\312c\216d\035\313?.\020\305c\215\032\313?5\n\007J#\t\313?\323\251\315-\344\371\312?Or\\\315\007\362\312?\345\350\262\027X\347\312?9`\231\257y\362\312?\361!\260\213\005\362\312?\367?(>*\375\312?l\031x\007\333\374\312?\347g\" \352\364\312?6\023\224!\025\346\312?\250:\322\203\374\330\312?\006\376>\203P\325\312?\331U4\025c\322\312?t\300\246\265\006\302\312?$\206\316\177\320\271\312?\265\001\rs\330\266\312?\032\027\336JN\244\312?lox\300\303\224\312?\3126p\007\352\224\312?\375\267#\200\301\214\312?\201\024\344\203x\206\312?\263\324Y\261\350k\312?\361\252\336L\022l\312?&\223\237\311\010l\312?\244\202\244\376ci\312?\030Q\262S\256[\312?h\002RVdX\312?\304\007\355\n\272S\312?G\274V\361/J\312?\270s\202\262\000X\312?\303\026\033\360\202S\312?\311A\231\336\257V\312?\350\352\323\231\227]\312?\322\200[&\254U\312?\206\3329D\021O\312?\014\271)PQV\312?\370\237%]md\312?8\0364\007}s\312?\014\303pC\306\202\312?\341\315\'\346\261\212\312?t+r\362\234\231\312?\033\245/\252c\232\312?q\232\207\021\227\243\312?\035\266l.\260\247\312?Uo338\254\312?-\376\216_z\246\312?\250\"\226F,\237\312?h\037\027\024\207\245\312?b6\032#\206\233\312?<\252*\314,\226\312?\323\006A\366c\233\312?\255j\300U\333\243\312?m7\262\014 \245\312?m\324\037nB\262\312?\347\312+\315i\263\312?\360\203!\342N\270\312?\352Q\317\272\372\274\312?]\366j\316a\301\312?\304Ej\261F\303\312?S\300\020N\030\310\312?h)\245\334\207\300\312?\215`4Bw\275\312?\255\264\'\251\225\307\312?c\265p\216w\335\312?_\007a}\"\340\312?hG[\251(\335\312?Aqe(\245\342\312?T\300\255#]\337\312?D\221\031hq\330\312?Z\207\267\217[\332\312?\007V\003\004\333\327\312?6\364+\2529\321\312?Q\255\002\330\'\320\312?Jz_/)\313\312?\315\250\357\270\205\307\312?\315\360\205\032\234\300\312?bx\311X\235\267\312?\246B\341X\274\275\312?`\257n\304\254\272\312?\346\253\3258J\307\312?\252\313\374\177\251\332\312?S\013\263=k\330\312?\306\032\335*P\327\312?A\013]\027\353\314\312?\241\252\266Y\304\311\312?^\257bQ\016\357\312?Y\t\367yu\026\313?\301b\310BX3\313?\311p(\273\032R\313?\327\"\251R\241d\313?\355\024\323\316.t\313?\227\233\373\355\343\217\313?P\r\231\312Y\232\313?%N8\005C\247\313?\034\351?}a\270\313?\321\345\276\266-\263\313?\267_P<\355\304\313?\3729\364\314\201\324\313?\026\264Lc\324\345\313?X\304\275\355\232\364\313?K\216\020%\'\001\314?,\362\273N\302\003\314?\035\247{\254\377\004\314?%3(\344\224\n\314?\023\025\024\200+\013\314?\177\274\013\037\007!\314?k\n\205\204\377\237\313?\206\376%\203\205N\313?\212\030\346lP\'\313?ps\251\230\352\014\313?\2246_i<\370\312?\312\0361\022\213\354\312?\265*\301\226\342\340\312?\353E1\234\022\340\312?w:\210\204\214\323\312?\372i\343U\304\323\312?I\024\241\253\211\322\312?\272\r\254\333\207\331\312?Z\232G=\305\343\312?@_\367y3\372\312?m\212]a\025\375\312?]\360\033\277\355\022\313?G\305-V<D\313?e\304\027\203\rc\313?\035\203/\373^\213\313?\334\"\010\016j\252\313?\277#\275\267\010\335\313?SJ\257\235\215\364\313?\207A\347\325\003\035\314?\325\007<wU<\314?\026\367\267\265\231K\314?\333\031\253o\216j\314?\234\305\363h\226\203\314?\350\031\211=\245\244\314?\002\250V\035A\303\314?\300XB\353\237\357\314?>F\302\274\234\031\315?\343\023\001:\013<\315?\377\312}\204\367[\315?h\276\326\347bz\315?L\366-E\202\301\315?\216\234\352h\323\323\315?\236\315\245\026\034\356\315?\303t\274*\231\341\315?\010X\374\275L\310\315?l\342\226\357\026\321\315?,F\256\262\356\323\315?\265\262TI*\364\315?\355\005\243\350::\316?\233\372\304*sm\316?9\272\325i`\210\316?jz\315\316I\177\316?r\n~]~\216\316?\314.@$AM\316?HZ\314\375E8\316?r\256$#\2566\316?\206\355\352\377c;\316?\001\314\274\"\346<\316?|\307\351\036\353?\316?J\n}\307(C\316?ot!\230\233V\316?\035\337\244\212^]\316?[\364v\315\251y\316?\317_\341W\276\204\316?\336~z\345\332\215\316?\036\255\263\037\376\241\316?\375\334\320\224\235\276\316?\021\267pD\352\002\317?\031\375TT~\213\317?\234\341\371Q|\330\317?\304\266\301`i\006\320?}\254\212\267h\035\320?\204\275!>\304\'\320?\232XZ\362\352/\320?D\214\312\222\2503\320?z\001h\'\222.\320?\251A\301Z\3576\320?wb\023\357\2719\320?\341\312\237\220\031?\320?\037\034L\3008C\320?\347n\036!\337R\320?\3104!M\277[\320?\027\353I\320\307k\320?7\377\034\327\240~\320?\217_\r\212\305\223\320?\315.E\335\372\225\320?\276\032\257_\001\243\320?\241\330\024\014\n\252\320?\002*8\226Y\277\320?\007\257\220\313\025\304\320?<\230\257\363\270\315\320?y\371\245\227{\325\320?-l^\271\004\336\320?\006\244\341\272\200\334\320?\214Z_\3713\351\320?\336\276y77\342\320?\024\004\023\250\223\346\320?\030\330\024\334\320\363\320?\275\027\314P\366\345\320?7\277\304\314\374\362\320?\334\036\020*i\354\320?2\210m]\372\357\320?\327\232H\221\376\334\320?\355\247\326-\310\327\320?h:\272\230\006\310\320?\206\341e~\034\312\320?j\226\311E\274\302\320?\342\224\271\371F\264\320?\t\'\026\266n\234\320?g\317r\224\024\234\320?\323\225\247*o\222\320?C\014\tR\010\210\320?F\331\341\003\311\210\320?\201\307\0200U\221\320?\271#\326\301E\227\320?x\311\273\307\362\236\320?\261\006\234cH\247\320?\212\274\301$P\225\320?\030b%\201.\203\320?\2320P\010\323f\320?Z\361TZ[E\320?\372\t\232\250;\325\317?\031)\003#\t\244\317?\231\324\342\351\033l\317?\346cN\002a\010\317?\362U\014\006\300\300\316?\030iB\220\014\204\316?\255\024j\2349c\316?\200n\031\204zy\316?\245\262\351\207_\221\316?1\2749,rg\316?\231[8H<$\317?\037Q\212\036D\'\317?ha\320\273\021\023\317?\256\t\253\251\023-\317?\242\354-\345|1\317?\002\300\375\365\024=\317?f\022\360\311\225J\317?vr\254\2511C\317?I\307|\020g]\317?\202\004g\0360w\317?\237\033\327\025\354,\317?rp\315C\304\322\316?\r\254_\300\375F\316?\374\350\246]\344\317\315?\236\320<\227\341s\315?Y\367{\241\001.\315?UI/-\224\023\315?\247\312l\232\273\371\314?,W\332\n\343\354\314?\203\246\365\0340\306\314?\356\007~LR\266\314?i%\325\300T\310\314?1\364l|DQ\315?\t\r\016@\264\340\315?\325\021\350\225\260\213\316?}\031\304\273\347\366\316?\022N\371z8-\317?\0335\250\373\325c\317?\315\215^\027\302\215\317?[C\210\257\237\323\317?\010\307n\227\344\335\317?L\334\033]T\364\317?\270}\311\245u\004\320?6\215\t\013\320\021\320?\363\336l\001\016\022\320?y\037\216H\360\023\320?\035\372=\235j\016\320?G\225)2\257\r\320?s\311\345\375\207-\320?D\254\361\336\300`\320?\354$\270\027\354T\320?X\302\3064T^\320?\233\260\353\201\320F\320?\247\345\341\346O9\320?\177\027\273\037\3457\320?v\235\340w\3407\320?\213\007T2\0227\320?\332\361\323v\033-\320?H\240\255\302\347 \320?\252p\231\r\021\033\320?$\237\371\312\363\010\320?cs\255ty\336\317?\253\354y\006&\332\317?\013\315\323\213j\t\320?\344\357b\212\007.\320?\244\002\311i\277=\320?\034?\3546\274A\320?\341T\030\031\354?\320?*k\037\033\026=\320?;w\312\211\307<\320?\177\266\003\345\036A\320?\251(O:@9\320?\233\205\335z\304=\320?\320\210<\303\2007\320?\262\326\222\206\001(\320?\033X\221H\020\253\317?HM\375\2648\200\317?\237\255<\2561[\317?,j\370bdS\317?Y#\377\357/R\317?<o\2163\200I\317?\365tR\270N>\317?y\303\016G}0\317?D9\243vW\'\317?\016L\367\005\267\037\317?\230I\026(\020\023\317?=Z\203\224+\376\316?B\342\223X\226\013\317?\022\001)\337\243&\317?\3732S\205\377g\317?\n\374\251=a\223\317?\300\307h6\362\255\317?}\237:\356E\310\317?\2505\310\202\224\350\317?\260t/\021\036\326\317?37\024{\276\337\317?+\272X\305\331\274\317?\215\255]\226S\233\317?\232\026\231\331\027k\317?\355\303!\353\016A\317?\277\211[\344\"\'\317?\020\"\3518V \317?\r\272\003\303Y\324\316?x\007\311\031\302\245\316?1\377~\267\224\201\316?t\t\255\245\205\355\316?\352)\315A+K\317?\311\252)E\002x\317?\004\023\311\241\217\003\317?\006+N\265\026\246\316?\017\232\360Z(j\316?%T\006\224\241x\316?\"gny=\274\316?\211\031L\211E\010\317?\363\372YMS[\317?\340\020\034*\325\244\317?\316\023\232\3472\274\317?\374\206\306iA\325\317?\215\357j=l\367\317?\'\220\363\255\370\016\320?r\003\214\316\374!\320?Hv\337\020.-\320?H\000\251\340\377-\320?\322\020(w\254-\320?,\022\265b\357-\320?q\327x\324\213&\320?\306\2300\244\007!\320?^\244\"\336\322\033\320?\337\227e\025W1\320?\002\0367M\266\031\320?\312\213\344\334:\300\317?~\022\375\254\302>\317?\301U\217\025\253\357\316?\340\250\226&\005\223\316?\023r\236\344 ~\316?\257\2258A\207x\316?\357\240\300\330\316y\316?\0206j\365=y\316?\376\216\241\226\370y\316?\314f\367\254\267\202\316?\237^\332\204<\201\316?\365\372\337\206\"a\316?\236\250\031\020)\337\316?\227\217\244\244\207A\320?\346S\377\324\003\\\320?/\3754\266#Q\320?\013\346@\363_>\320?\365q\031\251\2128\320?\305\325uf\2122\320?s\332\203\253d)\320?\340\236\274\317\276 \320?i\223\334\304=\024\320?\337\242m\3363\020\320?V\\\330w\236\010\320?s\207\020\001\316\005\320??\010\\\262\205\373\317?\244\201\030\033\314\374\317?\004]e\347\031\355\317?\314\207D\372\035\345\317?\204\356\004\216\023E\314?,\370w\372d,\315?\222\223\257\"\250|\314?\275\010]\006\2774\314?\360\321\207\323\356\374\313?\246\362C\223.\267\313?U\000\r\350\345m\313?\244\217\306\217\233\033\313?\305\2379\317\376\336\312?\325\366\327t\002\257\312?\003f\247\347)g\312?2<L\264\0213\312?cb\370*\'\021\312?\371v\304\201\215\364\311?\213\227\t\347\234\335\311?\026\034\230\273\032\311\311?\221\352\321\332\210\265\311?\213\023\222\336\315\231\311?\204\253\321\345\254\223\311?\344\232\206\321A\221\311?0F\037Qs\202\311?O8\017\265\332t\311?+D}N\036o\311?(\367\233\2061t\311?$)+~:{\311?\304\032\025\325\256\213\311?+\037\177\362B\275\311?\377\360\244\231\257\021\312?\212{TE\266\210\312?\327J\343u\317\n\313?U`\320[\237f\313?\3425\245x9\305\313?\271^c/\305)\314?m8\006FY\235\314??o\336\303\033\025\315?\275=\022sld\315?A\305\'S\273\225\315?\273_&\006X\326\315?\006|\273{9\031\316?[8\241\364\253W\316?\212\244\013!Oa\316?\034K\241\361\031\220\316?\302\237\356\367\034\274\316?\265\254\310\326\235\250\316?\314\351\214\3215\261\316? \370\025\364\251\246\316?\351].u\237\202\316?.m3sSS\316?q\272/\336\304\r\316?\340\217\323\276V\325\315?w\336QY\320\230\315?\330\253]M}d\315?\240\213t\251\213@\315?;\346\222c\030\033\315??\243\220>\217\014\315?\277|\316\267\347\364\314?\001sv07\337\314?\360;\317\2355\277\314?\232\223Y\265R\245\314?co\243\255\274w\314?\210^\273\276Sd\314?\275+\212p\366;\314?\037\252m\3467\034\314?\277\364&!\271\376\313?\336.1\037\333\365\313?\253p\202q\233\351\313?\250\037\203\376\n\345\313?\3411HiR\344\313?\365a\324\355\240\335\313?tP\345[\357\334\313?\303\324.WS\332\313?\257\300\377r\007\323\313?\322\377\230\364\374\313\313?\204G\256\252}\313\313?\374;\255kL\271\313?`\2470m:\255\313?\356Yj\314\n\226\313?Dk\352\341p\213\313?g3)3\025\212\313?\204\021\204\366\255\200\313?\316=\027R\355o\313?\361?\314:\360e\313?\016\262U\027*^\313?2\345d^\036]\313?\322{:\211\316S\313?`\212\027\260\2111\313?\204z2\263Z\026\313?\205ug\0266\375\312?\270\336M\357\226\357\312?\024\270\361\376\252\351\312?\033i\026YL\333\312?_\001\376\211\307\316\312?%1\2468\305\345\312?\017T\031\010\372\362\312?\236C\351pL\r\313?\200\355\216\374)$\313?\316\2134m\326K\313?\210868\232n\313?\273\234Y\345\036\237\313?\374\342\374\224\375\317\313?\267\3257&G\336\313?\343\262\341\033\320\363\313?\276\341sd;\030\314?\263\214\261l\026J\314?5\274\230\347:m\314?z\336%\"\020p\314?\364t\331\250\201x\314?\252\254\2454&z\314?\353\020\261!5v\314?\330T\035?Bw\314?\370\314\205\3262u\314?ekR\021tb\314?\371P\014\n/s\314?\314/\302\225eh\314?\272UJ\256\346i\314?\250\\\270\336\374g\314?n\354D\017\235Z\314?Z\264\325\354Ne\314?v;\000\204=]\314?+\235+$B^\314?\213\231\342I\211_\314?\243\373\317 YN\314?\233\363\216~\364@\314?Z\335\233\363\0248\314?p:H\326\2016\314?i\336(\264\327;\314?4\233\324\2132?\314?\005~n\027\203O\314?\243H\255\346\357T\314?\204\364\201\325rV\314?\347\0277\313\353\\\314?\234\206@\337*P\314?\341\036De\325=\314?\214\347\316t\370)\314??\306j`\234\031\314?~\306\016\365~\r\314?\321\200\034\302h\376\313?.({g\216\316\313?\006\004\177g\227\311\313?\'s6a\036\331\313?NJ\336\214\334\313\313?J\256\346)@\316\313?\331fI\321\341\331\313?\330]\214\300\331\337\313?\253\200\367e\233\341\313?x\201\307\364\332\345\313?\231\323\225j\307\326\313?\344\205\225\206\361\305\313?)e\267n\001\243\313?EywHW\207\313?\322\311\001\244\376\206\313?\232{\030\277\310\202\313?&\350\362\220pt\313?\372(\002 \027j\313?\256p\223\235\363]\313?\3326E\255TC\313?\216z\026\361\216-\313?\273\363\020\002\374\027\313?\261\216\0353\324\021\313?y\266`\014Y\033\313?c\273\030V3#\313?g\223\034\340\344\037\313?\252CH\277x$\313?P`\210<L2\313?\305\033\016Uu2\313?\230ekW\312-\313? E+d\237!\313?\255\332eZ\303\016\313?`\363e\372\t\r\313?\271\325v\212\212\365\312?2\003o*M\350\312?l\200~Q\025\342\312?\2501\027t\037\331\312?`~(J\242\324\312?\244\032\320\264\277\321\312?lj>\206E\307\312?\212\230m\002g\304\312?\023\344\031\224f\274\312?\336oz8\375\260\312?\371\2730\377\014\242\312?%\361, 8\227\312?\025\314\005\037d\210\312?\271E.r.\211\312?VBQ\202\371\211\312?\220\335\363fN\203\312?\315c\346e\301\202\312?\376\334:y=\212\312?,\326\376;\223\227\312?+\356\000\316\331\242\312?]\310\033GI\233\312?\2248?\206\r\235\312?\213\346J\002\251\224\312?\365\361\342Zs\233\312?+\334\227\330!\243\312?.r\032e\247\246\312?\013\263\r2\202\263\312?\035c\354Y\027\304\312?\243O\232\274\267\330\312?\2662]_V\356\312?\335\246\204\317\362\026\313?\006z\321\354\364\"\313?\000\277o\021RV\313?\364,EH\226y\313?B\263\225\336\321\233\313?\351\331\341\354,\263\313?i\n\036X\356\302\313?4sl0\031\266\313?\246zt\033\273\241\313?\273J\213\273\300s\313?\032\033}v\007K\313?[`\265P72\313?\335\340 .\364\031\313?\226o\023t\317\010\313?E.\204\021\005\367\312?\230\266\231\271\251\t\313?\301\251\017$\357\034\313?\312j\217\036\214\006\313?\203v\027\300E\373\312?\342=\244kh\373\312?\035\327!_\213\333\312?$\034\236Q\377\310\312?x\004\247\246s\261\312?\335\221!/\272\250\312?1P\204\232B\243\312?1\327#\206}\270\312?\313\205\203\352\n\251\312?\377\204\"\371$\231\312?@t\326\341\307\234\312?L^\244\035%\231\312?N\345\354QC\221\311?\271\263\334\275\317\275\311?z.:\366?\302\311?\227\335\366\261@\303\311?\242\322X`g\301\311?\312\211\ty#\304\311?\024?\267\261\210\312\311?Jw\254Y4\313\311?Q`\241\331\354\275\311?R\236y9\354\276\311?E\362\3101\357\267\311?|a\2328\245\273\311?\235\355P\233\330\306\311?\000$\022\006\027\313\311?4\343t_\274\311\311?\332\322z*m\322\311?\2614~N2\323\311?\312\350\"\263\352\333\311?\356t\335\027t\333\311?\005Q>\327\323\333\311?\331U\307x4\330\311?\324\355pd\263\335\311?\021\332\022\274\230\333\311?\032\275\'\3126\324\311?\275S\253\366\203\326\311?\264Cx\213\362\322\311?cB\350z\204\325\311?\335,w\311\254\334\311?\325wN\030l\341\311?\324\r\276wn\366\311?\216W\331\244\306\367\311?o\3638\237I\001\312?\312=\307\301Q$\312?7\242\256\307\332%\312?M\243@\324\272#\312?I\321\242\365\362&\312?\2557\365wr*\312?\317\265\251fH(\312?JZ\010\252\372 \312?e\343\027\027t&\312?\260V\355\232\220\026\312?h\r*\346*\032\312?\231-z#\312\t\312?\256}\"\313Y\312\311?\364\262#^i\234\311?l\320\350%\376\234\311?\217XN\354\350\222\311?\037.\350\246\225\216\311?Io\362:f\211\311?\220\320\236\344q\205\311?+wvdr\213\311?Sg\0211\365\230\311?m(\221QY\245\311?\303\303\3347\274\265\311?\243\261\034?Y\323\311?\357L\243\364E\365\311?K\014]\344\371\'\312?2\201\317\315\0062\312?\206\277\306\370\247I\312?\016\027V}\360R\312?Rcw\276\365Z\312?[x\022\234\360N\312?\213.\005*7_\312?\232\230\376\212\324r\312?\336\253V&\374\222\312?V\323\256oK\227\312?\204r\306#\375\245\312?\230n&g\247\355\345?\013\301r\320\232\251\312?\320\273\266Y\352\300\345?\245\037L\013\020e\312?\322*e\3376\177\345?\3322\246\201\233\034\312?\010\024\r\3717\r\312?\320\217\216\304.\376\311?!D\302\217\033\322\312?1\353\370A\363?\312?!\311\247%(\016\312?*<\242!g\n\312?Bxh\343~\003\312?\231\013\3629\313\372\311?\363\225\354J^\354\311?\027\002t\3600\323\311?\261\347\000\373\307\306\311?\002i\004\275e\276\311?\343\005Z\177 \300\311?\224\036X\036<\304\311?\226@\330\226\362\273\311?\232\242$p`\274\311?\364\355_\204\351\256\311?\334\"h\200\226\244\311?\335\340dK\361\231\311?o\331V\3601\221\311?Q\236\273U\276\204\311?\362D\335\365<y\311?\363\0268nkj\311?\037M\241epc\311?a\t\246\305\331g\311?G\376r\303u`\311?,\334\333\365\036c\311?\247\340\305\002,`\311?\365\327\276\217\211e\311?>\"\270\'\316e\311?!\021\205\\\312u\311?\302;B\313\217\177\311?\341lJ\344H\210\311?\322M\266\017\346\247\311?Ny\247\024\321\265\311?\344\215R]N\266\311?\"\013\214M\017\260\311?\366\337\304<\235\276\311?{\242\334\227\342\323\311?\274M\035\203\314\320\311?-PF\355b\300\311?n\005\262v\222\257\311?n\212U\360\314\245\311?\311\226s\226J\231\311?\244`:k\277\216\311?\321lw?\t\224\311?3\346\302\t\313\246\311?\322~9\355\010\253\311?(\264QBU\261\311?\000\007\030V$\270\311?\213\3049\'L\321\311?\020-Y\345\247\320\311?\315\"#\206n\315\311?\201_\363\017\372\320\311?L\006\357\307\307\320\311?ni\337#5\311\311?\211\032\204mO\306\311?\222IM\210\247\301\311?^\240q\317]\314\311?\316\003K\272\325\317\311?\302o\231\214\220\245\311?\247\272\272B\243d\311?e\376n\r\2561\311?\234\352\354\013\270\014\311?8\320\t\302\221\327\310?\320\207\205_\214\266\310?K\004\2578\312q\310?\202x\251M\246N\310?\203\256\207s0B\310?\217Tm\244]&\310?\302;\361\203\220\377\307?\335\272\366`\255\265\307?b\302\242\001@\276\307?\323B\260G4\303\307?LNK~T\333\307?C\371x\244\236\336\307?K\205\t\207\004\352\307?\2002\361\0076@\310?\001^\200,-k\310?\265\216|\356\234\227\310?\370O\360zT\257\310?\261\232\322\3551\300\310?\360\245\317\222\360\322\310?\227a\t\217)\344\310?\"\333\217\232\312\360\310?\261\267U\217\202\007\311?\214\340B\310\300\024\311?A\311^\233\377*\311?\320v\313\\\200@\311?U\276\033\226\374K\311?:\301W\244$L\311?\373K%\030\333_\311?\261v~\313Ho\311?h\264Cf\250v\311?_\213\326\204\306i\311?XN\221/\340f\311?\367\323\n\311\205g\311?\225G\360\354\026t\311?$\"Z\375\241q\311?\264\360dS\210i\311?=\263\376x\252a\311?\004d;!l_\311?\352#b\335\207b\311?\235PK\035+K\311?\367:X\350K;\311?\360Y\215\333\0363\311?\351\345\257D+-\311?7\243y\017\266)\311?\222\334U\240\372-\311?\241\222=\271\3332\311?]\346\215\366\3547\311?w\017\301R\0149\311?1\356\032\265A4\311?9\t\342\222\2349\311?\347\225\241\340\0308\311?\230\233\276\212\3132\311?GM5_\2274\311?\366\"\264\307\0060\311?\335\017\342D\240,\311?\240\346\0318\366%\311?zX\221\231W*\311?\226\177X/\271#\311?\010)@`Z\036\311?\001\242\351\267r \311?\301z<*\207!\311?q7~d\027%\311?\360F\310;\345#\311?\021d\341D$%\311?\246\2170t;\'\311?\260\313\026g\021,\311?&\363F\350\222*\311?{&\376\237\370.\311?\n\244\371\240\2753\311?~\336\221\007\3335\311?\272\027:\244\2104\311?\037\333\251\356\3160\311?2E\303\246\3612\311?w\217x!93\311?\323\326\014\231\300\'\311?\033\307fLc)\311?\033\367\353\360\005\035\311?L\230@|&\034\311?#G\356t\335\027\311?D\355\344\367)\023\311?\207\315(\3371\021\311?.\314m\273\003\016\311?j{+z\366\010\311?\323\202z\247\300\021\311?c\240c\356\367\027\311?W\033k\230\004\034\311?\211\336ec~\036\311?\305\367[\301\212!\311?#_AN##\311?\333\270\315m%(\311?knJN-(\311?\004\307\310\006\220)\311?\312\330\221i\273)\311?\267\201\306B0+\311?w\224\"\260t)\311?\004+\n\230\031&\311?\2544xK\261$\311?\325^I\224\353\035\311?\350\360\035\360Q#\311?S0\3105\274\033\311?+]\345\374Y\033\311?n\224\234\343A\022\311?\245xZS`\016\311?\345\023\376\201|\r\311?\262\026\251t\323\r\311?\221F+\025Y\r\311?\241\010\322Z\013\022\311?*\360qMQ\023\311?Eu\245+\371\024\311?a\026\2049\024\032\311?\376\350\020B\204\033\311?\2734\"q\277\036\311?h\030\331\366\277!\311?\020\027\021\251\217\036\311?[z\246*|\034\311?{}s\240\003\"\311?\035x\020\226\014\033\311?\215|)\377\004\036\311?\244\243\306\313m\027\311?`5\'\023\335\021\311?N\300\031v\304\023\311?\004\202\025\264\204\r\311?\007\216\\\033P\r\311?B<3=8\n\311?\005Ls:\257\002\311?Xp\303\030&\r\311?\236N\022H\022\017\311?\214\357r\256\264\016\311?\035+\204\027u\024\311?\252\265\nDJ\021\311?\220\3016T\037\027\311?Ru\251\300\262\032\311?O\0130\274*\001\311?d\202\000j\201\365\310?\357\276\225\262-\277\305?\016]\210\211\221\233\305?+\251\001\355\210\257\305?y\254j`\343\256\305?b\357\024^\301\267\305?\210z\226\'\335\304\305??Y\037ya\327\305?T\340\326p\240\346\305?\3548*\251\246\363\305?\341\312NI\032\377\305?a(\203J,\016\306?\037es\276\240\021\306?\365\221\010KD\021\306?}|\235/Q\030\306?\177\251\033\377p\035\306?K\340/\226\204,\306?~8\236\210\253.\306?\304\222\303>9>\306?$\210\244*.M\306?W]\025\025bO\306??^\376\371lS\306?\210\001\001!HT\306?_\004\225\n\215T\306?\276[\235\277\260L\306?\2223.\313\300I\306?T\261\301Zf%\306?\n\322\"a3\016\306?\337\016-\342\326\005\306?Wd\336$\262\001\306?l~\2364D\375\305?\177h\261\327e\377\305?\332\343\224\237\245\002\306?\315\270\246\311W\005\306?\217\216\212\203t\006\306?\022e\370\032E\000\306?\027\366\310\247F\366\305?\324\315\254BV\371\305?\034\222FD\262\371\305?\227\234\311\355M\002\306?\255\265\312(\243\005\306?\211\242)\003S\002\306?r\310\032\266\254\t\306?N\024`\331~\022\306?\255\027\023\000\273\021\306?l\335\257\375\302\375\305?\301=Kg\222\336\305?\n\014\3132\323\334\305?CV\311]\n\343\305?\334Ku\\\350\345\305?1\337>\316\333\350\305?F\246\324\t\216\351\305?X\206\032\200k\271\305?\361^\260y\'\257\305?\350\014\272\364\227\254\305?\377xm>\307\252\305?\241\317\010\265-\252\305?VKo\274\221\262\305?\004-\302\354\034\305\305?\243\220\326\253\327\323\305?O\357\347\266r\346\305?\226?\211\026s\354\305?*\324\022\254#\347\305?b\023\316\253\220\353\305?_\"tV_\353\305?\330\240\272\257\206\350\305?Yt\321\3418\350\305?5xZ\334Q\354\305?\013Lj\022\003\367\305?8\014D!\222\371\305?\026:V\371\003\375\305?\303\014\360Q=!\306?\247\327\354\234\364+\306?(\031\274\214\2731\306?\216\031\035\232\3660\306?\364\231\031!/0\306?\036\242\205\217~7\306?\230a9\310?A\306?\237\026(\316\366M\306?\327\227\244\3466W\306?F\206\272\347w\\\306?\336\340\035vek\306?\220\273\\R\"z\306?\337\361\007\262\207~\306?<)h\232}\214\306?,\205)\222\373\222\306?#^\241\206\244\223\306?\377\376\215pl\223\306?R*7\nv\247\306?X\306Q|&\302\306?\277\337-e \334\306?:\203\245\013\310\026\307?5\004\343\272\013O\307?\324\025R\317\231l\307?\317B`\267\230w\307?G\263\233\341R\312\307?\210\203\332(\030\371\307?\334@\332/:\001\310?}\235\253\030t#\310?\355TL\347\273B\310?\231 \234\257\217\027\310?\021\003\372\320G\021\310?\204Q\227,\361\367\307?q\227\341e\244\343\307?\270\016\262\205P\300\307?\236}\221B\354\233\307?e\274sIQ~\307?\"\276v\335\031u\307?_\n\017\232]w\307?P\371\3229\021\215\307?O\\\177,\363\277\307?5\207H\246s\340\307?i\374%V\004\007\310?2\232\263C\236\022\310?\033\031?\3504&\310?\306\227\315?\241.\310?\0001\377\244~7\310?.h\221U`4\310?t \346\360\033/\310?\321\337\266|E3\310?D\207\322t\374+\310?,\335U\366\372&\310?m\271\327\2425!\310?fY\372G\024\027\310?{\257$\360\274\021\310?\205\023\025\315\252\037\310?~\n\025V\t\032\310?hy\266\370($\310?,\301\252\306\207#\310?\331\n\021\245\372$\310?\307\341\311\367W\322\307?9\247\304;\341\341\307?\336}#\364\022\347\307?\021\017\3516/\356\307?)\033\016\377t\371\307?\227nf\202N\371\307?C\262\250\321\251\000\310?\324\213\300\251&\000\310?\217)\321\3629\000\310?\235x\326\207X\361\307?\3411\314\241\366\357\307?K\367\267\'\357\363\307?1N\300\322\240\370\307?\277\376\276[-\353\307?\310\027\226:&\335\307?\255\275\304b\030\323\307?\371E\317N\202\316\307?z/\034\332\220\327\307?u\230{\275\005\326\307?O\323\302\300\316\350\307?\370\262\025}\003\350\307?\206\372\206W\314\347\307?^{\367\253&\346\307?h\2454\216\235\337\307?G\2711\306R\347\307?\317\035\026\315w\356\307?\324\370\364\364\353\360\307?H\224#\210\346\006\310?\320P \017$\377\307?\256\000 \323L\312\306?_\346WM\271\275\306?\336\001n{Z\274\306?\315xo\315\234\274\306?\003\272\277\022\371\302\306?j\nSJ\276\310\306?V,\026p\343\327\306?\274~B\357\355\323\306?\027Y\261F\335\321\306?\335\025Z\323E\325\306?\031\344\306\336\237\323\306?\330\214l\344C\333\306?P:\2046\250\331\306?\2758\211\362\031\321\306?\253B\010j&\317\306?\235\276;\205\236\305\306?p\231\177f\243\302\306?\232.\022z\000\302\306?E\206\212\256a\277\306?\231]\360\234?\303\306?\005,p\264\016\307\306?B\235a\206\240\314\306?\251\275\353\340\036\323\306?\013BI\3460\326\306?.s\231\036=\323\306?\245^R\335\245\322\306?\3110Jw\247\340\306?\270\311\272\025H\344\306?\340\245\374\355\260\336\306?\016\334-;W\343\306?T\002\021\313.\344\306?\257\273\350G\235\342\306?F\372\330Pv\342\306?\013jS\320H\337\306?\022\022\205p\256\334\306?\266_\234\3122\334\306?\273\3561\201\360\333\306?\217\277&\3767U\306?Z\266ZP\2558\306?\3700\270<\2177\306?\353n\212\006\2528\306?\343\207WMh6\306?\261W\227\324\2027\306?\312Q\3676:=\306?X\026\361B\337B\306?s\370\270\367\357H\306?\361\356L\221\021J\306?\216M*\316\3349\306?\304\'\344\035\274C\306?\305d`\32395\306?)\024Oa\230\030\306?\355rG\210\275\023\306?\217\253OA\227\023\306?\320Ts\254\227\016\306?@\347\376\202\216\352\305?\t,\377\250\355\351\305?\260\272O:\003\366\305?\177g\227I\266\365\305?5\036\203MQ\371\305?\3609\035\271O\375\305?\207=R\034\276\007\306?\326b\035\262t\n\306?(\000\001\226U\013\306?\266)0\372\220\013\306?\316 fx\261\005\306?\016\n\3333q\t\306?\026\242\035\031\246\024\306?N\036D\2428\026\306?V\204\320~\372\010\306?\231\324\177\277`\003\306?\032]x:d\376\305?V\206\205\033o\371\305?\006\336\255R\230\374\305?J\267F\200\252\374\305?I\027\204\272\224\357\305?\0102\005\342\252/\306?\307%\313\237(6\306?N3rP\241>\306?\262\251\244b$:\306?\274\332\02075=\306?\270\340\2206#=\306?\3239\021\215\206=\306?v\202V\220\001A\306?\352\240C\307\253?\306?^p\330F\3245\306?n\323\351\212c.\306?\377\345g\336\002-\306?cM(\356\277(\306?%\323\333~}\035\306?\266-\270\211\324 \306?\003\177\312\301\004\037\306?v\010\363\211\002\036\306?q\364\325\2569\"\306?u\235\265\367\203#\306?\251\247a\2104\033\306?\213\363\031K\266\014\306?\"\331w\323\232\027\306?\035\321w\226\244\033\306?\032\321\272i\332\025\306?4<7\031\307\033\306?\321\350\374~\253!\306?\340\353\231\225U\'\306?3\241\356\250\326\'\306?\211\240\365\346\363.\306?Y\2208\364\256+\306?g\371\255\342\374)\306?\177\211W\335\0239\306?ZG%\332-@\306?\"\tj\024lE\306?\362\023%&J0\306?\362\000\225x\340&\306?\251_z\337\036\"\306?\263\364\314\213F\020\306?\250\004\262A\240\037\306?^\364\316\316\215\034\306?\374\343\321NL%\306?\235]\264\203\356+\306?\227Y0c\2359\306?\253\222\344\223\367,\306?E\345\323!?4\306?l\271=\205\1778\306?\037E3\325\3478\306?\352Ti\363N1\306?\000\026\277J\272=\306?l\251\235\020#L\306?=\364Yu\210E\306?}f2\344$I\306?\021it7\352I\306?\367\036\371F\036O\306?F\336\353\0041Y\306?\326\016\220y.]\306?bo\215\310\252Z\306?=\374yv\240^\306?\306\000\235\n7g\306?\031s\334\313\253j\306?\222ntc\264m\306?}8\374\371\254n\306?\241\030\306\316\365l\306?\314\216k{oW\306?3n|\203\265E\306?\316\212\357^\312M\306?\310b\306\324\220J\306?J\251\310D\361:\306?\354(dm\247;\306?\310S\177R\'?\306?\274%\304R\340A\306?\203\313\363x\0138\306?8\311\233k\2646\306?\016\334\310\017q@\306?-\017\014\377m?\306?u_\032\373\234?\306?\t\236\323\020{?\306?@\010\204zSA\306?]z@H2E\306?#&\340\213\272L\306?\264\220\302\355\267S\306?4\354\331n\340`\306?\034y\014\316ap\306?\223\034H\310T\202\306?\035\274\273=$\226\306?RC\014U\340\215\306?\242\016\327\334dc\306?Wv6\356\021M\306?\2014\233{\323*\306?\226p\377\311\223/\306?\270\024\324\023=@\306?\002\214\217\230\236E\306?\235\213\010\304\300:\306?o|\222\340\262/\306?4\345\330\2641:\306?\272\205\360`r@\306?\311\310\255\327a=\306?\270-\246\246\0308\306?9\372\300\327\3259\306?c\272\316\216m<\306?|\305\035\346\000>\306?\007\346\324\r\2258\306?\021L\332\371#1\306?$\374\210\350\242$\306?n\227\027\017\330\035\306?I\375\200\375\223\034\306?\354\361Y\326\261\025\306?^\325\214\036U\023\306?M\364\\S\336\026\306?\342\001\206a\227\023\306?\367/*X\314\020\306?\026`\272q\324\017\306?\341O\355\t\233\014\306?\224\00106^\016\306?X\355\222\037\216\001\306?q\202UF:\373\305?\201\031\216\022\264\374\305?R76\214\231\374\305?\332=l.\246\365\305?a\337([\037\364\305?UFL\036\211\366\305?]7\320<\263\366\305?Q&\320\210\033\365\305?x\346U\005\271\367\305?\002\333=P\331\366\305?\240\0051h\322\372\305?\260J\306\212J\005\306?\032\033\316\275\006\013\306?\003\226\262\305\233 \306?\331\272\336zp\036\306?\314\274\367e\240\032\306?\311\227\023^\311(\306?\316&Z\316\262\"\306?\301\363\210Ze)\306?\213\317b\376\021S\306?\304,#\021\364y\306?\325%n\013R\215\306?\343MS\013\362\241\306?\032\266\235\036*\271\306?\320n\241\351\364\325\306?\207v\210^\312\351\306?\310\275\000\310\367\357\306?\032d\210\037@\337\306?Nz0@\332\363\306?<\002\236\005\270\030\307?\331t\372\375?\'\307?\002\224Lo\3735\307?F\177\257\273U$\307?#\213\326\177\r\360\306?\330\2420\350\267\301\306?\n\033\376\320U\305\306?\233\020\267f\322\266\306?_\306\2649E\274\306?Ck\265\357\240\305\306?\024\001\261\031\236\346\306?\360vn\356p\372\306?lwr\3728\"\307?\207\272\306i\263*\307?\246\260\035Ou\017\307?\333\013F\321u\364\306?\345\356a\231\370\317\306?\261-\2261$\270\306?\215(\035G\324\215\306?K\272\354+\235|\306?\251\310\327T\314w\306?\220{\200\017\332\202\306?\354\005\343\003\342\205\306?O\366\224q\223^\306?\207\2702\333\']\306?\212\360,\3127^\306?I\003z\014Ob\306?\2140\255\234\251O\306?\305\303\3368\347/\306?0+\206>g1\306?\002\344\nCr_\306?o&\275\247&\214\306?\200?U\265?\270\306?\310f\242cb\316\306?\377\025C\203^\311\306?_\220\326\023\273\310\306?\025\207\214w\342\332\306?[\261W\t*\353\306?\235\212\005\322\206\002\307?\227\211\0302\373\025\307?\222\326@<\020.\307?\346\031\221\256\355;\307?\023\261\266\231rT\307?\252)\224HLW\307?qoo\230\027I\307?!\362\276s\355\340\306?6\032\225\333\303\214\306?A{7\016\243}\306?}6\354\243\305l\306?\333)\215\000\275\\\306?\025\343\265x\234U\306?XDT\256\336K\306?#\210-\034\214A\306?6\344yR!<\306?8&0B\035;\306?;\nOiv=\306?\03524\212$;\306?My\213\277\241;\306?\231\220A\264wB\306?e\277\n\312\026D\306?V\277\036\2106D\306?\261DD\2121K\306?\221`3\213\023I\306?#\306\366P^H\306?\300T\364\006\346H\306?\024\372\361{\301E\306?\037\000x\021\224E\306?\325\010D\"I]\306?\330\200;b\212x\306?\010\362\264HO\233\306?\355\355\255\200\366\256\306?lAWq\226\321\306?\312nW\311v\347\306?\217\247\030\371R\376\306?z\251\245\2472\006\307?y\303U\034\t\037\307?\\oR\323Y&\307?l\"\3133C+\307?t\213\216\036\236)\307?\357\223\335\253\332\036\307?\004\232\024\216<\352\306?\t8\361\306c\265\306?\255dF\306\n\201\306?\014\226\231\273^f\306?\233J\270\360\271\\\306?HF\t%\214Y\306?\344)*ieE\306?$W+\277~[\307?\312\236]\356.8\307?\253\026\374)\2326\307?\210\341\215F\352/\307?)\256Z4\305%\307?\227Q\0017X&\307?\365\244\315\352} \307?\014\2076\344\305 \307?\353\206z\2654\033\307?\307\264\"\251\006\023\307?;\350m\307/\027\307?\341.:\332\352\022\307?f\263\004\310\271\025\307?\r\245z[~\032\307?>Hz\021\240x\306?\352>\252\250\224s\306?qi\365\010Gf\306?Z[\200\317rM\306?F\344Q\260\032Y\306?\024\204(\350\301`\306?\327\026\243PD6\306?\213 u\013\3024\306?\271v-\027\255@\306?\376\361.|\034D\306?\327&\3676[K\306??\230\270\256\310J\306?>\'\200\014dP\306?\3277\273\253\332R\306?\260\301\312\272\342V\306?N\322\265\\!_\306?\023\374\234\246\302d\306?+y:,\024v\306?!\246\332-\035\201\306?F\331\021=\337\205\306?X\362\263\274k\203\306?\t.\306(\036\203\306?\235\010@\256\235\200\306?\263\031E\256R|\306?\221\236\277\\\315r\306?@\035\333\247\355c\306?\213\240\374\240\330Q\306?\241\002\256\313\363W\306?&\'\272\376\302J\306?\003B \324\233J\306?SY\254\222\334b\306?5\326\361\244\364h\306?W\006hj\370g\306?X+\335\324ue\306?f\334\241ONn\306?\264\0365[\266l\306?%-P\343\302g\306?#\373lY\310`\306?\'P;1(i\306?\354\254\234\0213h\306?\303\026g~\310j\306?b\220c\007oq\306?\027\003\315\342#t\306?\022m\246\306tv\306?\231\023wf\311v\306?\376+:xw{\306?|\374\265\'\016\201\306?\364\036KE\201\203\306?\223\207\324\240\247\202\306?~A\262P\320\205\306?\354?!\361\341\210\306?\275iylk\216\306?@\225\366\255\246\220\306?\224h\265\377\202\226\306?A\355\236\331\001\231\306?hC\010\014\265\215\306?\212\027\205\t\025o\306?kP\202\236\320b\306?\323>\331q\034h\306?\355\036\311z\244`\306?\337\321\001tXT\306?\330\216\247\272\207Q\306?O\213\025\303B^\306?~2}\261\"c\306?\274\nr\025`_\306?\367M\374y\234g\306?L\001\\\325\001l\306?\343\271=\217\361k\306?)\023\373\'_`\306?\263\257\021\310\362\\\306?f\004\332qQZ\306?\320>\211\341\200\\\306?\255a\337~[X\306?\216RF\262\000S\306?x\261&\322\332M\306?.j\360\361\033<\306?\002\225\306o\3279\306?\266\351?\323a1\306?+4\236u~+\306?\316H6\267? \306?\346b\222\345\262\376\305?\2042\227\230\212\364\305?c\242H\304\202\345\305?@\205\375\200\002\315\305?\315\006EeV\276\305?x\220P\223\026\267\305?\342\025\024H\201\254\305?-8ei\005\230\305?\253\262WnU\221\305?\333\313\234\177\322\210\305?\206\202\306\n\206\214\305?\344Y\373\233M\220\305?\211\356\003\327\257\220\305?\352\246\004,\010\221\305?<\271\tk!\220\305?\177\017\003\002B\220\305?2\214\206O\344\220\305?\0028\261\030Y\230\305?\255\374\251&\305\235\305?S\274\3500\001\255\305?\255\002\255\247\363\264\305?\346\273\301;\354\312\305?^\357\224\224\017\317\305?\330x\227(\316\323\305?\020P\206O\337\327\305?.\242\305\320\354\345\305?\352\267\303\347\315\357\305?\206jMj\235\365\305?\013\327p\177\230\376\305?\347d\242;\232\000\306?\371I\260\226\r\373\305?,\271\"\342\372\370\305?"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\303\201];\273\366y?U\202\232ap\273z?\336\2059\203\267\356{?my\207\t\332L|?F\307.\201\366K}?\231[\032\362\341\357}?\267\037\220N\324\007\177?)\311\223\324\244<\200?\213\0143\263\035\363\200?\204\177\300\354f\222\201?\232v\035\351\215\014\202?\030\253\216\233h\367\202?:\361\363\344<\221\203?\260\024>eyz\204?\236Q]:\222=\205?c^\257\377&S\206?\263\260\344\200\026x\206?\331l\005}\204\302\205?~)\"\024r\335\204?H\353\325\353\tW\203?\375[\3777\301\372\201?\244[\261\352l\373\200?C\245\305\244\265%\177?<\353>\363~K|?\237\300\001Nk\252y?\302\316\342\377m\232w?l_\330Kg\350v?u\306\241\305\354Au?\255\357=\010sNs?fW6\200rlq?\2731\310S\022\266p?\315_\363:z\255p?\251\336\262\364\265\357p?\273\307F\336A\005r?\'\267q\264x\353s?4\2150\211\3261v?\217\327\024\254\227\375w?\023S\330\373C\351y?/\307\225\364\334\264|?mO&\364N\223~?\331\233M\204cO\200?0Q\217\375\304\262\201?\322\357y\000\266|\203?\330\025\303m\036\233\205?@-\030\362\216\247\207?\030\205{j\227d\210?\037\204\260\265\037r\210?\325\366\315\002\217\235\207?\272M\t\237\345-\206?}\221=3\242c\204?\327Z\300MD\224\202?\\\027\327(\206\014\201?\212d\026Af\336\177?\\\212\302f4}|?\031\243W\376\332\314y?\221\272|o\374\036w?t\363\336/\236\365t?\233=cn\335\036s?\'-i\200c\263q?\346=\255&x\330n?\246\322\342\233\214{j?>p|\212ojh?xy|sfXh?\314\202r\243\024\351h?\335\027\024)t.j?Aq\244\214\3509j?\3444j\334\240\230j?\213\231\211\221A\310k?\254*x-\310fl?\002?;\304e3l?\027,\242\024\027\301k?\377\365]S\030Bk?D\244\2272\037\371k?0\372t\266,\321l?rx>\214\333+m?.\253\023D\233\353m?<A\017sQFo?M\202\026\226h^p?{nd\310\370\312p?M 1\351\013\373o?q$\373\340\257\333m?\242\n\010x\225_m?\006|Dm\227\rm?\r\230\205K\316Vl?^\235\332N\230\206j?\352l8\224\360pj?\362\306+\013\204oj?\356~\243\212\323*i?`\337\254\223\303\277i?\317\327\224z\002\240k?\357E\300\220\361\002n?\351\311l\370,\273o?SL\'\327\351Gp?V\316\305|\314Ip?%\002\204\370\210\344p?*\327\033\202\321Or?\323\302\300\316\250Tt?\341\'\234J\367Tu?\025S\005}\313\227u?\261\252\034b\325\203v?\342~ v/\302w?\307e\036\361\0229x?\305$TW\333\240x?\267\251=\311v\356x?\254ac\267\377cy?(\006 l\263\334z?`\302\335c-a|?s\'n\233\375\017}?\216\0335a&J}?=aY\316}\360|?tR\360\370\034v|?&\004n\207\315\232|?f\027\360X\212\351|?3\307Mh\355\021}?`\373\253\302\304\361|?\313?\273\302\t\354|?\331\3424\363\315\376|?\332\024\tR\233\313|?As\177\360\377\265|?O\301\370\241\206\372{?\313\223\243\264\302\352{?\255E\246\244\320w|?\222\370\271\372\341\202|?\207\276o\007\340\"|?\270\336\241\356$\236{?\306m\336\177\376Wz?\365\237&\024\321\230y?Q^B=1vx?=e\254k\361\177x?\341\340Y\"\032Tx?\323\316k\027\2231x?$FgJ\377Sx?\205\227\345\215\301\372w?\2728\253\267f(w?\333>\360\240\365\312v?\235\030\234\005\375,v?\217sYT\335\206u?\217\255\200\245g8u?6\377\274dt$u?\013\037\370\265\201}t?\230\000\304\251K\320s?\234v3\316\237is?%<\275,\317~r?\245\347i\002=\273q?p\370\344.\2601q?!6\266\251J\363p?-P\2274b@p?,`?\032\007\304o?I\204\026w[\240o?y\254\235Q\210\272n?\217Nj#/Om?\242_\363[\210\226k?\014\016\326\317\000\266j?+\364\003O\010\272i?|\324\200\275\231\003j?Iik\201\223&k?\376\240h\375\2619l?c\037\241\274H\316m?h\370\024\325b\275o?SL,\220\243\260p?\265\006.\020\2668p?\031\221y\373\253{o?s\250\03117\010p?#\370\017\204\214\311p?\016\250\016$\265qp?f\272\024\255\2256p?\364\223<g\243$p?F\r\362\357=\240o?\216\346\264\346H\340o?\323\3402~L1p?W\301\216PJ@p?\322\036\205\244|,p?u\217g\365\340~p?\226\212-\007\361\266o?\270i\020?/wn?\231;\017\373\370\334m?C\202\337\017\n\rn?\3436\243\261\271\024n?\374<\324#\376Bn?B\355\335=E\260o?~L\231\013\304\001p?[\026\353\322\301%p?\237\316\214\263&lp?\0307T\335:7q?|@\037\263Svq?WY\326[\325\"r?\216\301A}\366\034s?\027 \033\222\244\265s?TbA\333\026\327s?c\337v\352\217\005t?\3024\317\273\370ut?\370\203\034\274\370\240t?\366\014S\356M\362t?83\004D\344\233u?c\241\207\356\032su?\372\000\213\231\320fu?d\t\376\306\275Ju?\302\307ybJ\342t?\334\006\307\302\226rt?\271\347\010\377s\257s?8\215\3046o\275r?>\326\354~\236\321q?#\000\303\350uhq?\320n\2340;mp?\255:\243\224\255\201o?\004\312\265\207\016\230o?\237u\263]\246\310o?\337\221\225\205\315\005p?\346\307\372.\356\004p?\276U\377ih\330o?\321\251z\345\271?p?_MT%\200Qp?\321\204\334\373\n\210o?S\226\361T_\024o?\023\311qV-\261n?v\343\361u\230}n?\207\237-W\247\031n?\026\206\223\367\0334n?\271\\A\366!?p?1<pz\211Dp?\351\031\346\367Bpp?\352\274\235\257\037\203q?\357\356\202:EDr?\331V\305\261\264\247r?\273\233\036I\206rs?\216W\305\300\337\324t?\356\253\306\240\200\336u?\323\271\000\006\022\254s?`\223\315\006\255Hs?\177\352\"\374\300\222q?/\216\372\206\352/q?7\332\251mN\033q?^\001k&\366\010q?SA\r+Q\000q?E\246\346\354I\322p?\276{\376\266R\310p?u:o\347\353\307p?D?v\276o\341p?\351R\010Vh/q?\243\010 \352{cq?\261\216_O\246\227q?}\322\276\366\"\223q?<\336\351p\242\315q?\266\001\264\272\220\237q?\031e\252\0368\200q?\251\370,\300X\216q?\330\261I26jq?\215\360\337\204\216\222q?\035\031q\"v}q?$3\242\252\305\204q?\237\254\321\330\202\321q?j\340&\'\003\325q?\325N\256\330H\332q?\032\221F\n\007pr?\"\374e\331\216\007u?\326\313E5R\332v?\r\022\216\230Zhw?\261\027\201\346\260Qw?\037\272\240\276eNw?\337LG^\250\214w?\347\000\301\034=~w?@\330\357\252\203\223w??\221;-\276\357w?\372\r\217\324\255dx?\360P\254\004\237\247x?\264?\374nM\311x?\271\325 \212\321\214x?#\004\341\223\0312x?w\340,\275\347\324v?\312>\007\027\244yu?2\323w0\302\021u?\0320\205]\315gt?\304\256\016\374\177\007t?D\372C\354y\"s?\0204,gkTr?R\306v\371\001\010r?\260\2226%\276\262q?\010\353\350\200pzq?\027\370\231\231\352\340p?\034\261\353\036\246kp?\214\222l\202c\'p?\255\342\343\314\334gp?q\234\365\330\177eq?4\272N\346\311|r?X\267\332\300\246\231q?\037\323\027\230\316\264p?m\200\256\212+\277p?\312\263\201*$Op?\330dA\354B/p?\005\267\227/\2151p?\343\375F\250\n\'p?0\277\267\017\227!p?:6\351S\032so?k\372\325\344u9o?\351\"\215#9\ro?\024\271\032\270\207\255n?8_J/\372\242n?b\024\324UY\222n?\323\372?\255\300\225n?\350\to\002\030>n?s\342\330\236L\350m?]@\375\241x\031n? M\362\254o#o?/\t\345\267\307Vp?9\224\004Ua;q?\221\tQ\356\331\233q?\367\206t\330z\017r?\372\255\204\213h}r?\203\213\330\321\177\251s?\230e\207\254\371\347u?\337\006\236Ce8x?\351\203\334z\212rz?D\252\331\027\221\247{?\263\0326\275\320\313|?9\213y~\232X}?\353\206\204\'\250l~?\016\016\r\303\3735\177?\243]\253[B\340~?x\314\367\216E\223~?\367l\336\267\250\266~?.\246s\'\323\306{?;\007\016\351i {?r\034\323nO\353y?\006k\307\315\243\364z?B\326lHP\272|?\202\010\374\327uL~?\0145^H\364#\177?y:iw\316j\177?wmA\1779d\177?\273K\177\202\3151\177?\320\326\221\210\310g|?{\274\303\377\263ly?\037\341\375\266\374\307w?d\034?.S\216w?+\241`k[9x?e\253Y\324\030\216v?/\030a,\001ht?JFE\321@\202s?\337I\234\371\373\343r?\340\350\312j1\255r?u\225jv\017\226r?\304M\321\207\352\212r?\250t\333~,Vr?L<\320\245\340rr?6\232\240\251~ur?U\276\324\300p]r?\376\036\272u>\tr?\263\306\323\004\347\022r?\001\024N\313BMr?\310&\202\003\035Wr?\377o\221 \001Hr?\274\214o\343\247Ur?\"\365\246;\262fr?\242\213q\361\374\021r?\226veu}\257q?\366\013 \303\375\\q?\030s\351\365\255*q?vH\0161\216,q?\241w2Q\347\376p?\023\227\026\007-\252q?\365\376AO\303\352q?\363\021\r_\032\027r?\227\317\352\313o$r?u\215k\203\340\337r?\326\260\247i\214\340s?\222\212\250\204\205et?\364_\212\354/-u?&c\342z\007\204u?\323\367\032\202\3432v? \2124\267cfv?k\304,\261\273\013w?hW\325V\342\275w?\301\027\271\266\326hx?L\036u\222\262\347x?%\357\005.\333\303x?\001\023\215\365\332Zy?.[v~\rey?\303U\313\301_\330y?@KR\367\323\017z?G{\034\003;\311y?\3629\301Hy\367y?Q\325g{\262jy?r\216`\001Q\322y?I\320%=\210tz?\035DT\251%\222z?\243\230Y\327\252Uz?\373\2165\261-\364z?]\275>\376\3100{?\362\036\375\265\020r{?\333\246\231j=\256{?\377\033S.\217`{?\340\250\274\355\247\236{?=\364\233\221Z\213{?sb\223%\010\221{?\320S\221\310F9{?\005\331\'\212\324\327z?=\023<\263\224\224z?$l\301P\\\225y?[\331\250\310\315\342x?\370\273\0107?\034y?\360\022\256\335\374\332x?\223\300|8\234\207x?\0047\307\303\277+y?\305\341 \257t/y?\226\353\344A\267\355t?\224D\262$\231\005u?\035U\326\001\323\023u?\210.\371\266\230Su?\204\211\203\2477su?\016\264r\227\023\240u?\270g\2470\000\236v?(\n\316\302\231\275v??\301D\n\005ow?\033k0!\247.w?\262\370\333\013\275\337w?\256\031\237\035\376\007y?\3142\010\317+ny?:t\267A\246\342z?q\030\350\264P-x?\305 ,:\304\005y?\2157\355\272\233\315y?P\365\274\377\265\332x?K\022\351V\206sx?^\215\031\314R\367x?\336)\323\036\345\026y?\360\350\206s\373Ox?\266\216\310|\342.z?&\346c\273\236\217z?\223K2^2\017z?d\274\260\254i\033E?l\340\244\357\211\003E?\034YW\3271FE?B\037\241p\272\210F?Z\315\0008r\264E?\225\332o\023\014\354C?dg\360H\323\330B?\274!\210Q\342\003C?\013\225O\364\230\377B?\251o\243E\331\002B?@\\\021\263\231nB?\330;\227:\254\226B?\366\204d\202\223\315B?V\013)\225\251\257B?\nrs\321`\270B?\313\037>v86B?\311\370\336|v\002B?H\254\331\213\347\272@??\310J}m\276@?&\233\rZ\221\226??\226<\314\316\n[??\227\264\373\270\252\252??\372\274h\343\026`@?\331\030\260\356\234\211@?\225\003\274S\241\204@?b\333\315Lc\215@?\217\247\006\026\227\025@?5\007\330\254\322\224??\331\305l}\034\303??j\220Y(_\361@?\212S\304!\317\271A?vo\032\342%&B?\346q\016Z\354OB?\267\003\323;\245\033B?&\013\251\354\005\260B?\304=\330ZF\207C?\355\010\264/1zD?\'5B\254\357\335E?\177%\217[W\302F?\356\371\205Jh:G?\376f\021s\021+H?u\344\023u\220\036I?\005\365\370\200\352fI?\032P\327)B)K?\367ez\323>gL?\357\010#\315\212nN?\033\302\376\331\371\370P?\004Dc\033(XR?%\217\000\236OES?+\222\220\367\223\371S?\0215Z\331\001\201U?\302\023\313DI\374U?=\'Fa\332\341V?\233\251\352\307!@X?\014\222,\312\346VZ?\035\222n\014\200?\\?\030d\344\217\026%`?l;\274\323\334\213a?\"\340\032\034H\276b?\340>\342\277\217Vd?\203)ez\013\351e?\221x\266\235oqh?\203^xX\272\030i?\271\377QfF\351i?v)n\017T#j?z\333\274\3315\ri?>\372p\332\235\377h?\343<\241y.\303g??\354\006\203\313`e?h\031\247\366)\224c?\221\013\311\'6\257b?u\353ev>\205a?B\311cT\271Sa?\027\314\275\222tea?\224\377\320\231\242\306^?m\0035\204|3^?J\341eyc\260^?\227\013\343\016\236\200[?[\265)&\210\035Z?\\\366\2471z\236Z?L\0003\034%hY?.gB\325\340dX?Fi\227\270S\017X?\370\205M \311\005W?\373!\020\221\225\275W?\240C*\326\272\036V?!u;\373\312\203T?21\036$\222\210S?\r\357\334\365~\025S?\313$\321h\376\332R?1\344\025\336\236MR?4\263\020\311\002\271S?\314\273\262W\224\034T?\330\226\241\364\374\236E?\334\303\254\267\320\014G?\022\037!\310\026\211F?\302\317\224\252\250RG?\250l\273}\024}G?\001C8a \332G?*\277\235(/PG?\377P\022\r\260aF?\345\247\'\342cfE?\034\003W\036I\356E?{\263\240\014b[G?\353\312\241$\250\nK?\255\006\010\266\257\333N?\010N\367\346\251\241L?\372V\337QG\355L?N\203?OE\"K?\017\302\241\214\370\033K?\303\324\037,&\340N?y\247\031\212\357OO?\221\247.\336d[S?\026\231\203\027\262\367X?\235\260\023J\236l\\?\005\3564*T]^?\231\213A%\203\343_?\320m\255\"\350\327R?G\310\311\217\273\262R?\316\321M\334\326\210S?F\321.\237\337\tS?\301&\325\270\343\277S?l\260\221\240\317\262T?\320\023>w\\6U?\244\346\'\254\277\353T?2.\\#p\216T?I\373c}\252\332S?\031\2767\346r\014S?\240\265\204w\027\372P?\242\214\031*\304\370P?{\360J\372\312oP?8=\222\014\345\266P?(\007\021{1,P?9\246u\273aRQ?\323\334\024\323\250gQ?\334\227\207\332\243(Q?\222\3302<\235\373P?\276\031\036\303\257\315P?\320jt\023$\322P?\361\025\306\336\327\275O?n\347\031\000LGP?\373\265q\233\333JP?\031}\007j\361\\Q?>-g8cmS?\036\354\240T\363\003T?0\362f\230\320\340S?h\356&\2325\350S?:.n\231\217HT?ET\331^\250OT?\247\323k\307\225\371U?7\007\337f\267\267W?\275\'\266Rm\017Y?\234\255\320\310f\225Y?2S\331\3765#Z?\263f\323-\025\375\\?\302m[\376\275\300^?\256\364V4\0109`?\343n}ID\247`?\273\307\215\263\315\263`?\272}L\'\266\333^?\321\214\035\013\014\204]?\324Z\245\257x\316\\?w\204\202;\030\375]?\215\224\024\365\325\227]?\322\352#q\010\265\\?\210\215Y\306\353\231\\?&/?+\301\306[?\257\266\317\033\010x[?\314\215T\245N\274Z?\310\220\003y\355\007Y?\335\215\274\256\2120X?\032\204\366@\344ZX?a\240\340l\267\200W?\2319\006_\366\275V?\261\310\310\274\002\217W?\335\350\366\241\361\225W?\371\312\247\272\214\nX?!{\006\322\232&Y?U9\236\343daV?\037\240cV\333\214T?\232\266=I\323\003S?\2727\032\033\025\223R?\316+\321kI\315R?<\356\245:.\364R?\220\366\351\277\241\314S?\271]j\257\376\002S?e\330w1\014\331R?\266sU1y)S?\344\323J\276e\220S?z\346\376M\234\232S?\007\353\251\034-\343S?\365\234x\367\225AT??>5\037V\006U?\037\314\256\372\252\374U?\005!\27121(V?\256\321h.\024\tV?\221G\330\006\332\\V?<k.l\n\272V?\332j\314\247kFV?\007\340C\342N\204U?\324\277\240\\\205ZT?\000M\323S#uT?/7_\277<qT?3.\003k(\367S?\367\023\230\305\371\330S?S\017\020MR\371T?b\241\333\355\250\241U?\212\344+\201\224\330U?\027[\025\234RBV?\3225\306`[\305V?\017 \200*\'\007W?\033\323\377\261\221\235W?\274\310y\t\222\232M??\305P\322\354OL?\231v\321ZH\365J?\275l\020\3550\024J?\300\342\345\363\316\304K?\256\000\014\357e\347L?\242\313\267\030\345\224N?\343\000\302\323\240rP?t\253\243\207\372\215Q?wj8\251\213\273Q?\304\252\322\372\201\311R?^vHd1GU?\372)\264\312Q\"W?\030?X\211#VY?dL\200\265\370\201\\?\223\302\352\377\204\311`?\272\025\023\262+\341d?\222%\006\220\300pe?\341\356\334\026\215\376e?cN\017\213\312\346g?h\212kB{qi?\016\203\214\2175tj?\252\007\203m\357\023j?\276\r\241\262\260\223i?\246\271\240\264\363\332e?\271\311\301\317,\307c?%\005\014N!\260b?\364\315\301)/\326`?\304\206~\330\230\370_?\376\241\214\375\324\224^?\270\014\271\313\336OV?\344l#fB\010R?[\242Cxe+P?\361\003\350\333\250lM?\035-\253\t\322\'J?\340\362j\026\356\260G?\026`\367\324\354\254F?\374\307\320\036 yF?\252\342\017\004\235PE?$H\271\274\270\333E?q8\235\253\200WH?\002\031 \"L\211H?\247\\\021\227D?H?aj\360cq\244H?Y9\024;\243xH?8C#8++H?9\010G\204\327\022H?\276W\276xP\232G?6\236\005*\256\355G?\310\356X%\276\376G?\260\362C&\222HH?whjov\277H?\313\303:<!\307H?\242\360\246I\223\314F?\2328\262%\275\005H?h\240U\r\222\243H?Wm\253\027K\252I?\016b?B\317\221E?e\376>\324\227TF?\312Q\217S\305kF?\355\373r\221;\237C?\271\323\267{\242\2638?d|\220L$$4?\231\300OJx\2522?\005GCr\244\3063?cB\023\373\340\2114?\315\377_\000\327\3215?\251\255/\027\223,7?\217\372\370?\030\\9?C\362\332\024\253\3409?\005I\370\016\031\267:?\327%Wo\334{;?\377\203\003\262\273f@?\234\020h \376\260A?\202\314\347?\0306B?\333\253\3112H\352B?\320\316\343\334\2301D?\002\356\213\341p:G?S\204C\213F I?\324Q\\\365\2031G?o\2155GITG?Qqj\007&\256H?i\364\373\342x\\I?.Zda\246\362H?\203)\341Ag]I?\000\222`\337\213\205J?}Z\255b\335\267K?\221\n\267\n\317<J?\265\213\260{\007LK?\312}\003w\306\025L?\252\034-\343\2630L?\267\213k\247\246WL?c\274P:=aL?>\205\211*\357\357K?\322Y\214\330,9L?\277\233\'\004\226OK?\221\'I\327L\276I?\354\026\351\2243SK?\234\035q\024\225\027M?#\303U^%1N?\323\2247\234\006\000O?\3472\n\211\201\234J?\336\032nF!WG?v\013\362\355<uE?P\353\313\014\372VD?W\351\351\201a\211??r\366\374\240\2265=?\326\021>\226i\364=?5\315s\370/\006B?\357[T[OLE?M\022\256\364\230PJ?5\036e\367\366DM? n\r\300\224\356O?\346\265\223:a\277P?\242\263\307iZ\362P?\3056tv\3347Q?A\2640\355\226BR?N\254\247\344\tuR?\350\335 \246\271\037T?<1b\324\362YW?-\335\241\204@\376W?L\273\177\311\031\314W?\2454h\326\274$Z?\353\323\0064\314a[?\037\320n4M\306[?U\026\272O\344\002]?\213h\231\027\360\312_?\304\014\227\231\365\t`?)\376\246\262Sl_?\245\3757x$3^?;IZ\364\305\023^?:\"\216^\325\245[?\256\241\222Br\225[?\337\354\266\333\223_]?\224\273\014U\352\277b?\036?\257\323\243\004h?D\310*\271Kal?\361\367(\257\327\354o?\354\235A\253\342yp?v\013\035n\231iq?\343\321|\204P\224r?\232\255\3309\257\254r?G\021\354\324i\230r?\253\036\337\307\231rr?1\022\235\017\026\350o?x\222\017\242\376xd?8\025\234\006\264\220Z?\027eaH\201\027S?+\217\226L\023\213O?\tr\023_4\376I?\372|\217X]\027F?\007?\331\343q\220A?\010Z\n\023\tP:?\001\016%\203q\2524?T\370\250\311\320\3242?eE\266\356D\0330?,\311\222\035AH+?A4\232,Sk(?\237\265\006\257\220\313%?\311\271Y+\366q&?<\216Y\325\026\307&?<\263i\024\256!*?\370T]\246w\010+?\267,\231Bkn*?\343\224[\210Et.?\260,\323Z\221\3131?hC\335\213XY5?\306j\002+\330]H?\n:RdJwI?\202\0338\206Q\'H?\213=\276\001\211\315G?ENs\263\276\317H?\264\303\004\332\302\230I?^SZ^=\027K?\273;\370\252\021\321J?h\343\220&A,I?\215D\027\275\033WH?N^/\020\256\307G?\'\361\306=\356?H?\\\014\210\212\035\377H?mM4\364\301\305I?\207J\n\311UnJ?$\214{\000F(J?\nH\216\2031sH?7\376\322\017\333\367G??\241\200\350\247\nF?\252Wi\t4\003E?\035<\023\232$\226D?\203\317\026\335hjC?\320\014)\331\306\254B?\275\366A\240w\206@?\341eDq\3408=?T\031\267\262\363\037:?\233\210#\264\212\2437?\226=l\226\211*5?J\312\255\256\342\0135?\347$\3640=,7?\304:]/\260;;?\004`%\347\020\255??\336\320\357V\361\241??\035\252\364\326jV@?z\224\000\353\'R@?~\322\024\367\333{A?u\365#xU\375@?\203\001V\3279\267=?U\007\355\223\253q9?\025\226\267\244\034,9?x\272]\251\023B:?\023\200\301fgnA?\265\026\020\241\344\352D?\363\213T\020\352\277J?\003X\000-?kL?\200\313\214L\372ZK?\217\177i\310\255\206J?\004h\226/(\006J?\222\315\023\327JKI??\007\361\334\326qG?\366#\376\216\314\026E?\273P=\365\357\312C?\267Ud\002\353)C?;\265|\"$\022B?\332\341\034fI/C?r\310@}O\325B?\2764\010\035\273\336B?\326\300\245O\352LC?\252\010\232C\020\357B?\022\320\344e\304:B?\231\2775\274\310 A?\247\031\217\250\t\010A?;\000\003\275GhA?\226\361J\355\240m@?l\244\206\345\270\033@?\033\273\375\037K\022@?U\357x\254|C??x\377\314\336!\336=?v\202\024t/\273=?\215X=\300\220^??\027#a\313j;??\010\344\335TN\302??bm\022\327\277X@?\201{\\#\233\016A?z\312S\036)\227@?\224\031\360\253\322\023??\270SQ\364t9;?\325E\334,\366H7?\022\321k\220\242\3765?\307]\255\250\373\3375?\362/\211\2001\3056?Im\325\272|\0079?\215]\223O>&:?&o\362\356\327\203:?|\256\230\014%e;?\225\313t\037\350\267;?5\013\332\002G\244;?\235\353\214\3236\034;?\r\235\t\023g\301;?\210\354y\272\227T=?\374\2638\306\302\316<?\332\031\222\322\355\236<?\332\265\243\211\216\034=?\260d\\\253\034\336<?\203\272>/\271\252<?\0060\375\374\013\305<?\236\205D\247\325\372<?X\233\307\255\276\304<?\251\334y\037\235s=?b\322\366\347V\223=?\375\250y\323\234\330=?\214\264\0323\005B=?-\334\330=\220\364=?P\t,\331\341J>?\254\\\010o\2303>?\213\330U\270M\007>?\341\331\360\204\366\233=?[\366\306>8\007>?`-2\222!\355=?\354\267\360hU\336=?\363\344I\273\231\035>?\301\003\301\353L\004>?#\013\301?\337\365=?\341.DL^\244=?o\207\213~b\324=?\017R>\244\342v=?(\227\177Z0\344=?\365\021\206n\347\334<?\033\252\307U\343\247<?\023\263\3016\240\255<?\261\352 m\353\300<?U\277\0023\007\212=?\332\324U\216\204\016>?\335f\374\2138N>?L\250\006\270%\024@?\350\013z\237E\027=?\305\022\355bN[9?\315\341\263\245\251\3064?\373\025rr\255`5?C\2041\202\303\2243?xqC\325\255s3?\375k\300\272\006\2123?\205\263\247Y\252O5?\236F\212c\205\2444?P\213\022\013\264\3575?\31226\007\027\0216?3\016`W\264\2655?(\027\344\3402\2443?\313\364*\266r\3044?\"\324\276\0312\2476?\277n9\340\270a;?xSs\264\010\227>?+<D\260e\212=?\310\220\323?\327\252<?\027$\016\275\353\212>?\205U\025J\301{@?!\371s\237V\260A?\303\301\314\341\324\263B?\323\244\031-5\262C?K\257\303T\327\372B?e@`_\227SE?\005\300x\006\r\375C?\247\200\031+\350\370C?\355\305x\026\202\361C?\217\201\220\272\n\032D?wx:\035\351\210C?JR\270o\314\352A?\303\350\027\367\257DA?\310Z_\376\354BA?\365\237\315[\211\001A?\345\277\257\255y7A?\274\001\025w\204\037A?\013\020\206\263\273=A?7\213\240\374\240\330A?=<\225\035,\255@?\021\365Z\207\245\254??l\370\272e\2671>?3\212\367y\022,<?oB\034IT8:?\233\322i\371[\3449?\261\014(\326\324r:?\2355\371\337\252\3508?\204\217w\3758P6?M$\330\205\r\2713?q\331\312FEn6?\344|\247\205o\2725?\372\306\211\017\351@\201?\021up\307\323\246\201?\036\243\014\272\\{\201?\023\026\267\3778\311\201?\357FG\273\317\306\201?_b\236(\030\264\201?\255ZF\250!\303\201?\364\224\002\366\304\177\201?j\247X\310kD\201?\325\210\245\360\274.\201?\263\275\343\002:\r\201?O\\\000\255\010\035\201?+\314\032s\331\023\201?\252\333\350\202K\336\200?\307\004\317\231\301\323\200?K\227\320\355\275\251\200?&?\366;\223\204\200?\216\347\233\203S^\200?\303\025\374\250\031a\200?j)\273\301\231]\200?\342~\372\256\2146\200?\223\010>\032\0175\200?: \377\210\003A\200?qGD\240\026]\200?\354\214\262(3x\200?\\\221\216.\023\236\200?#&\212\213\001\344\200?\221\216\003\223A\014\201?B\004\027\211\3331\201?\212G\271f\270\"\201?-\020\n8\356\016\201?O\344\002\375\251\344\200?X\017\365A\352\004\201?HK\3404O>\201?\310\354\"\01041\201?\351*\376kPf\201?\307\360\243\335\222c\201?\032\034Z\241\236\367\200?s\362\374KM\340\200?r\001\235\206\376\302\200?\r\366\022\242\375\301\200?FR\366\211H\274\200?\253\2100\004T\306\200?\353\2042\265\356\344\200?\217P\1772\320\371\200?\237\'\221\211\003\004\201?\335\240\031kO.\201?\024eF\252\265Q\201?=\313m\247\037g\201?\257Zs)\251q\201?\n\274h\3172y\201?.\264u\2330\224\201?5\311Ai\245\231\201?\374\326\303\241\373\225\201?=$BD\346\241\201?\002\3507\031C\243\201?`=\2131\362\252\201?\202 Tju\300\201?\240\266\020[\257&\201?DR\236\210d\031\201?\357OI\2408\265\200?\256\272_\034\224\344\200?E\333\250\203\371\201\200?!\2663\315\355\276\200?D|<\001\010\260\200?7h\354\2416\327\200?\351\031\232i\375X\201?AX\341$:\274\201?i\330\367\372\275\301\201?\374\n\324\215p\215\201?\'\276&\340\341\272\201?\"\3662\037J\223\202?\201c\350;l\340\202?\243\203V\251\236\241\203?\362\350\021f\204\376\204?)\001\304l\350\267\206?\332p\251a\367\321\210?\365\302\201\266\363\002\212?B\3006\357\363p\212?\034\200\276A<\221\212?-C\034\353\3426\212?W\307\352\211\300\356\212?\217H\362\224\211\346\213?6\231Q)\377%\214?\254\367\021{E\020\213?\003OW\000\036\024\212?\361b\371\244\'\355\210?P\234\016*\222+\210?L\006\345UT\377\207?\346\014\355\345<8\207?|,\371\257\336n\206?j4\310C0%\206?\031T\033\234\210~\205?\240D(\017;\356\204?#|9\375\352\273\204?_J\004zF\372\203?\037\306{@f\210\203?\363\326c\234k\n\203?k\331\224\n\256\342\202?I\017\205\307ey\202?!\032az\220\330\201?\307\224\252\025\357\305\200?{gh\307\003M\200?=;\200H6\214\177?\242\261\354\005Cv~?\242\274\267k\007\370}?jt\004\371\244\326}?U3YFd\004~?JNe\322X[~?\277V\244\352\240\020~?\\\350.\257z\305}?*\354(\"Q\325}?zV:n\344\371}?\373\327\316\004~\345}?2\213l\3014\007~?\035\211\305\337^\350}?=\267\027k\224\002~?\000\214\353\010u\313}?_\250\037{\215\302}?\211O\026\313\350\330}?6\316\246#\200\233}?\022\332\034.\014m}?\375^Eq\207\200}?;\317hC\257S}?\333H\237w\337\010}?\235Z\270\327B\303|?\374\261t\376 \244|?\023Fbk~H|?\376\213#\263\323?{?<\323#\304\227\264z?\225\310\347\020\226\203y?\271\006\341\312\014-x?N\317\261?-_w?\274A\271\017n\242v?1v\324.,\323u?;P\370\203\271\221u?>Y\013\225ztu?\266e\341g3\271v?\362\325\031\325\245#y?g\005\303\017\207\322z?+\223B\242\316\261{?Hs\217e\364\265|?T\007\033\314\226\024~?\231\003\014\344<\020\177?_#V:\260\000\200?\0273\362\024\232m\200?\254\0170b\273U\201?\275m\362\320\201)\202?\t\243\267J@\344\202?\364\250\327\261:\007\205?\310\316\212\221\355\310\205?9Gi\253\234:\206?\374O\311\374Mo\205?!\000\335<zh\204?\356Q\207.\013\232\204?\324\035\2573\312\242\204?\260\255Spn\317\204?\354\252\204J\003\017\205?\200\340\333\010L&\205?{\177\363J\250\314\204?Z\231\266\240s\216\204?\211C\207\327-\266\204?PD\240\251\300\221\204?O\302)\314\253\325\203?\332]&\336\217H\204?t\005\367\335Vu\204?\253\n\022}l\002\204?\233c\343;\335\353\203?\241!t\264\320\354\203?\377\004YG<v\203?\223\215\273\314\246\337\202?A\267l\264\351\366\200?\322f\353\314|\210\177?\202\316q\\02}?\004\260\025\365\310m{?\231\320\2430\217\377y?\2013\361A\341Iy?\237y9\354\276cx?F)wX\016\030w?\036\320\331\317PFv?\363\017\305^\324`u?\017\335+t\327rt?5I1\3420\010t?1\245\017\014\t\340r?\321=\353\032-\007r?\236o/\\b\324q?H\366k_\376\022r?+\nV\375\223\275r?\274p\364\354J\257s?\375a\021\344\034Lu?\322$\014^O\317v?\370\252\353\tx\275w?\252\266\255\303W\217y?\275M\274Y<\"z?\252\214I\366=\'{?\005Jh\235\201)|?\254\353\030\243\352a|?\360\010\305[\211n}?\250\032vE\024\206}?\245\250:\261u\023~?2*M\243\371\376~?\026\274\324Ga\220\200?M\334*\210\201\256\201?,\212\204\332b\303\202?g\025\245\240\265\204\203?\t\204m)\277\303\203?_\257/`i\343\203?\030t=/\347\342\203?-&\236\002LX\204?4\364\010\233%\364\203?\2144\271d\2210\204?\336X\372\027\333\200\204?\320\230\031\233\365\340\204?+1\312\221\240\210\205?\263\204x\316]\345\205?\025\314jJJ+\206?\n\2766\tHu\206?\343@@\245\347i\206?x\3026\325\237l\206?\3136\022\226\350\224\206?\036P\207,\no\206?\300^.\320Xu\206?\324DoV\034\205\206?\374DYP\374>\206?A3\362\363\213\204\205?\034\261b-Hw\203?\233\347\251\212\200u\202?4S,G`]\201?\200m7\240)d\200?\014\241_hi\377\177?\215\037t\032\2636\177?}\371\237\'^\230~?\203C+\324\363\236}?\335{*:\241\366|?\330Sa\"\224\255|?\246\243\363L\365\205|?7\250\375\326N\224|?=\312?5\211:~?\026j\"s2_\200?\311\357e\211k\010\200?\025\272\214G\033\332\177?\335\335!\312\271B\177?\211R\357g\200$\177?(\362u0\232I\177?\360\036\313{\317Z\177?\267HVU\232Z\177?\346\374\223Flz\177?\'\376\244\261(\262\177?\361\270\311$\372\347\177?\214\330\231\325J\007\200?\223\035 :2\306\177?\337_o(\235\304\177?\3621\374\000\324o\177?eh(-\335\326~?\371d\327S1\351}?\336\022]p6\270}?.Y\221\250\202\027~?\034\233\340E\246\026~?1yT\023|\207~?P\212w\374\356\210\200?k\346h\014u\203\201?&}\255\215\251\242\201?:3a\376\201\247\201?{\334\177\260\310\271\201?\tlx\301z\270\201?\363\177o\034v\264\201?\247\244\017\334\317\311\201?\262\017E\220i\276\201?`ytI\363\314\201?\235\022\202\350X\304\201?\257\340\337\351\223\261\201?\240\000\231\274R\255\201?\266\22196\005\251\201?\021R\032\336j\245\201?,\332\344<\330l\201?\257\2713\253(r\201?\360~[\376\343\207\201?\252\233\261\206\220\225\201?\333)%\035H\213\201?\207\000\250.Us\201?v\312\323Tw\256\201?ZK\025M\346\246\201?\207c\024\006\220\232\201?\313\324\250\260\347\245\201?Y\025\300\030\272\247\201?m\334\002\014B\256\201?8\341\201\250\313\307\201?6/+m\241\306\201?\305E\237\243\026\311\201?\311Q\004a<\275\201?\370\272\206\305\032\301\201?\022\\\216Rg\300\201?\317\202\331\317%\306\201?\341\326\245\222v\255\201?\343\201\257\205\254\260\201?\264%\217\315\254\252\201?M\214<{\364\247\201?%\270^\301\240\306\201?\300\223\300-\362\307\201?\343\340D\207\317\274\201?\013\205\276\252i\315\201?v\004\252^\002\340\201?/x\221<\351\332\201?\"K\327-\261\033\202?mN\237\311p\317\202?\315\366]\033n\343\202?\223\201\236.\324_|?A\223C\022]\032\202?\026\243\365\212\203X\201?DD\016j\357\356\201?\274yr\231\017\022\202?\022\357\ry\\8\202?5\246\237\361\366\200\202?\214h;\246\356\312\202?0\3379\025\"@\203?=WY\260\2242\203?\372:\231M\272\014\203?+\211\313uC\350\202?\234\327,%8\346\202?~\343\267]r \203?T\035\303z\333\000\203?\320\237\250\377\273$\203?\202\027\253=Ti\203?\254\306z\271;\252\203?\347\365\3147G\302\203?\002\261\312W\222\324\203?\264\300\373\003\025\360\203?\"A\247\326\261\000\204?\217d\2455E\001\204?uh0\304\354\220\203?W\347P:\034S\203?\'Y3\244\035F\203?\242\357s\036C7\203?\245\311\205\375\260;\203?\357\273^\244\2243\203?\030\332\352\206.\'\203?\371k\010G\366,\203?N%\267\261\317\037\203?S\025d\025\200\220\202?\254\024r\r\202z\202?\035\304}\315:/\202?\303\033PqG\370\201?\375Z\311T\342\266\201?\323a 0Xo\201?\216\203\006\363;s\201?\301\004\231]*H\201?\030\322SwtB\201?y\017\375\376\300a\201?\322ge\315X\314\201?\020\254T\227&\201\202?\331\032[\031\236\250\202?\023\235\225O\2675\203?\357\324\306R\320_\203?.\355\326]\231\352\203?\310\2253A\370C\204?\200\211\306zm\255\204?\350\\u\020\200\'\205?E\270a\305\275\272\205?\017\363\262\0243<\206?b\375\331n\006\250\206?\2506\214\020\213\t\207?5\371c\343\214$\207?4\247+\325\216\255\206?i;\023\213\371h\206?g\243\\\342\024\222\206?\021L\r\353\310\274\206?\002\020\254\347\372\367\206?\252\344\274/\311)\207?O\326)\010~Q\207?\361\364Y\204\263r\207?\353\231:\234\264\001\210?!\223Y\253\3401\210?R<$8\322r\210?\240\r\242\260\351\023\211?\315\205s\010zz\211?\314\355\347\337\361\227\211?k6\262\322t\333\211?1C\241mN\210\211?PY\267\273\263\350\210?F(\251X\244\245\210?\266\301\024\333`\205\210?\212$^\304\225\270\210?\3340\036f\256Z\211??\325\014\234xv\211?\306\370\017m\360S\207?6\341\371m\321\307\201?+2: \t\373~?&\364y\023\343\377}?\270\023\250\242\321M}?\201q$[S\334}?\\\014g|4\334}?\311u\021\256\231\337}?y\0000C\210\320}?\344\235\030\231Mn~?*\330`\220\335\315\177?\010Ha\002\252\304\200?\312\023\207\272\257\315\201?\334\016\010\322\227n\202?>p\356\337W\r\203?\326\242^ \243d\203?\314\374BFB\206\202?\227\264m\016\223M\202?7j\275\223\332\201\202?\220aR\322|\373\202?\3019\315I\302\232\203?\317S\025\001\353\304\203?3\345\340%z\021\204?K\022j\327\233P\204?\203\350\210\375\027h\204?\304`\r6\306e\204?7Z\362\236!!\204?\232mP\366\364\343\203?\203\315W\316\200\250\203?\263\242\323\341\213p\203?T\350z\252\\\013\203?\r&\271T\211\330\202?%\205\344*7\315\202?\014\\\206N\273\327\202?\361\215e\0355\366\202?NC\177a,\345\202?*a;R\\\331\202?Y\373\0031E\303\202?\005\206w|%\327\213?\021\205\304\255\352\373\214?Z\331\374\307[\021\215?\225\247\3725\\[\215?\247\254\343N\242\213\215?*\037.\253C}\215?\365\202\301\310\332\305\215?\310\027\202V?\272\215?\366\267\t\231Y\273\215?\340o5d\234\274\215?q\364\022\022R\177\215?\014\211\021H\335\\\215??\226\001\021)\240\215?\263\222\271\246\376I\215?G\311C\220\227\366\214?/\203\374/\201\242\214?\203d_\204\271u\214?-P\2274b@\214?\316\257\215Hy\205\214?\256)\363\003\025]\214?\377q\021\313\245r\214?\005\006U\022\365\\\214?\337\302\340\270\221T\214?\332\021\211mK\027\214?\275\250f\241`p\214?\205k2\006}\271\214?\276B?\203\350q\215?\236\254v\037\020\200\215?\314\304&\222\345\255\215?\204\017 \2418\020\216?G%\235\312gN\216?\321\247*t+r\216?#\331y\324\305\221\216?\353\232\010\234\036t\216?\3421n0\365o\216?\036M\213\200^F\216?\251CA\005\224A\216?\341\206f>\352&\216?\0337\346\211\250\010\216?\312u\302g\305\031\216?\'r\351\341\311C\216?$\270\267y\350]\216?\327\376\364\275\213\231\216?G\360.3F\315\216?\336\013\364\322\022\000\217?\363@H<\367#\217?s-\234\234\210\033\217?/f\256\200\000!\217?\250i\226R7\032\217?\203\0304i]\347\216?`\350\360\224\376\363\216?\243R\\\275\331\322\216?{\317P\365\216\307\216?\376\350\032\264\367\254\216?s\334\034\363\251\177\216?&\353B<\252K\216?\221ls8\372e\216?$\2214\272\256X\216?M\332\361\262h2\216?\211Jb\3129\021\216?\256\366\374\245O\357\215?\336\315\021\001\240\355\215?\354\007\024h\262\252\220?\017\211\352\311\326\334\220?\257\366\3644\007\330\220?\200\022<\021\006\226\220?x\264\234D\267p\220?{\223\237\207\354\031\220?\330.m8,\r\220?\374L-\303\316\000\220?\357\372<\256\\[\225?pRT\332;\323\220?\234|\345\007\317\000\222?\2239J\351\217\354\222?\251\3511\3144Z\223?\265\277 \332\250\375\223?\244p=\n\327\243\224?\001\247:\216f\377\224?r\003\214\316\374\341\224?\347}\232\225\030\304\224?\234n\222Lr\263\224?c\221\267@\250\251\224?\247\313X\360\177\240\224?\250\010\373l\240\235\224?g\251\035Gqc\224?\3736\374\", \224?\351!\"N\212\003\224?\232Bu\340\215\346\223?H\330\311vD\331\223?\2622p\371u\313\223?A\225\327\240\350\347\223?xB\361[[\025\224?5\224\252RR\336\223?+F\036\007\254\274\223?\332\267\322\3543\307\223?\347\013}W\324\305\223?\261\251I\251\261\250\223?\375\331{0\252\276\223?\376\3142!l\314\223?\256/\257\257\267\305\223?\314\006i+\316\317\223?@o\205\013\324\275\223?1\243C\323\036\236\223?N\362t\305\304\232\223?\256\210\377\023\332t\223?\365\207u\311\211\215\223?\324\346o\252\004w\223?9\361B+\021W\223?\263nDv,V\223?^\224R0`R\223?\245\361\246\203>V\223?\373\235\036\302\225?\223?\322IVHpX\223?\256\014\354) \212\223?r<\004-\333\211\223?\365\215M\312[\260\223?\364\372Q\334\n\304\223?OLD\343|\366\223?O\252\':eJ\224?Z\257\347@\026o\224?c&G\275\204c\224?a\306#\327\236p\224?\2400\031\250;8\224?b\3538\317\3573\224?\227\227\202\211\3154\224?\265\034\314L\207S\224?\246\311\374\013SG\224?2\251\270\2515X\224?\250g`5\255L\224?\272d\306\" ;\224?\177\001\374\324*Z\224?\263L.\342\025j\224?TL\255\020\271\215\224?\342\305\270\236\305\253\224?4\204\325\353%\254\224?\232\306@\350\352\330\224?h\253\244\253\372\260\224?\224_\355\305\243\226\224?$^H\316\\\274\224?x\326Rf\241\242\224?\356\214LF\351`\224?,2IK65\224?\r\037\222\3237f\224?n\035\3033\006u\224?\013\006e\207\351\\\224?\271,\010\340\304b\224?\230\013C\201\312:\224?\017B\202\332VP\224?1\356\277\373\316\"\224?X\rM\317w\224\223?\240F\025V\016S\223?\306At\316p\177\223?\353\366\311\271c\235\223?i\327@\227\311\240\223?\250\312\006\270q\242\223?\267\233\277\215\275\254\223?\215~{q\276\345\223?\355G\314\344\202\320\223?\255\214\355\205g\341\223?\324\307\215l\370\'\224?\306\330\270\347\301)\224?\2577\016\025\0236\224?\254\226\256?\r\010\224?\367^|\321\036/\224?U\361\327H8K\224?\235\036\312\006\2108\224?\225\276k+QQ\224?\25761\352{\211\224?\001Q\356F8\220\224?\016\203a\017\331\177\224?\017\246\r\371\372i\224?P\360\301){d\224?I,\003\260\374W\224?\201\360\333\357\324L\224?9/b`\234F\224?\206NI\202\342Z\224?\254\t\317o\213>\224?\350q\020[\027\n\224??k-\265\246\305\223?j\000\256\345G\\\223?p\271Z$v8\223?oY%[\324\\\223?\330\t%O6>\223?\224\273\021\016\244(\223??hpm>4\223?\224L\266\320\201$\223?P4\264\246\036\016\223?\243\030\341l\301\362\222?\026\257\2117\370\343\222?\270\035f\244\350\305\222?\245\227\353Im\235\222?z\253*\013\221\231\222?\230\026*<\276v\222?P \276\334\277c\222?l5\303\304!F\222?T\370\371\020\320T\222?\344\313AY\303\010\223?\301\r\274P|Y\223?\315\r\317\020c\331\223?[\022\242\247\301g\225?%\252\006M\212\020\226?\321\035\277\025[\321\226?cF\311\302\017\202\227?\312\367\0256\306\370\227?\264\223\r\3407\002\230?MObTu6\230?<Y\215\314\363E\230?\253;20\324\\\230?\275\301$PU\205\230?\374m\364\326e\235\230?\273G6W\315s\230?\225\222\275\\\306x\227?e\273E\327\272\021\226?\"%\025D\337\010\225?\232\3568\357F\271\224?\357p1\302\270t\224?\014n\\\340\241\021\224?\341\271>FU \224?;\265\303\367\257\300\224?\241 \3173\230\264\225?E&\030\202\247\206\227?,\006mD\300\271\230?g \304\005\0105\231?\013\330H\361uB\231?\265^*;\237/\231?\214\244\177wb>\231?e\213S\226\351\343\230?\234q\330\20589\230?^\244\205\010\216\204\227?\334ww*\001\255\226?9\227k\234\020\344\225?\372\002\265C\274\250\225?Y\356X\256\257\\\230?%\376`\224+\262\227?\330~\203\r\207Y\227?\315<\034\321\373\316\226?~\367O\266\317\312\226?\355\264G\005\324\357\226?\255Cm\317\267\373\226?:\226\206\0001 \227?\236\367\326\362\220J\227?\274r\203\302\034\024\227??\324\275\033\371&\227?)\221\375Y\027\252\227?v\275\t\305#\337\227?\3453Z\300d\340\227?\003- ^\036\005\230?\241\361\375:[3\230?=\220\006\001C\240\230?\273\247EY\314\303\230?p\004\346wS\367\230?\267\307\n2\215\034\231?\227m\031\003\372c\231?\256\304\275\253~\242\231?~\217\203\335s\n\231?;,Na\027\330\230?\334\2674`\213;\230?IY\027\233|\321\227?\350\251n+F(\227?\215\353\211\365\340\312\226?C\215!\204p\232\226?\023kQ\234,\200\226?\"\016\273\352_d\226?y\323\256\273\331\034\226?\241\226\017\3269\345\225?G\301\310\325\014\314\225?\340hP\377\034\220\225?\254 ,\201\231\221\225?\323\363{V*\214\225?zm6Vb\236\225?\311\025\327+>\233\225?i\"9\207\325\231\225?J{\014!\252\232\225?\343\313\305\221g\224\225?/\334\230\"\351h\225?\244\377R\367\342:\225?\035f\322 \261O\225?:\303\266@\340S\225?\032s\232\257\331d\225?\272\302\365\007N\246\225?Y\363 \223E\307\225?\t\362e\002{\325\225?\274\023r\371\235\223\225?\265\225\265R\252r\225?P@@\342J\202\225?\3648b\346hy\225?H\340\310is\217\225?\202vY\334\027\201\225?z\312\007\220\343\177\225?\2222Dv\'\235\225?\317\036#1%\270\225?\254\350\261[;\271\225?\362\024\0265\310\277\225?\253c\341`y\324\225?IE\371\010P\341\225?\302!:U\325\003\226?:\375\020\203\017\021\226?\326\3513\254Q+\226?\005\347\267\250I\002\226?\004\361\347\377H\035\226?w\251\033l\rL\226?5\337|{\273K\226?Oyb@pA\226?\316Qm\216xT\226?\311\241\241&\312C\226?\010Zr\366}!\226?B\243\241j\347@\226?w(\320H\000\016\226?\207\'\005\'\354\354\225?/\343\321\206\366\303\225?\331\017\232%M\370\225?\244\242\005\366\005\345\225?(\2674Q`\016\226?\235^\311X\344\014\226?\210\240\220\273\r\014\226?\242i\220O\266\353\225?\246\352\344-\323\006\226?\036\210\'\031\013\323\225?\366\032\336S\t\264\225?\245\255\276x\016~\225?fa\013\036\3775\225?\247_\'\227\364g\225?\275&\ta\354\277\225?\277\312\210\250\025\350\225?(i\361n\324&\226?E\213\272vl{\226?\266\244\226\362\311\246\226?\374\213\027@5\264\226?$U{\333\303\223\226?1\302 Xq\204\226?\206\222\335\215\204\004\226?\030s\n\004\227M\226?V\214\256c@\034\226?\267\263\313\221w\t\226?\005\232\322qj\244\225?\321r\025\225Q\210\225?\021\205\311f\244d\225?\213y\273\375p\222\225?\324\236\227,\034x\225?\266\247\225V\004~\225?t\314\273\342\220\252\225?\202\3411C\260\230\225?\231N\263\214I\211\225?=X\2500\024\202\225?\037\341\370\375B_\225?\331\177\220q4c\225?\230k\006\365\203s\225? /l\031\345\243\225?\271\233\211\344\211\362\225?\216h8\356_\034\226?\347\374\213\325#c\226?L\002\2758=d\226?Y\007\005z\350\210\226?\217z\205\216\350a\226?{\331v\332\032\021\226?\3527qD\207X\226?0\363\217Q\255\244\226?\225\030x\254!\212\226?7\320 ^\007i\226?\327Z(1\271e\226?g\320!\207\300E\226?\225z\225\003\335a\226?F\007T\232\365\253\226?\205\262\026\275X\272\226?\363\005\2442\002\200\226?\201[r:\233\036\226?\220\264\254\337r\023\226?K\032\277\312\203\357\225?~\tc\253\316\341\225?\010\206\004p\331?\226?\2337IQ9\266\234?\370\2770TV\267\234?\315\010\033\020\264\021\234?-\377)n?\215\233?\016\217\256\346\301\\\233?\233m4\241\305)\233?\315\205\32625\343\232?\315\230\274\340W\325\232?\001\250\3548\241\267\232?\377\253\000r\321\257\232?e\355.\321\322u\232?\3034\222X\340\230\232?\3633\036:w\232\232?\030\031.\274\334q\232?J\237\213\303\357_\232?\232\254^9\323h\232?\263\266ze\026U\232?j\357\242\233<\346\231?m\030G\335\265!\232?\277\361\367\203hJ\232?@;f\3641\214\232?F|Ht\246;\233?\230\374B\324\354\235\233?(i\003R\220\017\234?6\300\026\005\013q\234?\2023\356\211R\233\234?\351\226ZE8\223\234?\214\n\305\3534\261\234?\020\243s\300\246\265\234?\r\200\2548\271\005\235?\212\374\365h|\357\235?\316W3\254\216\216\236?f\344${!p\236?\331\371[[\250\227\236?7\335\207\303\237\317\236?\255\016y\376\3064\237?u\275\256\013\261\215\237?\352\325\310\372B\322\237?\"\205\250~\202\344\237?\321\3439S\317\037\240?Vz$`\237\371\237?u\265.\230l\372\237?\253!\372\200\003\004\240?C\234cM }\240?\335wN\253\317r\240?!J\341eyc\240?H\317\367\312\361G\240?&.\372\034\265H\240?\320u\310jFH\240?\321\353zb\320\033\240?y\026\340b\025\324\237?\021W;{H\247\237?XlG\374\200\303\236?\343\246\272\013\212\242\236?K4 \371\205\202\236?vV\037\320\0304\236?\357\267n1\334\014\237?qqp\303\321P\237?\0054\256\013\201T\237?\366\314Fr\357\235\237?6c6\240\\U\244?-z\024\237\034\264\243?\237\307\254\007a\250\243?\307\261\206o\207\244\243?\3210\323\373hf\243?S`\202\314.\025\243?\316\271\222\037\034\254\242?\336H\'\262\331\010\242?\3046\363\365\306Z\241?k\212\300\213\320e\240?\021@A\224\365\274\237?f\020p\037\361\337\235?\037\324\311B\tm\234?B\266\226C7m\233?V5\362\215\251:\232?2\355\005\340KS\231?\321y\331\353\347\221\230?eQa7/\370\227?\370\215\005>l\r\230?u\254\"A\220:\230?\321\214,69\276\230?\253\342e\004V9\231?\356\372\007\274\214\225\230?\037\0009\255P\256\227?@\306\021\250TB\227?\320\247e\326\030\225\226?\303\230\006\333\016a\226?\214\252\207\261J\276\225?sfN\246\360\361\224?\201?\224\031\203\017\224?AJB\333\227W\223?\351\312\305\352\037\334\222?\354\334^\031\3568\222?b\223q\226\326\002\222?S\214&)F\034\222?\213\236m\313\006\355\221?\002\202i\263\022<\221?W\204w\306\262\361\220?\354<\0068x\267\220?\003\314&\007\206\210\220?\240\001\tK\273\037\221?GLt\211/\202\222?\014\007hy#\225\223?\035+8\211/}\225?\255\274\216\1779\217\227?k\250\261\272^e\232?<7\266\234 \361\234?\276p\211QG/\237?\274\325ka\263\257\240?\260a\244\034n\265\241?\376$\350v\311\024\242?\342\345\264j\201\204\241?\261\340\244\207\246\216\240?O\257\272,+\357\236?\203X\037\327\322\030\235?-C\000\226\263|\233?\322\177q\321\022)\232?I\236\232\264q\020\231?\277z[7EJ\230?\331\274\031Q\264T\227?\233!\3550:\341\226?A\366\034\206\306{\226?\033V\225\326\017L\226?\312\010\223\325\271\021\226?\355!\031&\336\367\225?p\300\356A\366\344\225?\366\301\246\214\207\020\226?\006J\201:\"5\226?\245]p\371T\275\226?dL\333nk\323\226?\345\322(\277m\357\226?\213\353$\312\372\247\227?~\354h\373\333\216\230?\243\365d\274\265e\231?\313\021\014\311\304\013\232?9:\036\2333\216\232?\303-E\020\354\232\232?/f#\216wr\232?\033\264_\220W\224\232?\001\214\321\264p\313\232?P\371\201\362\021\r\233?q\333\371\251\352\030\233?\261\217y\335U!\233?+#\201H\267\014\233?%AP\037\225#\233?Z\275r\246\3210\233?hd\210J\300;\233?@\\o$\233n\233?\002\002\323\362\316d\233?\362\330\326\034\016\265\233?\021\331\000\2371)\234?) \350\306\306L\234?\005\346\235\032\232x\234?\342\2240\010\351\177\234?\312\364\021\031\322\270\234?\351\345\301\'\347\325\234?\365\372\310\352\254\317\234?\007\353 +\317\356\234?\365Y\366\010[\n\235?L\177\316[w\036\235?GS3\'\014#\235?\350\214\225\211<\370\234?n\326\224\357\017\027\235?e\022\315\272\201-\235?*\363\240\352\241\307\235?\237\032\343N\337\356\235?\275\214\360c\2752\236?3U\036G\355*\236?5\370\315\215\201&\236?/LZ|\000\016\236?\350\335\007\t\031\024\236?\334>\004\205\334m\236?P\265{\221\207\300\236?\377\213Izv\313\236?\375\037K\022\220\236\236?\203NYds\211\236?\323Aa\307\264s\236?\267/\017\265GQ\236?\371u\226\017\367G\236?\325/\t\376Th\236?\263\342\363A\321g\236?\004dn\022\021k\236?\2144&\001\300j\236?\022\310\"\326\255a\236?\020\033\302\267\004n\236?\241\02773\317Q\236?g\247G\234\023P\236?`\361\314\262\304V\236?\020\373\036\244\220,\236?\271\035p\026\\\227\235?\211\202t\014#\030\236?\333K\260\276\325\310\235?\030\355m\n\226\260\235?\005\206\337_\232\250\235?\261\002\007\252\002\222\235?\342P\374ns\220\235?A\3449\312\335\301\235?\254_~\341t\026\236?\201 \304\2762\251\236?R\004\352-\033&\237?*|\033:\364\030\240?\276S\025\333#\"\210?|\300\253\001$|\220?\226\234\272\302 \210\220??\270B%\234\200\220?\275p)\337\032u\220?\265\317jNL\201\220?\245Ge Uh\220?\0247\227\260pq\220?8\205(n\373o\220?n|\360Q\264\257\220?*\225v\276-\305\220?\252\204\255-\312\331\220?\265;g\265\007\364\220?h6%\337\300r\221?3\320\240\224U\200\221?*\264\251C9\224\221?\273\323\235\'\236\263\221?Fd\234\342\030\231\221?\3542\"o\276\263\221?\327\001\022x \345\221?_\327\277\203P\362\221?\022\\\320n9\006\222?X\354\374\311\202\003\222?\266\210\232{W#\222?\233\343e\030: \222?$UK\242\2556\222?\265qW\276M\320\221?\211\241\206\203E\304\221?\241\201\273`.\261\221?Q\333\247_\371^\221?\247\t\316%\304x\221?\275\252\033>\325`\221?\032\030\237 \266\226\221?1`\316\016\346\346\221?\n\016F$\276\236\221?\355l\312@^B\221?[#n\215\211F\221?\326;\002\326\257\026\221?l\003Q\331\253\355\220?\325\317\003n\311\351\220?E\013\022\323l\273\220?e\260=\016\336\262\220?\252\036E\252\343\211\220?\317\325\034A\246\214\220?5\202\200\301\335u\220?\324\302q\210\324\216\220?9\232(\344xu\220?\006\231\246\000\3771\220?\336\177\345\272\211W\220?[\373B\225\210Z\220?C.\371\036|\310\220?n\254k\204\343\321\220?\344s\274<|\035\221?\n\227g\273\310X\221?~0\213\261\225\225\221?@\0038]\031\313\221?)\003\322\301\244?\222?l\017\217\205g\220\222?\364\217\356\202\351\375\222?\ra\360\301OB\223?\225\342\357\206P\177\223?G\023\217\216\"\240\223??\335\217\307K\270\223?2\005\221c\360\322\223?Weo\301\003\027\224?L\306xg\311\360\223?\254@g\261\230\001\224?\224\201\262\022\273\002\224?\202\010\"\237\030\330\223?\035d\001/\r\245\223?\276\037c`\260*\223?\323\3452\rA\020\223?m\201\273\356\330\310\222?\206\250\275\346\'e\222?\032\023X\2745\t\222?\177c\225\363A\246\221?\000\031LY\014r\221?HE\032\0279\004\221?j3X\265\307\262\220?t\361\361\350\312\220\220?y\305\327\307\330C\220?e\256\312\215;\010\220?\364@\250\256#\336\217?\346\276\300\237&\242\217?x\002\0015,{\217?E0\231 \246!\217?\017Y\036P\250:\217?[\010m\227\010\344\216?d\364\200\322\200\334\216?\310\312g-\220\226\216?#\373\302Y\201\211\216?\260\220&\317\326p\216?Z\321\341\177\375\240\216?\370&\324s\325\263\215?\306]R\357\210\216\215?\334?\351 \2741\215?\225\214\243?\"\020\215?\203\322\037\263\026\023\215?9\241\221\201\234-\215?*& :\305)\215?\203jS\332\272R\215?T\364>\220\347\363\214?\350\212E\030\256*\215?\356\237\021\346\"0\215?Z\0140\2119\\\215?(o\277\3752x\215?\262x\354\2221q\215?\006Z\245\347\"-\215?\004M\273\000J/\215?1)\"\351\361\200\214?\001\212\037\320\212\211\214?R\357\375\233\204\303\214?\277\366HZ\\\251\214?}\035\357\220\215\000\215?\265\013k\002\303\364\214?&fS4*\376\214?\002\261SI\360\310\214?U\243\357\037\037\265\214?\177\260\276G\036\004\214?\273~\342|\301\331\213?DoL\252\021U\213?6\205\223\t\377\357\212?7\365\271\216\374\267\212?L\346\241\264\014x\212?\217H\343i\\\254\212?\234\362\377\342\315\245\212?EJ_z\216\327\212?a\250\005\'\211\302\212?\265\224\214\231\315\256\212?VA\370\217\006i\212?\366N\341\025|+\212?\320\032?1\013\035\212?\257\304\006\2025\013\212?e\260\264\034\200\276\211?\000\265-\327\226\222\211?\031tQ\023\316\205\211?\213\352=-\360)\211?\010w\023\356(\335\210?\036\232\366\360\014\352\210?\376:\n\354>\273\210?\341\222\203\334\274\246\210?\363\367Z\351\030\004\210?\006\220\300p\305\375\207?\347X\343\016\311\000\210?\311\263|qj\346\207?\257\342\214\025\300\212\207?o\321\243\213Hr\207?\353\024\372L54\207?d(;\276<\353\206?\302\r\276Q\247\023\207?|\006\007\215\366\376\206?\244\214\336\307\326\325\206?\201\200\376@\216\355\206?\356\027t\301g\213\206?6z:\371\"\021\206?\037\373\332\254Z\317\205?\037\375n;\346\234\205?\303\365\324\\\001\224\205?\037\364\215df\321\205?7\236IG\253\355\205?\005\377\305\255.\031\206?%\2500\242,\375\205?-\030\227\3254\"\206?\274B\354:\2767\206?\375~\006\333U6\206?!\234Le\034\346\205?\316p\214/\235\200\205?\222\024\366\214\373\221\205?\336\325\013;\025;\205?fe\313W\241\377\204?5t\225\351\365\371\204?\273\036$\302\301\t\205?\222\262\274\340\020\000\205?\364_\265l\214!\205?\310\264;F\247\036\205?{\246\374C\261\027\205?\372j?\000F#\205?\334!\370\361-2\205?\2564w\224M0\205?\023t\021e\303(\205?\335\344Wv8\357\204?\317\357T\360v\345\204?R\364\222\217u\"\205?;\247\010Y\336\241\205?\334\020\302\'\306\307\205?\261\034|\274\353\307\205?n\032\006\354\235\343\205?\314\310\322\347\240\324\205?\357I\222\255O\265\205?\332\200\nr\020\247\205?Z\026\370\374\303\245\205?\350\267\ru\350\214\205?\260\007\017\252?\210\205?\022=\337\005\000}\205?\233kJ\022\201s\205?F}*X\367P\205?\023\262c\213\363#\205?GW\n\375#>\205?\211\237\326\237\212<\205?\353w\376@\373\211\205?\351\363|\306\270\364\205?\270\205j\'\243\372\205?M\205\311k]\036\206?\315^\237\001A\365\205?\354\360\344\216\217\372\205?\203\247\327\000\201\333\206?\367\270\251`\330\212\207?|\030\001\345T\n\210?K\277YW\300\225\210?f!]\023\242\341\210?\365\027\366\213D.\211?0\365\303m\014\270\211?:U\332\274S\374\211?{\016\001\307kL\212?1\002\341E\212\301\212?\025n;e\034\300\212?f\334*A\254\"\213?&F\217\022\315\231\213?\204\221so9\357\213?a#2t8/\214?q\017\334]tm\214?q\233\t\203\273~\214?b$\305\021\265~\214?1\322\273\023\024\210\214?\005\000\224\255\230\213\214?\364\002\3442\013@\215?\334a\227\321]L\212?\"\315\t\356\310\327\210?5Ji\306:\006\210?\033I\020\033\035q\207?\354\244+\311\033\017\207?&\246\'\006*\336\206?\224\351\334\\\030\303\206?\275\005\177\260m\000\207?\266\337#`I\371\206?\376\371\256\357`\027\207?;\327\377Ri8\207?1d\320dZ\366\207?\327\247\247\205N\254\210?]\253\271\263\341v\211?\254\177\332\037]\251\211?1\240Q\231\346F\212?\336Z\005\265\010Z\213?\372sle\013\006\214?=\010/1\376\314\214?\002\003\340V|n\215?\256\335\236i\207\224\216?x\274$)D\033\217?Y\025\0025\214\355\217?\315`\373\345mN\220?K\000;\215m\177\220?=tj\374\374\326\220?\302\231\353v\356$\221?`\241\251\263g\212\221?\003S\354\271c\351\221?\267\360.\252To\222?\346\337\316\210I\355\222?v\000\371O\215P\223?<X\374/\242\260\223?\210\2327:&\014\224?\000Ze9\030\320\224?I-i\314\361\370\224?\234lYwY7\225?\266\275k=4\r\225?\245S\003?=\305\224?\252e\226\375\355\304\224?\220\370\236\\\026\275\224?}\304J-\335\"\225?Ja\212\344\276\344\225?@P\035\224\370(\226?\267X8\346\310\014\226?\355\274\222\206H\275\225?\035\220\022(S\346\225?\317tNjj\004\225?w7\276\022\"\302\224?\220[\2674\303\265\224?\207\333\336\304I\307\224?d\344\367\371\231\301\224?\336\230\376\"\361\275\224?\373-\365\204\t\311\224?^fk\214\274\375\224?\020>_v\371\035\225?Mx\206\314<\211\225?Ey\276\035\343\265\225?\200\034b\366\221\337\225?\224\346u\025i\032\226?\212q\352B-\177\226?A\332\212\363\363\203\227?G\322@\274F|\231?\214\022\\\373\356\225\232?\273\304\337\226\222\\\233?}\261n\361-\002\234?w\027\203\342\"R\234?.\301`9m\206\234?\020\270\205\031\340\243\234?\322\271\306Z\210}\234?\306w{s,\255\234?Z\013\237\354\347\306\234?\t\242\303\2033\346\234?\210\231\020\202t\002\235?\014:\226\201Gw\235?T\220NF]\267\235?\241\360\033W\n\036\236?L\233\375\303\216\255\236?\024\022\037\216dE\237?\215u~E\017`\237?\313\311\361.\n\307\237?\023\313+\254[\n\240?\305g\205\376\026X\240?b\203\260\023\221s\240?j\004HXG\232\240?\305H\352\225\226\267\240?\375JO\247(\326\240?\354\035\207$\'\321\240?3\304\341g\204\000\241?\262q\222 ;\363\240?Hs\277\236\n\023\241?\333\010c\302jW\241?\000\177\354\206Q6\241?|\244+R\rm\241?-\270\233\267\034u\241?=\356\344\236q\213\241?\335\027\327\305[Q\241? \347\005\361\344G\241? \2314dA\003\241?Rr0\226G\t\241?\3422*M\243\371\240?\314Z\257\216\210\316\240?\356\303\213\317\256\214\240??&\010\r\263\206\240?\371S\"\n\337[\240?\234\026pZ\3460\240?\247\2474\007\255,\240?\001\313h\351\254D\240?\2432w\215\223K\240?\r\234\345\022Df\240?\017\355\233\257\035\202\240?\342\364w\264FD\240?\tfz\371\005\n\240?\250\206\325\326\212a\237?a\246\227_\240\200\236?\371\326\330<F-\234?\337y\337\201\314\221\233?\236\345N\360\032\342\232?\370\254)\230J\242\231?\330\350\365W*\320\230?\216\326\237du\"\230?\336\274\352ae\275\227?\353\215\2416\206\r\230?|\226\255\026T+\230?\006C\302\234E\224\227?\364\251\356\207[\342\231?\353\267j/\206\230\231?O&\231\225 5\231?\004F\333T\204k\231?\315t\313\350)m\231?\201X6sHj\231?\0133I9Sy\231?,\347\212\006\264j\231?Z`%\245\364\332\231?\0311I\353\303\010\232?h\n\322\311\250\353\230?\372\3726\321\242\317\227?\000\247\354\376\365-\226?Y3\300ru\341\224?\334\272\3475\200\373\223?\303_\211\303vP\223?IW\317\2326\033\223?\006\234\342\307Q\346\222?\325jY\010\274\335\222?\277\351\315\020\335\237\222?\236\241ZrL~\222?\241\201\007\357s\310\222?\013D8./5\224?(!-\325\322\312\225?\033\274\005\313>\263\227?\003/+\373K\336\230?J*\021\260o\212\231?!\274\207\225\033V\232?\376\004\274q\367\336\232?.\302\247H\244\276\233?*.\226;\226\353\233?\214\240\236/\327Q\234?\314V\214*+\234\234?(\000\243$T\013\235?\347\030[\313\0168\235?d\003\223b\032b\235?c\021?\326\276F\235?\003-\004\t\357J\235?\361r\265n\263\023\236?\300$\0148\210,\237?]\030\370p\032\271\236?\303\267\212\247\031\260\236?\350\177\325k\\\372\235?{\326\247\257\366\226\235?B\226\337K\334\210\235?\010d\206\370M\202\235?\341\315\255\037\201\220\235?\322\316\267\245\330H\235?\342\236L{\001\370\234?S\220\232\324\242\316\234?\240)v_\216Q\234?\213i\270^Y\275\233?\322\211\360n\346\t\234?!\n\347\314\326\367\234?\233Gr\267\363\026\236?\267\3148\371l\236\236?%\244\r>\317\312\236?#\0279\227$\307\236?|\377w(0\273\236?|\225\022\010\217\304\236?\352/\211\355\315\363\236?\267\363(U\325\335\236?J\370\217\231\314\367\236?~\327\303>\321\332\236?l\253.\347\037k\236?A\375\3741\214?\234?R\224b\177\215\257\233?\363\262\261\010\2019\233?\030\274\340\272\377\033\233?\311\235\227_\r\035\233?\260r\271\330\354\374\232?\0262\277\351I\330\232?\3115\204\261%\256\232?Gu\370s#\217\232?\320\320Q\244\201s\232?S\232-V]R\232?4p^\241\261$\232?\203bE\274^b\232?I=\205\010\252\331\232?\271c^\005\000\340\233?\243\211\r\234\207\241\234?[x)8f \235?4\336(B\202\223\235?9\272\034?\3546\236?\371\276 8\032\377\235?\n\324N\014JJ\236?\201r\302!\247\361\235?\322\207\003(\023\245\235?2\177\214\206zd\235?\353\360\354\377\327\021\235?7\367d\271\375\326\234?\270p\237\243\365\272\234?\2020\231%_\333\233?\311\341\005\244\014;\233?\267]u\330\325\310\232?-\276\020\2163/\234?\262M\246\341\306\363\234?\024V\232\374e\343\234?\202\215\244\nj\353\232?\242m\312O\211o\231?\324\313\321\336>}\230?\231\217\307\263\233~\230?\354\234\202\326\245A\231?\016\236q0\207\034\232?)J\247MS\006\233?.S\240\n\020\351\233?\272\263\322K\\,\234?\270~\314\227\257|\234?>\333Y\252\301\352\234?\216\340\327,\275T\235?\370\n\216oH\323\235?`\313\351\272\t!\236?\250\277f\322\t\025\236?\000\216.P\001\031\236?\230\320\"\260y\"\236?\366/ \346X\377\235?\017\224\302Y\235\336\235?\212,Ab\225\264\235?s\347\345WCG\236?\352\035\314\370\207\305\235?\335\206\261\202hx\234?Z\2627\354O\306\232?\300\272C\355+\315\231?B\036W\251\364\241\230?7\264\376\037\362Y\230?4q\352\204IQ\230?\215}a\343\016\\\230?\014\205[\200\256d\230?k!\276\317\225a\230?%c\025l\254\217\230?z\371Bm\300\214\230?\345R\t\r\314#\230?\"\027F\301&G\232?\232\203\3562\306\376\235?]X\241\302\275\244\236?\004ns\351\263\221\236?T\033\016\336f\020\236?;(\177\374G\324\235?\323[M\350?\265\235?%\240\020\241\024$\235?\254\"\021W$\337\234?\371\355\201\334\231\227\234?F\337\356\366j\221\234?[\341\017\237qj\234?\rOu\351\333Y\234?@\026\264&\2341\234?>\215\372r\006I\234?\365\264\000\303\253\022\234?\375\331\023M5\355\233?O\263zf\315\270\206?\035\356\365~;:\216?n\322\033\213\371\373\211?/\346\271N\273I\210?\353\3046\300\004\"\207?11\332\006\225\210\205?ma\246\205|\344\203?\377\331\357\206\275\033\202?\363f\375\373\306\266\200?\003@\0257n1\177?\221\"\3229\266\323{?\361s\215\340\220Wy?\307\347Z#\236\306w?\373\322\364<,\222v?\243\242\347\237\253pu?4a\342,x\023t?\371\325\354\346\201Fs?\372\315\340\311P\020r?\017\246\264@\263\322q? \217\343\376X\305q?4 \243\205\311)q?\335\322\266\326!{p?\376\017\001\236\354\032p?\203?\032SRUp?1\253=\r\224\353p?\362\326\177\361\232\304q?^\031\223\177\337\037t?\002\323\275\334\224\343w?\224\275\347\270\001<}?\031\377\362T}j\201?o\370\320J\311\216\203?`\206\001v.\277\205?+\277S\233\024\363\207?\361\205\267q\005\300\212?\226Pn\231\333\326\215?\242\316e5 \354\217?\304\366\024\262S\251\220?\031\243\025\342\010\207\221?U\tw\260\303m\222?\227\371\256\013\266F\223?\330\027,|Mt\223?\330\317oS\224/\224?H\010\371\032.\344\224?\274u\364{?\216\224?[d\313\212\222\244\224?\360k;\2457g\224?\312R\377\341-\336\223?;Lp\364u<\223?\306\0104\032\361K\222?\030]\350\216!\247\221?k\330\207\246\000\331\220?U^]\333\374;\220?\246z\244T\321>\217?uM*\025\262\305\216?1\202\211\351\211\201\216?r\256G2\302\023\216?O`\334;\332\240\215?\321\025\375\205D\370\214?\214\342\013I\034h\214?\261\25338\366^\213?I{\254\256}\340\212?~\031\250f\270\374\211?\017\246\005\210\262R\211?\260\2622\361y\213\210?\316d\322\273\205i\210?\261\312\020\275HE\210?\233\017\315\0219J\210?\311\204y>\354M\210?]\022\033\267\216-\210?k\321\036\t\335 \210?sD\373\256\301(\210?r\306\213\340\332\344\207?\024\335\260\366B\304\207?\221(=\236Y\274\207?\026B_^\246D\207?n\366\334I\021\007\207?\235\200B\027\266a\206?=\264\314x\024\024\206?(\226\315\257\365+\206?\021\016\261R%\360\205?K)Hi\277\200\205?z9\2400\036a\205?\302\t\376\027\005J\205?Q\360\271\2702M\205?u\013\3554\203\014\205?l\034\005\026-1\204?\233}\377\225~\212\203?\034\260{\220=\371\202?\364.\331\326!\307\202?\036\267 \332\025\232\202?A\250\324\352\200+\202?xm\256\033h\236\201?\252\333\234\364\005\307\201?\327\346\224\272C\016\202?\001|s\\\346\244\202?f\217\260\245\320D\203?\027x=\20408\204?\301\371t?\036/\205?D\031\216\r\373B\206?%\246U>\025\201\207?\360\024\216\372\315\277\207?=[\337>\255\315\207?\262\327I\352\365\010\210?k\376\007t\000\246\207?\377\022\310W\310}\207?\250\341\024\203\253/\207?U\3758\004\010\313\206?*\222Q\223Pb\206?\r\346\235\255\375I\206?\0271G\352\230N\206?\262YNr\"\"\206?Gr\\:\244 \205?O\240s\252\301\243\205?\002\244u\325\265V\205?\3675o\365\314-\205?\320Q\266d/\275\204?%\000\0261\240\242\204?\200\344\323\354Ld\204?h\3536a(K\204?\224\021O*\245]\204?\372\331\315.\r3\204?\354\352X\034\003\357\202?\373=\024yPX\203?\347\325\214N\216\351\202?fOj~\350\301\202?\312\266\350q\323\367\202?\006[\364g\242|\203?L\324G\352\201\262\204?\307\254\273\322b\213\205?eziZ\307\220\206?I\204lw\024\211\207?&[%\244\252\023\210?\267t\305\277\341\233\210?\211 \205\355R\343\210?\224\222\343#i\004\211?\253\003\324_\245>\211?az(\365X?\211?0\223\004\210R\340\210?\021\340\006\022\232x\211?PE\277\360)\204\212?\013\005\360?\307\201\212?\346\205\035\301\353\005\213?\205\032\256\243\344\264\213?\034D;\014\205\206\214?\277\214n,Da\215?\331\3127\032A\334\215?\221\003\021\n\223\247\215?\034\323\343\\b\343\214?\303\206#\037&\247\213?F\310\236\017_\276\212?\277\260Zk\270`\212?+\233\336jB\377\211?\007y\177\264\346d\211?\0063\316([\371\210?\202.\264O\324\215\210?Yo\336|F\311\207?\3023\217f\246`\207?t\336\272\363\250\036\207?\211\355\271\017\352i\206?\267\241\241\000\003\241\206?\207|e\030Vu\207?\256\254\215\341Lt\207?u\034\031\215w\245\207?~=xP\375A\210?\\\022o\266\034\\\210?b\2373{61\210?\236\350\367S\234\320\207?\312]\303\215\r=\207?\242\037\2554\240\023\207?\363\333\022\344`i\206?\343\351\324\026P\010\206?\322\357\346\234\344\266\205?\325\341%\216\365:\205?\026\231X\227U\003\205?\2479?\346\177\311\204?\013&E\376u{\204?G\002.D^A\204?\253\263\200\'2\025\204?\033o\014\260x\262\203?\307\001\361Cp\037\203?\332\251\257j\355\326\202?Q\306t\370\326M\202?lW\372f!U\202?\217\210\037\037\321]\202?\335&\273\035\n4\202?\264\360\"7\266\343\201?py\247`_{\202?+\342\365\022\303\013\203?\330\202\004\343\345\213\203?M\301\226./\206\203?p\005\344\260\323\306\203?,9\347\332)\263\203?\215\r\r&&\361\203?\336\362m\316|_\204?!d\201\370\276\215\204?\356\224\302G\272\"\205?\036]\344\037/\004\206?\211\3646\221\364\304\206?\312Xe\215\027^\207?b\310\177\273\313\311\210?\336\313\236\200\375B\211?/\341\235j\227\260\212?YK\246\257\214\262\213?E\020\226\232\005&\214?7\2109\265\361/\213?#\355\201\201\340$\213?\3020\220\002l\211\212?\366\324u\2364\261\211?\250\375\200N\333\233\210?\320\036\251j\364\375\207?s\241H\260\236~\207?\260+\252\241\264\007\207?\224W\344`\001\017\206?\3111\250\"T*\206?\217a\307\337\363L\206?\334\353\341!E\312\206?PD\376\032\302\221\205?\245\320\024bw\177\205?WV`\351\370?\206?\204#\234\244f\000\205?A\240\361L\201/\205?\370\260[\'\325\016\204?\352(-z\254\273\203?\205\273\302\241\010\300\203?\213\361\200\003qV\204?\234\376\022\017-T\204?z]u\323\034\017\204?g\035-\205B/\204?\272\256\312K\0376\204?-\264\250\214\325\237r?\310\207\"\242m<u?\311\347JA\r\230u?{\203*\223\354\241u?\373h\006+-\247u?\242\034~\227O\337u?g\346\343\211\t2v?\215\313\317E\3677v?*>\253\275i\251u?\355q\232\226<\304u?|\206\366\005\202mu?i?\267olxu?\212f\301kg\375u?\266\003\374\272\326Uv?\000\237\030\214#lv?\220xL\271\317\345v?\344T\373\014Y\361v?\013\250\242>\352+w?N\346\001\'92w?\351\263\311\002\2427w? s=\210\237*w?;\035\334^Q\230w?\007\212\374S\332}w?\243\006J?\036Pw?^\362[N\3531w?\311\202\255\005\002\014w?\300\262\242k\376\026w?KDX\212m\035w?\212\362(<8=w?&%\356\305\330\210v?\032\307\025\005d)v?x\022\365\250\026\026v?R\233\306c\367\376u?V0/b\3158u?n3@b\356lu?\0044\327\212\262\216u?e^\247\216\336;u?\0024\313\027\024\003u?W\256Exl\345t?\307\215]\315\372\307t?\310\317\210\312m\230t?E\265\014a\312\372t?\277\0354\375\n\200v?5\020\337J\365\353v?\274\300\204\210\326\265v?*\327K\273\347\254v?\213\253lM*\202v?[\"\003\270\332<v?f_\024e\270\377u?\215`\336A\276\024v?\022\201\374\002\000\033v?\261\374\245\267\322zv?\326V\2300-\371v?\030fH\345\213\225w?\364O\003\025t\314x?\210\0206\300\365\366y?d>\227\336;\300|?W\273\201]\250W}?\365P\243\334\362\233~?@\271\354^\216!\177?\331H\264\022*\240\177?\005\373|\202.[\177?\254\321\243\220\001,\200?\227J&DL\313\200?y\327i<\302}\201?\017\316\223\252n\247\201?\367\346A\276\247\031\202?$\305\305&9M\331?\363Kd\351\272%\202?\222\" \311&\345\330?\321$\232\010g,\200?%\230\365X\266S\330?Vj\373\371\344\230|?,\355#\243B\366{?\016\217q\203\251\177{?\202\205\214z\232){?\376\226Y\264\233Au?R[> =6s?\317\236\306\033k\017s?\251\323\366\271\036\250r?C\274\212\2318Jr?]\\\001\2123\264q?\335\213XY\025\300p?\263\034\312K\\\231p?M\264\350\363\nqp?\245\330\t\3432dp?\356<\313\325\212\224p?6\264\250\0379qp?Uu\357\336\332Tp?\330\255^x7\254o? Y\036vo\335n?j\267\225\022\rHn?h\272\377\021K\237m?\035\244\320GS\034k?H\211N\260\256\363g?\212\370\000=\n`e?\272\252m<8\325c?\261\377\237bS\351b?D+P\273\372\331a?\274\234\310\202x\023b?T\020\374\242\026\340a?\r\322\216F\376\223a?\234.\005P\376\201a?o\350\337\216m\242a?T\223\3578\226\216a?\210\370\335-\366\202b?\321\227\350p\320\005e?\233\236\0228[>g?\245\021\306^\016\014g?\330\013Yk\225Qf?\271\017\212\367-\204f?\346\023\216-\277dg?N\036\017\260h\320f?\342A\270\244\230\363d?\265<\363\230\237 c?\367sL\016\206\327a?\206\303\201y\220\352`?\0274%@\352\002`?\031\361\232\340f\264_?W\017D\210\276\312`?p\020\354y\260%a?\026R%\232\245<a?r\031\244\321\376\266`?\353\271\037\314\372\210`?W\306\027\321\234\023`?L\241\n\2670\226_?\371j+\034_\200_?2\315\237/\360\356^?.>\024\353\245@^?\026\233\313\027\370\255]?\322\350\016bg\n]?\272\020\227[\333\215^?\214\365\267K\265+a?`\324\353\237r\017c?\363\225)\256v\211d?\"F\363\363\353\366e?\021\255\342{\351gf?\354\357\014\035\262\266f?\326\000\245\241F!i?#(5\266\002\003k?\266\017j\240\250Ul?\020\n\223\247\201&o?\013j\377\320\272\260o?q\025\303\211s\312o?\336\340\'\350\330<l?\266o7\206\325_l?\030\365\3605i\362k?0\261\357F\303\202k?:V\037\313_zk?j\n\004\004\352\002k?I\2127N\344+l?\240yfmF\022l?\206\312;^\263\"k?}\222\262z\304>j?\255@\246\025\334\230i?\016=\'\222\357\037i?\352-\305%,\311h?PN\216\344\355fh?\231y\177w\203Lh?\376.U1\341\014h?2{%\005 2h?\232: \355\245Gh?\354UxX\'\265g?\347\235$\014\354\371f?\345\202\366\224\343\350f?\333>\225\347\202yf?+\"(V\304\353e?[\022\344\303\223\255c?n\245\014Y3\353b?\324\310?\0273\340a?\355\030\342N\245C`?\017A\216\023JR^?\234\260\305\272-\233]?\241\336\325pf\373]?\034\002\274\017\204\207`?\374\031*;\007\023b?A\234\335\023Q7c?U\203^\357f\\d?\370\377\307\302=\272d?\2472\314\326\350?e??3\305r\004\326e?\321\335H\265\\\361e?\333\221z\347\001@f?\032e:\312z\227f?\361\375\257h\252\217f?\372=\211\206\307\251f?\251\0035\2115\355f?\350\365CF\351\315f?o\010\312wm\222f?\"\235\271;\366\251f?\2667\215\'a*f?Db\333\322\005\035f?\204D\2168Z\221e?\243-\216\232\024\276e?\267\"\243\226\365\201e?\353r@\316\330\360d?\332>\201\003\234\326d?\005w`3\322\350d?;|\324\212/\re?\023\006V\357\037\364d?\001\216V\030\317^e?\317\340\262\264\232He?\036\354\0108h\325e?\237\236\014\310=\341e?\346\303eu\250/f?p\'\317\304\215\276f?\310\0338\036n\262f?\270Dz\306\310\326f?\344\202E\333\267\256f?\271\026\201?i\231f?\374\3575\302\252\223f?.\214i\260\355\020f?\252\361jj\355>f?\343\375\331\013\334\354e?\315\365\234E\006\361e?f\350\242\230\361\363e?\361\205\323\3064ze?\376&50\3113e?\335\257`\355\270yd?\272\251\273\221\375\034d?\234\363\363\251\332\243d?v\004\366\354G\367d?BY\031\tD\272e?\226>-l\361\034f?]\\\340{J\221f?;\275\004\007\261\274f?\312OzD$\301f?]$}\362a\ng?\316(\332xW\rg?\374\306#-\237)g?\315V\323\377\266Jg?\231\307 \313\0204g?\232=\3354\016\331f?\206\021\033\\\325\272f?2 *v\374cf?d\357A\337Hff?\374Qg\375L\016f?\341\207\030\351$\337e?`\375o\212f\034e?\2021\377AT|d?\307\307.\036\314\220d?\265\214\033Q\266Ud?0\002o\360\241\036d?\001\311\331\023\333\337d?\367\207\235\221W\323d?\361\304-\230X\026e?\000\212\323AEre?\335t;c\256\370e?\204\274e!\026>f?I\240\221m\270Ff?\016D\247\313\210)f?\307|\262\365\033\014f?\216\020\305\264\324\031f?\370nD\016I\341e?\230Q\374}\236\275e?\013\325\315\305\337\366d?\307\230\327\353\277\311d?\344\205\251j\330\250d?rx\212\032!Cd?\316C\221\341\275\022d?4\n\315\236\231\232c?\001\221\t\356\303\036c?\225\303ps\377\230c?Y\030x\247h\320c?t|\2648c\230c?\201PN\034\217\005d?s\313o\032\240\td?\257cJ\216\265kd?\"\326\277D\354\256d?\311\373\010a\r\316b?Y\366\221LhAa?\214)-c\020Ff?\021\320=\036\014\322b?\224>h\316\336?d?\3516KC9Cd?\326C\001\311\336\314d?\201\017\351\255=\220e?\2157\314\254\262\252f?e\316\223hR\325g?\211\320\027a\333\271h?f\000\320\252\224si?ns5B\327oj?\221D>\316\205\250j?\301\324\231\362V\232j?\037\032>k|\373j?\206\216\374E\371\027k?\266\001|\0202+l?\351I\304T-\373k?9S\266\202\205\027m?\333\017\217\374u2n?\013W\310\333\230>n?u+\261V\340pn?\346\212\241\210\204pn?\024AH\210\205in?\024\242\026_\301\361m?\261\000s\033w\304m?%\005\300\277\333\230k?Hb\271\r\271\005j?\251\214\337\021\236\233i?\255\214\350\314\255xi?\223\335\307/\216Zi?\0064\t\305\363\245i?&\207\236\200e&j?G\336b\023\323dj?~\237\232`r\202j?\273<\245\234\222 j?\352\306\nj7{i?\346\214\334^\310\246i?\214\242-\005\251\266i?\004[\263\0024+j?F\315\250\020\307nj?\267\325\327\263\032$j?1r\206Jr\254j?%;\272:\225Fk?\256\310;\311N&k?\365\333\273,D\214i?\340\220\333iJ6g?\345\323r\2063\326f?\312\237D\2139\366f?\007\372v\330etg?H\024\234\362\317\251g?\260\341\177\261\022\201g?lK;:P\325d?\347\252A\344i\003d?\316\251\355\361\005\327c?\364w.\ru\270c?\343\237\271Q\333\273c?\365\322w+\tXd?\020\305\211T\275\241e?\253\314\333\253k\301f?\273\200%\304M\'h?sV\353\224\254bh?\363$\036\215\231\375g?\300\307\230o\010Kh?_\226vj.7h?\354u\203O\020\310g?\276\020\005B\321\215g?\305\254\306\3739Qg?\216\236\232L\216\233g?+_2\266Y\272g?\264\003\263\344\037\355g?\227\236]|\331\217g?UZ\303h\375\375g?\227\354\276\264\277\353g?7\235\377\177\345\006h?\2304*\226y\260g?Y\236e\350h\355g?0\332\343\205txh?\230\231\350\337m_i?\316\004o\272\370\352i?\353\305\ty(\375i?\004\320\0333\370\027k?s\307\356DA\327k?3w{\260\217\305k?%\325\300T\010\353l?\226\244\213}d\233m?<\246\002\257\025\273m?\'\241\345Zc\271m?\354=lTmXo?;]\246\276\335\246p?\222\215\002\2422\216q?!,\017D\251\314s?<v\236\030\\\352u?J\210@\225\235\365v?\314\020\321,,_w?\355\350\226U\214~z?}\026t\020\256_|?\304[\330\264\001\301|?q:\231\035\201\366}?\324\331\335\304\017\034\177?C\032f\177\330\206}?\232M\323\251#.}?\323w0\302\021-|?\024\320\237\221cF{?\2676WD\202\346y?e\031\323-\352|x?8\324\001\246\222Uw?$\304\3024\377\364v?i\255+\020\204\376v?\2747[\200\203\344w?m\206\375\231\237\355y?w\325\214\327\177G{?\367\246\361$L\305|?\372\023\256\252\0136}?\220\302q\360\267\003~?\207\242\250\202=e~?w6\334.\321\254~?\210M\260tH\256~?\022I\357y\320|~?,i\227\377(\233~?%O\013\276fB~?\362\222\026fU\017~?a\000\360n\266\320}?eD75\257n}?\372\360,AF@}?\357\363\342;f\335}?\322\003\354\221p\233}?\274\3011zW\005~?\201F\363D3\366}?\312C\360\t#\007~?\375\223\0263djz?\275\227\237tR\372z?\241)\357n[\027{?\210\346 9\260T{?\236\360&\200\341\343{?\022\000[\3379\364{?\020\250;\245< |?\375\362\224\230\021%|?p\224\267\201\r\030|?\235\017 Zc\204{?P\354\316\3763\217{?\240\333A\250/\244{?^\3034U\365\307{?W\004\222\277\232T{?3\303\263\365\355\323z?3 \006\260\204\222z?u@m\257`vz?\267\013\334\240G\243z?&\231\024\240\037\246z?.{\351XkI{?\241\222\306\2529\'{?\226c\373\216\2661{?\332\013\353\027\003#{?\234yN\207\t\373z?\311c.\362\260%{?\203\207W\374 w{?R\\P=\244\250{?\234iZ\023\037`|?\027;G\010\202\014|?(\267_\321\274\002r?\1775]\010\237\321q?M\202\317\300\334\257q?^\334/g\002\272q?\270p\203N\306\000r?g-\310@\3452r?\214Q\273\205\314\232r?\343P\236\375q\220r?\266\364\332\377\017\226r?\022\245\016\t\027\246r?\202\365WF%\240r?\032\004\220\271\266\340r?,\0076\213p\303r?\332rO\323>\210r?\311\347)3$ur?\033I,pL+r?P\n\263\003\300\016r?\032Gh\250\252\000r?\036)*4s\365q?D\274\214\232c\004r?f{\307\005t\032r?\370\211E\004\312Cr?\255Xa\322\226ur?\302\200S\217\234\233r?\201\327_]\262}r?\031\017\257\036\t\221r?\245*\257\215_\025s?\337x\370\344\301\023s?ri*\373\026\354r?\217\363i\333Q\030s?\344\221\306\010\253(s?(\266a\230<3s?r\256z#g\037s?_\223\034M\201\016s?\352\227lb\237\005s?\014\335k\217~\376r?\032\243\274)\301\357r?L\351p\3370\362n?\334=\321Y\214\330l?l$\343\372r\304l?\200\336\303A\034\315l?\'\347\211\274\354\244l?\342\013\017q\336\305l?\033\271\035\003z-m?^C\304[T|m?\263\003DG\306\370m?PP4V5\035n?wc\266n\307\367l?{\274\2379<\233m?\334l(\214\230\237l? La\020\036\216j?\270*+{\202,j?7W\026J\373&j?\203%c$\227\331i?IqD\255\037Qg?=\017\232\317L?g?89\014~\314\033h?\237T\240\273\311\024h?lt\"O\377Jh?\033\026@\204\372\216h?+\356\276\261\007]i?^D\246?\245\221i?\273\377\251g*\214i? 7\306\305\206\253i?\247\264\342A\321Ai?\274\267\352\206\342\230i?ry/\233Y{j?y\2277\371\300\235j?\210Z\264\257%\254i?*r\275\252\t[i?\343\031\205;O\360h?&/\310\034\037\273h?Mj\276\003i\352h?L^\341\200=\366h?\204=\004\215M\266g?\367rXGy\331k?\336>\333\005\2533l?\363B\232\256\260\253l?\230+\370w\372dl?\320%Ok0\223l?<\007x\315\t\254l?\010>\364G\222\314l?\201Q\271\361=\017m?\233\003\365G\307\276l?\363\017b4\031\370k?H0\240\332\212Dk?I\234\231\211\267\010k?\260\374x6K\314j?\261\306\314J\002\360i?Z\211A\254s\026j?%\354C-\271\311i?0\350\214A\212\256i?\303=nv\246\373i?\312B\016&\322\361i?\320\3200\226\230Pi?A\241J?tPh?/\337vx:\035i?\010\325JD\237_i?\246\033\242\266\177\370h?4\024\315\274\202Xi?\037\336\357\'\225\266i?\241\t\325LE\312i?\347\200\\\226:\276i?\231_\034HV\377i?\350r\302\005R\302i?Es\021\235m\207i?c\r\264\216\354Bj?\r\214\361\236Y\313j?\351\20374\375\303j?\344\356\t\230\024\255i?\260\351\355A\233+i?\367M\234\007p\255h?\340UXn>\265g?\273\306,P\222{h?\202=\261D#|h?F\001z\230\370\316h?\326Z\206\242\272ei?wHs\\tOj??h6\302\264\005j?\2336gm\350\240j?\002\014\376\220\024\027k?\031\327\365\224g!k?\300\177\232*}\300j?Acm&\273\246k?\271\377tuZ\306l?|\307\n-\324bl?\336\326i\346\301\304l?\321\251\257\327\211\005m?]\356p\224\354sm?\375\364\024C\266On?\325M\326fk\226n?\036\330\335{9en?y\246]mA\306n?dO\30360Yo?\t\322\035\250y\345o?\312,\262\005\323\034p?v\030L)\323[p?\317E*)\003Ip?\300y\203\305g\006o?B\376*\244\"lm?\3403&\205\370\016n?\270e4\260]\363m?\344\330\214i,\265l?l\320F\227\377\334l?\347\317\216\206\031;m?\251\025\224\014z\033m? y\267\027pMl??\277_4z!l?#\212\323\215\323\267l?\365\261d\211,\244l?\264\002\333rB\251l?\247,,\200u\221l?\327V+\224\376\276l?@\231\036\313\275\353l?\346\021b\202\250hm?2\222\271\t)\005n?&\260\224\300A\326n?$\324~\376\212\033p??v\310\341T\352p?\364\370\372\260\227\323q?opa^\371\214q?{\246\023\340&io?sH5\257\224\254m?\022\340\240/Pak?\025d\001\234\251\323k?9\252rX\034\371l?\254\232\246#\016Fm?\245\214\234\253\004\220l?\245W\247#\260\324k?\277\303\352\030\"jl?\021Y\2104H\306l?\304\334\270<\013\177l?]\377\033l\313/l?\t\274Y\244\005?l?\322\"\207\372\360;l?\211\332\376\341#ll?h\362Sp\006\354k?<\234\315\236\\7k?\361?\253,\007\003j?\374\261\377\360\251Ri?\020oO\360J\033i?\007\341qT\345\260h?\355\217S\033lOh?I?+z\361\217h?\036N\261\201\254[h?%\006\247\\\346\026h?\274\014*jc\376g?\312\267SG\202\001h?\230GR`n\350g?\234\352O6s\265f?l\014?\332-9f?)\371d\007\215Gf?{\244\361\246\203>f?\271\2148\360\254\325e?\302\257&\211\004\327e?\374\336qM+\314e?\236\327z\264\250\267e?@\363\256\2042\260e?\003\344\021\375V\302e?Y!\361\232s\312e?\221\266\361\'*\033f?\315\273\320\255\356\220f?\333i\037\266\352\366f?rt\210\304\2543h?\241c\235\260\030\003h?M\311\031Z\002\310g?*\270\016\304h\014i?\323Z\037v\251\210h?\374\300K,\315\006i?T\376H D\203k?\226\334G\277\224\271m?u\234\221\367`\010o?\"4\231)a1p?\325\216fU\031\000q?\347\352\3525\r\357q?m\3019\300\037\300r?\372\001z\247#\374r?I\004\013\251\240wr?\267p5\277U/s?\247\345\036JhVt?\372\240\270\372\351\363t?\305\350\36308su?\257\345\2202\264\312t?\254:\035[\336;s?\320f\247\257\177\210q?\346\006\030\235\371\303q?\017\347w \006Hq?\357\\\340>\347xq?\341\324\346\203\216\353q?\302\036\"T\372 s?\375\031\350\0365\315s?\006F\240\362\226Hu?K\246\177S\234\306u?\353}\020\355V\333t?\2627\274\026\260\301s?n4\321\376?\002r?A\223_g\214\324p?\206\333\273\2655\352m?\271\375\001\365\267\033l?\370W\202\321Tkk?\227G{\337\237\"l?|?\211]Hxl?/\237\271B\260\216i?\351\265K\256q\034i?\213\316_\014\330\032i?$n\200_DWi?\354Eu\271\017\340g?:\353\232cU\221e?\321\256\366;\n\223f?\240o\231@\002`k?\252\317\257\217I\244o?\026Xo\360_\002r?\014\246\272\260\320/s?\210GE\020\245\305r?A,\010\326R\357r?\034RQd\311\366s?\016h|n\207\327t?\035\244GV\365\'v?\330\010\231k\236\021w?\t\020u\207cIx?\035i1\367\027\341x?\037\206\201\247\303\034z?\276\361\314\003\014Vz?\223+}g\002\345y?3f\037\037\205\317t?\357l\336$E\345p?\037\2015\212\211&p?7;\274a\207\243n?\207\200{R\261\'m?Q\005A\037\343\214l?@\264\221\026\'\361k?;\267\236[\307<k?\332\247\234\\w\346j?\371\007d\213\261\007k?\276c\016\010\310%k?\r\031\001\250\361\361j?!\244\331\002c\371j?c\332\343\367\311`k?\016S\334j6\214k?\300\317\275)\332\214k?\025\351g\262\313,l?\315y\211[L\006l??\231\024YJ\032l?\245\3200\267\2469l?5K\365\251\3222l?\004\177\256l\325dl?\244_ \335\017Eo?I\366\r\356\374\022q?\274\312\306\302\221\271r?V\274z\335n\276s?~\021\365\001\317]u?\254B\230\025ifv?C\206o\020\226yw?A\266,_\227\341w?\332?c\347\354\353x?d\321\026\00518y?\3115\313\206\261\\y?\333i6R`Hy?AL\2460\r\310x?\356\240\373:\274\\v?\252uR\307y\353s?\333}k\200\002\212q?C\014\222Cf\\p??\312Z\323T\000p?Z\"f\342\225\245o?\275\256\020jG\360m?\342\220\267\243\322d{?:\024\342\3520\301y?\363\311H\305\030\273y?\036o\'NDxy?\005J\361\216\337\035y?b\030\311\201\313!y?\016~E+\265\346x?E\230\366[\250\355x?*m*\270C\266x?\247\200\363cEmx?\033\t\tXx\205x?\223\240\307Al]x? _r>\235tx?\3536\3306\355\253x?\370\007\030\375k\360s?\351@\tEP\273s?$9\240r:3s?\367;?\205V9r?\301\345\375\364\251\247r?\326R@\332\377\000s?\334!\315q\321=q?[\020\t`|1q?b\356\251\210\022\256q?E\270\013\305\004\322q?.\314\000\037\325\023r?\365*~\310e r?N]\352\001\242Ir?\250U\335\353\360Lr?\241\005\010\351\240\200r?\222\021\020\306a\306r?\213\342\241d|\334r?\263\245\036\324\013_s?\245\\\332\243I\277s?\352\251\347:\023\356s?]\016\276\247\247\314s?\201K\300\342\202\311s?s\360\005\223\006\252s?d\021\360\217\352\200s?>\335\362\361\006!s?\272P.\312\302\220r?\373G\036\t\255\347q?Y\371e0F$r?\221M\352\2625\256q?\000^q\001\000\261q?r3\327\307\025\247r?\336\021\212\267\022\335r?9\325\212\321\233\323r?T;\213*8\306r?;\301a\026\230\035s?uR\215\316a\rs?H\"W\221\241\310r?\335\356\255\224\332\225r?\360\n\027\316B\366r?B\350u\313\333\377r?\264\177\177\371M)s?\246\343P\020SZs?\032\246\213T\345is??\264\214]m\210s?T\321Z\374f\225s?8\315\216\226\373\313s?\010\201v6\315\003t?@\241n\005\354!t?\021\3266-\307\027t?\356{\372&R<t?c\265\003\362Hct?\237\326e\337\262\226t?9p\362NJ\260t? B\013\362{\347t?n\274s\334\264\017u?\014K\212/\335\233t?\031\223\r\2127Is?v\320M\344G\321r?\350\177\010]\001\006s?-6\224wa\255r?\215y\307p\017\036r?0\256\273\360\270\345q?]p;q\217^r?\250\250q\244p\223r?\016#\025\252\301Rr?\016g\002n\253\223r?%3\261\325\362\276r?]\2655\231&\251r?\222\264\t\232\020\037r?\2615\344j\'\364q?6\355*\360\212\352q?\255$w\255\304\tr?\355t\345\210\274\262q?\277\266\346\335Dlq?\320\303H\260\352\014q?:\317\330\227l<p?M\377sG\350/p?\300\314r7Z\236o?D.\376\32751o?\335;wv\2129n?-\345w\370=zk?\024\267\334)\265\310j?g\370!\377d=i?\255\344\356i\nAg?\022-\266\237E\034f?fT\353\215\362}e?\330M!>M\271d?\264\021n\203\361\013c?C\342\206.\224\213b?\253p\262\252\261\306a?\034b\354\037l\372a?\027\334\036\243\215:b?o\253\363\2042Hb?\312\262\215c\027Qb?\3471\370k\032*b?NGL\305\320.b?\313\217b\372\nDb?\337\234\206\2624\023c?P#/\226\342\335c?\n\023\317\244\020re?\324*PD\3547f?\276\252\3740\027\370g?jQK\345\200lh?\200\367Vp\264\355h?\271H\033\363\2547i?\276E\023g\306Tj?\320\177\310\210/\006k?\030\257\225\252\226ok?\345\020\234\363\206\rl?\336\371;\227\206:l?2\316\213\205\264\325k?\201_\360Wk\242k?"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\250\273\326\321}\250@?nuR\302\3001C?\301\264\252P\235AE?sm8\304)\207G?\372\236\335\226\322wJ?\310\2115\260\343,M?\257X\216S\036$N?9\325i\303\262\260O?1A\245\373M\351O?\243\254r\260\035\335O?\027\241\306\'\336\255N?\345\252\366\014\210\340M?Z\314\363\323\304\252M?\224%\252\037\352*L?\217+\327\326\255pK?\233\020\034\222\270\231J?\027\'c!\337JK?\355\354\320U_\002L?\276\354\343\020\215\310I?&\027\027\322\327\257H?\341\232J%\215\350F?\267JW\200TbE?M\206l\353j\234D?\014\365\034\332\305\tC?K.}\352\203%A?l_\330Kg\350>?<\324\235\304s\370<?\3210\371\302\013\3628?\002\272%\365BZ3?\215\317\227\360\341\030-?O\0164\331\036A*?\032\016\334e\345\265\'?\376\021e\363a\213\'?\024\336\324\366e\037*?\346\340>\027\262_,?\235B-T\236C0?V\224a\310)\2732?\341pw\272\031\2146?\221\353\004\006\331J9?\341$\n\203\353\267:?9\342=\305yQ>?\\t\262\324z\277A?2F\264\265o\002D?T\367\301,\306VF?\233L\363\306\375\322H?|\356K\320;\"J?\345~\357\205\265pJ?>\035\253n\327FJ?\204\363y*\177uG?\034\351-\232\245\317D?\262I\014o\307\265@?\367t\274\234\356I;?\3061\305.\347\3305?\372\036\375HtC1?\264)u\316\361\377*?X\201k8v\232&?t\310\373\250\356\340#?\301\317\272qK\336\"?\217\313\374\306~\346!?\235\014\216\222W\347\030?_\031eG\364|\027?C\271~\013\374\362\023?\030\362c\'\027\276\t?\276\252\016\024\323\340\001?=\252P\223\317\341\000?\307\226\2122\300\252\377>\311\337b\352S3\000?\3525\207\265B\242\372>(Y\230\317\003i\000?\276\252\016\024\323\340\001?\202\270a\312vt\002?T\374\204X\242X\003?\331\376:\334\263S\010?\347\034\227\314\014v\016?\356s!\373\305\021\020?\030\n\330\016F\354\023?T\344\020qs*\031?\247\0348\014\213\366\035?\266\220\323\031\020\010!?\324\004zv3\202!?)\265\204m\245\206\037?\n\274\223O\217m\031?\010\273\027N\210o\027?\253N\030\336\366N\026?\021\357\357\"\002\304\023?\273\221\036+\235\264\025?mO5\037|\315\027?\315\325\240yJ\030\027?a\032\341H\373z\031?\212\316g} 2\"?D\242\204$\251\010$?I\027\373\3106;%?9\017R\260\371\312)?mT\230\330+\025,?b\230\2223\264\0040?\026\"\177\347\031&3?\341\317\334\202&;6?\304\253\201\355-\3239?\346\315ywx\220=?\0240E\257\302\n@?;Xq=\031\002A?@WtN`\370@?T\241\216\2028\363A?\225\025\232V\320\325B?\233C\371R\335\373B?\232\235\325\232\227\327B?-\"\265IxTB?\311\266\275\361v\003C?E\255\376Bn\nD?B>\215 :\251D?\302hc\340\021\371D?zA\365#\006\000E?\"\206\260)v\205E?\264*\357\316\315CE?]O\220\262\'|D?e\256\2568\014NC?2A\276\230\356\364A?\250E\320\332e\246A?\225+z\257s6A?\305Vz\264\013\342@?\366\272J\031f\330@?`\240\212l\376\227??\223km\2161\177>?\360\267\214\2076\201;?\010\321dCZ\n8?\340e\351\267m\3474?-\200\306\330KK3?\323\021\273\024)]2?.e\227\252\337E2?\035\305\3360vg2?b\211\251\"L\2711?\373\277\227\200g\2241?\356\374Tu\214\264/?\355nJ\353\002m1?\034\032\213\260%\0073?\251\211s\0215\2122?\010(\337\374\036\2461?n\334\251S\372\0261?/o\367:\365\2750?~\316\337\257\302`0?-.\310u\327\0020?\245\232\250\221\325./?\3408VM\003K-?\220i\034\323\333\353)?\353\352:\306\250z(?c\327Lw\004[(?\376\241;\266\325\024\'?\232\223\342\246\260\231&?R\240\000\236u\014&?\255&\001\312\334\005%?s\037\002\014\240\037#?\377\247\345~\274\224 ?\360\310P\374\265H\034?\005\271!L\245-\033?=\0034[\303V\032?}\206\201\370\n\034\032?\177\223\267m)1\031?]\232]\"\327\200\032?(\036\243~\017E\036?a\350\234\225p\305\036?\264j|\313Au\030?\007\307\321\301\237\206\024?\324\374B\331\245W\024?\255[NS\025d\025?\003\271\037Kzs\023?\264\202\360\262p\243\022?B\270\002\n\365\364\021?\016\356s!\373\305\021?\300\267D\211\361\365\020?;\235\032\036\261\314\021?M\341\234l^0\023?\222\357\255\243\005\303\024?\3422\023\261-\250\024?\253Z\322Q\016f\023?\266\217&(\217\270\021?\021\373\251\226\031\333\020?M\355V\340uG\020?\003\305\331\276\221\212\020?\311\337b\352S3\020?F\322n\3641\037\020?a>\017\244A\300\020?=\252P\223\317\341\020?\204\305\227?\225\211\021?\200\253+UX_\023?v\203\r\364\365!\024?D\255\304\227\344\333\026?\036j\260\260\255\215\033?:\317\306\264\260S\036?\373\375\327\303\333\246\037?\351v\214\261g] ?\320\035\200\261\027:!?qv\010oQ^\"?\006\010\213/\177*#?NS\357\234r\364$?jB~)H\333$?\264\020\037\003r\274$?\243\367\327<X\020$?\3216\243\213\362q\"?\275\016\375\\2c!?\367\364U\025\301\317\035?\227\361\245\246\023\277\030?\361h\343\210\265\370\024?\316\341Z\355a/\024?M\355V\340uG\020?tR\251#\221\307\r?\226\3311\277\344\220\016?\221\373g\027\035\332\021?kN\271\035u\317\025?R\343\224ol,\027?\260\\\312T\034b\027?}\222;l\"3\027?R\271Vi\365O\034?_\241\002l\257!\"?\322\243\305\363\373\371$?X\304\314\030\310\256\"?\361\024\344\372\206\250#?\256\r,\177r\237\"?i\036\033\3341\320 ?4^\004\327&_\n?\316\341Z\355a/\004?\023\360k$\t\302\005?\312\257z\033\366\326\013?\276\252\016\024\323\340\021?M\341\234l^0\023?xx\317\201\345\010\031?\016\247\\yz\271 ?\242@I\310\332\273#?\217\305\323~\255C\034?\206\211\016\232\300!\"?\026\t\\\r?\356\021?\331\026\257\303\342\201\022?\223\010\236\214;\357\020?\247L \333\350R\022?\307\306r\001\036\007\024?a&\233\274\022\222\026?h5\3114?\243\031?\036\323\316\301\027L\032?G\036\353V\215-\035?,3\337\240A3\035?\244!\314\265\264\217\037?9\237t\001\263k ?J\224\331\372\313\351 ?\270\211\227\375s\376!?\031Ob\342\037N!?$\207>\0169l!?\025\324\016\204\006\220!?o\344\010\271U\207!??<PI\313\270!?|\334&\370\200\"!?m!?P\253> ?I_\214q\223\213 ?\305[\252|\026\036 ?\201\024\230\3652\357 ?+\235\3661rX\"?\017\246\257\207\371i!?\033e\375fb\272 ?4?\236`v\204 ?<\326\037pC\335\036?\334\335\257t\321\237\034?I\025\324\326\331\247\033?\253\177\025\202J\314\033?)5jt\275#\031?B\240\216\"\306\306\027?4j\276J>v\027?\220\342w.\347\255\025?\230\n\226\217I\353\024?\262u\272=R\216\023?\271\220\242)\226\266\023?x\234\375\334+N\020?\270\234\\\235\255\315\020?+Z\024\321\ng\022?hM=\034n\321\023?V\375\000Z\251V\025?r]\347\225\241\340\030?_\322\200\220\030|\033?\"mU\245<\331\036?(S\360\007H\243\036?{g\264UId\037?\217\327\235\235\365\361\034?\326\305\235m\226\024\035?\377>{\337\014\277\032?\202\365\032\343\014\303\034?)]\033\246\215U ?z\274+\343(>#?<pT\302\241$%?,\234\312\300\006\346&?e\267\355\200\215\031(?oC\311:\325\207)??\373JM\246\375+?g\253\002\035\374\260-?\r\332\331\307ra0?\225\262D\033\013\0001?\250\036,\rC~2?T\264\300\276\240\3742?\274\321\321\356\263q4?\317\213\001|1@4?\033\227\365\213\247X4?\364\273*\374\21335?\241\230}\235\"\'6?\3312Z\363U\2055?%\034\037\322\024\2464?\240\222\037c\201\2763?\321\223\007)E\0314?\n\267\211N\'\2755?m\001\023K\331\0105?\300Dm/*(3?\233/\032%\364\2422?\320\345+S\\\3552?\000\375\271\3069z4?\203Y}\202\177\2426?e\315\341\275\027\0358?\220\035|\252\010\0149?\345\224\317\336X\3218?>\022\304\263\343\n8?\2731e)WM7?\323V\321\221\357a5?by\023 c\0364?\372\330l\313\321\3723?<\177\226\213Q\0074?\237{\327\354\275\0025?\234\222]}\375\217:?\325\376\367u\032H;?\232\0008\000_->?>\024yPX\373>?}g\002\345\2715>?\315\017\003-\302\354<?7[\244I\\\331;?\267\360\301\r&5<?Eh\t\324\220(<?5\203\273]v\"=?\036\334&\2479#A?\005\3548\270S\276@?\027U\361\014;\010A?\357\023\017A8\023A?\370rA\253\003\210A?\243\277\002^\207\346A?vg\t\014;\207@?\245\310C\2473l>?\235\272\302 \210\252:?p\"<\322\307\0316?W\001\20403C5?\347o\264v\352\2603?\032\363+\267c\3232?{\370\251_&\3400?\2644\'\227\025v0?\255\237\221\027\270\215-?W5W\271\217]+?\272q\244\226Z\255+?\300C\315g\253X-?\335\r\3155\377\301-?\036\271\177v\321\241-?U\2168\200X\030-?\222\2652S\355\342,?~*K\315N\241+?\017\033\275\376J\005*?\322\\\341< \371(?=E\350I\224\033\'?1<\255\335\241!&?\203\230\203T\025\020&?+\340\013\204~U\'?hA\203\250V\272&?\023Y\2125s\200$?\025VPoK\206!?\200\270\023;\006\243#?0\'\r\332P\326$?\261I\322\303=\207#?S\334\327\322\272E$?\307\341\357\276\372\335#?\226\332*?\253\367$?\242\270*#\n:%?q\244}\275\014\020&?P\311\304\243\020\245&?R8A\357\033\314\'?:\354jd\352\275\'?\355\037\210O\341\330(?\t\366\302\021b6*?\336a\231\322\210\006*??2\362\271\340\372*?;\315\353P\231\327+?\300\236V\241\346\203,?\366\'z\253q\340,?,\375\344%\210\205-?v\010\213\246\215\314.??\254\256x\'\365.?9\222\214\033\005(0?\220\233\206M\t-0?v\323\257r=\0211?ngPNcd1?\347\346\016\247;k1?)\237\251\315\273\2161?\230q\331<\234-1?f\374\235\033\n\0071?\rm\337\'7\0371?%\253\307\"\362\0021?\304\276\353\323\364P0?\036\311\357\261\027\261/?\013\322\323\032_\2100?\245!\214\232\r\0041?~\255\336\360\241\2252?\036/\322\373.\2733?\n\2300\002yb5?\n\227*X\260{5?\307\310Me5\2036?+\350j\351\331\3057?\235\307\320\315\330y&?\0147\030\236\"}&?\266/\240\027\356\\(?\266\232\347\033\340h(?\361\220H,@\023%?]N\343\300\246,%?E2\334g2o\'?\2752`\252Hn%?z\022\006\325n\n\'?tbe\355\034\356&?Q+Y\tn\210\'?}W\021)^I(?\227\005\0308\316\335&?i\006\332\345\247\255+?=\177\230\214|\301+?l\274\t\370\024\204+?\217\3558\"8^,?\370\243\371z\366\020(?\0243N\205p\263%?\312\277\267e\227\332(?\327\t\254?ix(?5a\247\312\212\360%?h\256W\201\357p*?\352b\034!\330\370)?\277\375\3410\226\276\'?\021\325O\220\274\231o?\305c\026\014t\016r?\357/\367\323\303\363q?X=N;v\374q?\275\0323\230\245\356q?s\322\245\306\036\266q?\034~\033\210\203\211q?\006H\3439#\226q?\302*\353\362>rq?\321\371\370\235\211]q?\224Qo\212\352Tq?\364;\330XE\\q?\337\t#\341nUq?h\255\226\253\207~q?o\020J\353\261%r?\336#\361\253\237\"r?=$G\375\237\nr?!$\250m\005Er?h\270p<y:r?\020<+Z\232\nr?|\324\326\275R\354q?O\251.\272\236\343q?\340\005V}\312\013r?\202#N\025\366.r?\036\340\007\357\304\017r?\005!:\263F\005r?N\036\334\276\303\304q?\330\035A\3407tq?\326\373\305 ;eq?\363\365\177\205\001\210q?\234\210<Q+\257q?\226\223P\372B\310q?\212\313BRC\317q?\037\023\347\260\024,r?\326\301\250A$\205r?>>\034\202\265\372r?{\033Bea\'s?m\317\330\t\302$s?\375\365\000\231z6s?\200\371\207\324\204Rs?;\213g\233\336os?\307\275\0109@Gs?\0268\035$\353@s?\177\216@\320\222Fs?\302\t\3544Ias?;E\273\310\014ms?G\303\357\307i_s?\201\036w\0053\212s?\254\262JDS\321s?\'\245\257\006yTt?d\0262;\261\245t?\224l\022\017j\267t?\265v\202\315\236\243t?fBp\265~\225t?\311\000\372\304\324rt?\277\030\350\337\320\211t?\361\"2\375)\215t?\377\323G\277\001Vt?\354\231\225U\'St?\213>\245\236\223Kt?\252\326*\020)Et?\237\243\210\036\2164t?\312wm\222\3068t?\350\210#\337\n\000t?\372\356`\010\\\376s?\000K\266\3239\263s?\330\037\310D\301\301s?\001\274\223\274+\234s?\234\353;\2147\234s?A\177\367GE\207s?/\r\211\234:fs?*n\370\267\255(s?x\271\004\267 !s?\201\243.cTcs?\217v]q\321\306r?#\260b\206\000\277r?\2545\212h\030\227r?\006`E>\226\333q?~\226\325\336!qq?\352\266\007\313\037\246q?vb\210\3740\313q?x\242\245\244\347\023r?\260~\260\257\034\361q?\314\035&\257\010\335q?c\346\000\226\234\340q?;\250\345\203uNq?\367\231\343w\373\365p?2\254E\270\207\214p?Y\304\013}\013Fp?\363\'C\270v`p?\346\214w3\342\203p?zW\017(3\217p?\213\020\332O\037\261p?\316-\213\301w&j?\360\2035\3065\333h?~\026\360\327\t\324g?\243\213\001\235?)g?W:\006\001\205\274f?7,x\227\254\006h?\241\000a\022\3648h?\"t\005\030\354?h?8\267\336vn\310i?\177m#\274B\301j?\370a\255o\232\035m?M~\332\224j o?H\001\273\375f n?u\305\311S\017\376i?\216J\2450\323\034g?O;9\231q\200d?\217\300\345\322tMc?\272Y\235KZ\271c? \\\"\223c\035d?\375\377\351\032\356\242f?\335KBkC\232h?p\366\317\037\017\207i?\203\3437\'$\tj?f\226I|\nZj?\014X\276\243\320\366s?\270\016\013>\230\327s?[\236\222i\360\233s?\235\370t\271\344_s?\373\327\\\257\225Bs?\370Y\353\337\203Ds?\201\343?\230l s?\234\302p\314\267\340r?\364\301\251D\026\277r?$}/\305\"tr?\202\230V\323\215ar?\320&\352y\365\371q?;\233\007\020;\334q?p\347\331\344\244\273q?n\005u\023z\322q?`aB~\226\344q?h`\247\0025Or?\323;3\306)hr?\254&9t;zr?\345c\310\310\221\202r?n\024$yX\357r?1\037\374\003f7s?`\302)\362rxs?2\200\200M\207bs?.J$_v@s?Q]Q.\263&s?9 \305\335y\022s?\310\211y\315\340,s?\030:23\214\353r?\205\353GF\253\263r?6{\366\025\321\232r?k\353V\270\255yr?AB\367Y#\212r?\'[\030z\250\223r?FE\314\207\3102r?v\240\213\334\214\000r?0\317}K\226\031r?\331\316\217pn\324q?+\355\266\006\024\274q?:\236\314\310\353\204q?\354\346r\033\276\231q?E\031\213Ul\224q?\225\201\330\331]\216q?\002\010\304\220A\223q?aA\343\207\037\243q?x\273\264\232\333\250q?\206`\236\223\263\267q?!|l\356\217\307q?\354\247\275\220\'\254q?G\323\217<\306\313q?y\016\365S\315\300q?:nh22\264q?\350{\316\\.\202q?\246/\325\343\366\177q?\341\3739\n\262\223q?N\220\277Q~\224q?\226\233\371\354\270\225q?SL\340\001^\231q?\343\200\370!\270\217q?}\034\230\237\305\231q?}#\217\347\000\257q?\025m\245\017\021\302q?\316\372\001\000\341\362q?\023l\347\3617~q?B]\033_\270\311q?\333\345\346\021_\312q?t6\233\311b[q?\021:\016\332\260Hq?\204\314\337\316\317\036q?{\034\214,\'\016q?\350\360\314\250R\343p?S\352K\234\000\266p?\237\242\253\363\366\207p?5\372\376\361Q\213p?\240\352l\325i5p?\221\206\365t\345\033p?|\n\275T%\367o?\333y\326\306\274\264o?BY+\354\377\242o?\357\212s\343\374\236o?\301\347\233\365\250Fo?\033\017\220\021K(o?\254w\343\235v\no?[Aa\275B\000o?\366\003\005{\237\354n?\356\260\271\005s=o?[\352P\350\035\360n?\242lM\227\036}n?\221\201\t\312\327\337n?;A\n\272\227\335n?G\263\274\357;-o?\356\243*\330\014\221o?ya\034p\036\315o?\355>\331*G\034p?o+\263\304\247Yp?\210(\211\231;\002q?s4+\001O_q?\326\314n\356.\236q?%\346YI+\276q?4\214\372\245\367\355q?U\351T\035e\tr?\235\342\035R\237\363q?\313\035\177gPtr?\340\225\340\261\370}r?\021\253I4\2441r?\256\331<\241\346\312q?\324e\250\277\233\304q?\276\023\222P#\302q?C>\035\314|\300q?slB\374\361\316q?tQ\307?@\262q?>\026T\264owq?\335&\007\254OKq?\2731\315\014\314\036q?mG\345\344M\227p?n\213~\251\251\251p?\342\331\275\223Q\220p?Uxj\nq\240p?\030\256l\361\271\253p?\266\263O\312\033\225p?4WTdw\370p?\261>\353\010JKq?Q\355\302\305@\215q?\222\2706p\341\"r?`\004K}rwr?@i\224ma\217q?\215o\246D==q?/\231t\245\2571q?\225N\240_\306\332p?\366}\252\235p\225p?\300\256\332\300\0236p?\302\023\335\'\005\345o?\302m\264\266\005Xo?\365\373\252\316\375\344n?\334\212\324\346\305\252m?d\007\341F\324\210l?\324\317R\264\235\257l?d\345lA\274\234l?^\004\007`uwl?\234pQ[Zul?,\354\314\261z\217l?\343OT6\254\251l?*K\3371]\004m?\262ep\311\256\nm?\364>\315J\014bm?>\254\232\224@Rm?\356\331\274oQmm?@h\262\211\020zm?@e9_\245\350l?\034\333B\302\275Sm?\274\216T\2712\243m?%\n\317y\375\261o?!\205\023\032\206dp?\3624\274\000\313\257n?\301\031\t(e6n?\315\002\241\200\343\356p?BX~\372~Sp?\032Z(\217*gp?\207()\'\017Hp?\007*9\340 Ep?g\364\221\376\330\320o?\r7,\202\t p?-ze\346\0334p?\207[W/3*p?\002}dkd\364o?$\215\033\310\304\367o?{\'\367\037\277\325o?\375\232L\337\342\026p?\332\022kQ\234,p?+M\032\010\241:p?\313\345\377\21083p?\242%\374C\024Bp?o\301\316$\034@p?\314\037,\223|Mp?l%\021m\t\361o?\177W\265\270\207\003o?\320\225}avrm?HD\211z\347nl?(\256\021^\016\375k?9\222\267\233a\034l?\017\2671\340\246\353k?0=\234\353\364\266k?\325\002\317K2ck?\266\000\273:\3128k?BN\203\225O\376j?\232\200\224\025\031\326j?\2363\244\265b\262j?\270_x\004\273\212j?6\334\037\246\177tj?\005\365\002\363]8j?\"\300\264k\354Yj?\215\241\200\023(gj?\367h\206a{\276j?\010\335\014\324\2658k?\252\362\n2l\016l?\300J\316!Z?n?s\275\000\n\024\002p?A\352\305<j\315p?}Vi\360\226bq?\002\243m*\302\265q?\2420\336EN\025r?\240g\341\"_Xr?+\370\344\226\223\246r?B\246\354\\g/r?\004\017\035L\324\034r?\243\266L\007d\017r?Q\260,\274\276\033r?7\377\366\017\376Rr?\267\267\344\203ajr?V/\006\251\360tr?AFx/\202\274r?\316f\003 V\316r?$%\301DQ\332r?2\364\'\250\343\\s?\216\262F\211\322\350r?\251!\370\177\330Ir?\033fh<\021\304q?V\351L\254\034\362p?\343\'\025Z\304\032p?\243\301\376\317\207\205o?>\375V\2417\313k?\023\013\276a\211\244i?\014\2547\370/\001i?N5\'\355\025/i?\000i\346f\013Ji?J\212\305\370\373\210i?\000\014Ceu\013j?k\031P?\r\267j?\n\320\337\031\247\000l?\0266\245\352\216-j?\254\314\352\326\230\373g?y\353\253\224f?g?%\272\374\301\237ef?Y\213.\363F{f?\261\377o)=\214f?-\2469|I\230f?\023\244\214\227\362Jg?\320\247\261d^\254g?\036\031d\370s\375g?M0K$\231!j?\361e|A\006Pn?\020\323:\201\033\357o?\230\263\251\200\234\254p?|\351\263$\274\024q?\023Y\277\'CFq?J@BP\022kq?\1779\205%\266lq?T\343\257\r8\362p?\356N\353\364\213+q?\276\2277\221\335(q?\026\340\346Mx\033q?\022kz\033^\272p?\366)d:\266\226p?4\3771r\353up?\225\324\004\257h\003p?\017\252ry*\342o?e\321\004\"uOo?C\310\346\233Nan?y5\321\313N]n?\342\364|m\000\255n?\333GP\367_\271n?0v-\347sjn?m\362z\201p=n?\204\300\222\367\346An?\255O\321B\026*n?\221*C\202\315,n?f\200\326\277\2253n?\377\372b\233\306\211n?\225\256\000\251\304\252n?\350%\255\225\\\007o?\234\037G\277\362*o?\354\024U\006\250\205o??\234\004\222W\267o?\276\246yZ\215\013p?\307\365\371l@+p?\341\313\310I\366Bp?*\2150\366r`p?\013a\2422\337pp?]\334 <\325\177p?\240\007\007\0230\316p?\316\261+Ix$q?\340n\317G\247\033q?uE\230\276\261Iq?W\017\363@\277Jq?\004\0223L\204Eq?iU%s\'6q?\261\320/\223\246\026q?\317\222-\266<\033q?G\324<.G\033q?_\274\313\267\321\017q?\026\276m\217\246\306p?\304\241\264\300\351 q?\235\3645\000Xsq?\266(b\372&\231q?\373\210\222\242+\227q?\204\035\013y \214q?\271\232\247\0009\335q?\306\036\315\235\010\376q?\003\217\356n\005\027r?$\234~\237]\375q?\311m8\202\r\265q?\332\252\003\244&\217q?\007\225\210U[hq?\027@\2643\245%q?\006H\212\201\333\376p?g\351\320\n\210 q?\006@\332\324\200\016q?\265\276\"\241(.q?\237\032\331\334k\035q?\337}\305\202\021\347p?\256\232\177\245\007\306p?\332.Ir\264;p?\035\327\335A\216\333o?\331\306\036(W{o?\364\313\3607\213+o?\274Q\274\256\205wn?\243\362`\237\301%n?\310h}\307y\312m?+\033\333\r\320\355m?\346\341S\354\247\200m?\016\335\332,\330\362l?1\310\375\021\375\017m?\274\223\177\310\203vl?\275\236\371\346Hxl?\n!a\304\260Vl?Cl4\2516rl?\314A!\031\252\026l?\203G\360\306O\321k?\010\002R\005\035Yk?5\263\r\021t\nk?\304J`\316\307\020k?\037\276L\024!uk?\266Ed\033b\003l?f\217\277\320\375~l?\366i\252a\236\031m?\307D\357\371\006\313m?\307\343%\334\204\253n?@\350\367\002U\321o?\211\017r2\377Up?\200\321\265\224\313\375p?<\341Z*\305Gq?\020\212\200\037\342\332q?\006}\204\302\351\"r?\340$\257\311xfr?\204\010\330\021\376zr?s\215d\311\373\274r?vq\215b\310\320r?\277\353\226\22183s?Y\253n\334\377Ss?/\225\nl\306Ps?\226\354\335\301}Ts?\345\251(\r\036ns?\033k\257\240\221Qs?\212\030\237\227\3048s?U;\220\343\361.s?h\013^\255@\030s?\200\200R@\034\034s?6\350\377\3409\027s?\234\217\354\303\332\025s?\2329\340\227S2s?\223\272\256\251=6s?\345H\372\303\265+s?\340{\037\021\3120s?a\236\235%+3s?P\265\030g\314Ws?\365\177\331\000\026@s?g\022\377\364\302Ds?\227\255\3247Y8s?\307\tK\360\021\'s?\234to\006\376>s?X\213\\+2\036s?\2179\026\256#\033s?\203\345\257`\200\034s?\244O\355\004\342\022s?\271\001\312\237\242\374r?\200\203r\262?\026s?w\211Eg\364\376r?M\335\305\226F\025s?\201g\352\221\340\357r?{\206\330\257\'\371r?3\326\333\277\342\013s?\031\246\206\233+\001s?\274\32486c\032s?!\241c\220\206\026s?\361\"\317\322n$s?\364\340\254\220\0131s?\211\034vm\334Ss?L*\023\261\232Ds?n\316|_@Us?\227\247>SY[s?h\302\352 \223\262s?WB?\237=\241s?\252V\371z\313\220s?\217\\\241\211\\\342s?\300\246ZM\317\242t?\234T\3079\320\224t?\245\004q\3341\216t?X\337[\271`nt?\214z\346\267x\020t?\351Yn;\3758s?\177P=\3606\021s?\225\274\036rQ2s?\001\345\376\t\177\235s?xf$p[\303s?/\213\361\260<\207s?\023D@2\333\035s?\230\356H\321\327\347r?\363\327\226\307\273\237r?1\"\276\004\2101r?\235,\367\372A\372q?.[%7\016\345q?\314\340/3Z\261q?!\036c\320\004\350q?\322\236j\253\224\311q?l\354Y\252\347\261q?\246.#9\274\307q?j\331/\337\307\277q?\274\372{\240J\nr?o\267\311My\031r?S\321\365\320\200rr?~\317\255\257,\323r?\344\3415\226M\014s?\005i\262\276\002Js?N\275\025Y\320Ss?\237}3\321\352[s?\332S\257\261\004\177s?\211\246\nK\336.s?\324\321]Q\313\210s?\240\222\037c\201\276s?\204Rj\345\024\323s?\023\213\250![\252s?\036\t\207 \377\263s?\324$\362\tK\317s?\267f#\276\260\210s?\322\377Q\037q]s?@\026\303Q\311ks?\333\344\234J\231\343s?\003?\342\013\036\234s?&\236\206\204\374\'0?\026]\002\343%\2472?W\025\366\301\355a3?6\274\327K~\2044?j\262\247f\324Q5?qB\351W\257,5?\200\223\3354\314\2744?\321\200\351\320\303\2624?[b\007\303\360y4?\221r\3658\023\2404?l\332Z\231\317=4?\017\035\344\360\247\2303?\363\317\234\215FR3?8\022\177L\037E3?5+,\317\273e2?AQ>\334\214\3251?\276Ub\224#A1?\236\321V%\221}0?3\335\273k\250\3170?a\274\315\270\374\3110?\206\375\272\255\326\2042?\310&\323J\034\3271?,\351\344\351\265\t2?\251\035\177\033\302.3?\244\246\007Lz\3643?8\365\247\253@\3174?e[\335\034t*5?\301\216\263t\373h5?\315\327\372\\L\2675?\236NB\201(\2545?\024\336\372\275\010\2535?\340~eJ\220\2666?j\356\377\033/h7?Q\"\364\371I17?\263_G\201\335g7?pRY\223\365;7?*\305\216\306\241~7?\246Q\004\025\256w:?Qw!\372\016\256;?.\210\200\367\031\r<?wr\2448\351\253;?\242\233\206s\320\317;?p\177z\250w5<?\026\277J\272=s<?P\035\367\"\344\000=?Y~\227T\230\267=?m\001n\004LZ=?5\312yM\257\227=?F\003n\231\260V=?\342\236\024\321\242\203=?\254\361g\262^\220=?\036D\315\270\362W=?\363\246\227\"=h=?jK>\362\336\203=?G\326\177u\323h=?d\233\235\n\215g=?\311\206\301>2\004=?\375\020\353\362\205G=?g7\375P\236\266<?\353N\252\217\035\332;?9\257\230\256\263c;?\367{FH\373$9?gJAp\302\2507?\316\304\334\004\313P6?r\233\277\365\240!5?\323v~\027\327t4?oWa\223223?J\200\300!Yb3?.*\024\257\323\3042?\272\007\244\241\237\3310?\240\253\301\274F\0311?q\020\230z\"\3670?\033\360\243a\313\0071?+>\221ie\2512?6\356N\360\255E4?\311\313#J> 7?f\232\275\'g\0149?pf\376\025Uf:?wX{\264E\215:?\322\302\370x\007\3119?s*jG\25189?wN\302k\350};?\\\231\t\351\235\310;?\266\211\375\337\275\025<?i\377\301\217\203u@?d\202Y\"\311\014A?\312\233z\337#[@?\374\325\300\257\301]>?v\3511Z\337q>?\211\233\002\202\001\320=?\235\014\301\203\374\362=?j\361\272bl?>?1\215\330\207\362\216>?5>\177\031\r\222>?\034\034\032\206\367k>?\231\t\235\017\203\204>?\023\375\007|q\356>?qO\205\257\027Y>?%\357\344\037\362\240=?\001q\301\223\302.=? \231\307\307\022\311<?:\336\010~`6=?\241A\003\344]\213<?\210\323V\340\274\034<?\274g9\335mo;?u\365D\206> <?#,\302\376\377\300;?\334\314\353\377Q\330;?N\357\214\375\377\024;?\360\3279\r\036\224:?\313\351\367l9q;?4\205\025Ax\301;?\003\371\206\200K\031;?\034\033\354\023a?;?\361\234]Y\312{:?\203\027\311\223\256\3359?\257\210\275\367\007/9?o\363\245;x\2738?Pw\3711Ah8?9\'\240\320\205m8?W\3104Q\206\3258?\001\261\363\326\303\0168?\233\261\216\001\336\2447?\330HYY\267N7?\n\214\035\326\031\2647?\241\201\334n\027\3246?\215\251Y?\264\2216?\206L\212s\372\2304?\340\271\016\r?\3031?\242\r\244\261\024\3160?\352&E\354\222\277+?/9\327\370\230\204%?\232|g?H\322\"?\347\336\257A\340\372 ?i\274m\3313\341\035?\3765\310@x\226\033?\203\201\274^g1\033?\225n\265\310\"\277!?\343\353\257zg\204,?\274|%o\004\3223?\301s6\267\036\2225?\332\2474y\002\0259?\250\376\331@\316\274;?\024\204y/\301 >?\352\013\247 \315\305@?\356\271\213\261\305\316A?\204N\320r\025\225A?D\257\353\211Ao@?j\222\374\341\027\371=?\217=\333\240\177M9?\301\355\231\275\035\3658?\302\304.p\312\3638?z\334\345\222\022\321;?&\201=\2165\017??\306\177h\203\237z<?\243ZtM\251\224<?C\2712}\266\333<?\351l\207\332\3046:?\016\023^\231\357\2249?\254\200\020\003<\3559?\373\022\236\216\317}<?\023\203K\275*\364:? \223\020\325)\3119?\377\013\260\001\244E<?[\374p\007\037\2077?L\306xg\311\3603?\024\360\022l\301*5?\017D\365Z\371\3724?\304\030\242T\014\2414?Y\211#V\031\2427?9\222@\215\277\0209?@\241M\367\002\377@?o[=\"\004\266C?\030\345\265\354\362\250F?\265\2701\003\266\377H?\376$\004\314\370\316J?\206\262\350\204m\027L?\306\326)\022\360\304L?\207\367\245I\354\204N?\317U-\310\032\036P?\001\347\246|\361\rQ?\335\370\025\2268%R?[U\274\262\207\315R?\311B%\302GCT?\332$\273\251\263 U?L\335\2062\003~U?\017\016\373\337?MU?\210\3766\257\335\202T?\305\273G)-\313S?1\002\007\r-MR?\377\227\342\337\244\277P?\253\271\300\013y\tP?\343t\350\255\347\217L?\235BNb\207fK?\306n7r\361xI?:\231\205dk\367G?\014\342\330\272\241\027H?\3773\'\210\352HF?A~\0069\3077F?\325\327\014\323kqE?\014\362\001!\\xC?\224\312\353\363\3369@?\327!{\340\n\370:?\272\343\233\r\374\0375?r\265\016A\347\3131?\317xb\243\232\3740?\313`\236+\320B0?\024&3\256\035d0?\361\257\3741a\277-?\2206+.\320\346/?\220z\272\200\270\'/?\266\365\243F\300\237,?\003\216\346\303\021v*?@\322\005\307\365\207\'?\256\272Zc\332{$?\004\275\242!\004`#?\317\353\272}w\247\"?\025^\010\215\356\215\"?M\n\257\001j\232\"?a\354\352y*\354!?\274\3737\275\370\223\"?`\273\3227\013\251\"?%?zt7\020!?\022\353\272\333\350\250\"?t\350\333\037{\377\'?\342\336l\333F\3573?V\304\261z\374\3508?s\031\331\303\316|=?\n\221_\201\340\330@?\022\266\024\232h\263A?V-D\342y\004B?z\235y\3362LB?\241$\0135\226\362B?\247\177XU\200\006C?\\=\013h@\302B?Us\363l\332\265B?\203o\360>\364\310B?\303A\214!J\3050?\0107\257p\346\345-?N\321a#\350\346-?IB\033\263\376,,?c\004\025\324>\275,?\215]\024\320S\003.?\227\221m%\3434.?\231Z\024H\031\t.?\234\226\272\214\344\360.?\034\224\242(\337R/?2\351\335\3024\270/?\201\262\003\220\325\0130?\014Q\234\3338\355/?\345o\214\256\034k0?\215y\t\215\341c0?*q\265\377\025\2721?\244\263\3571(84?\324B\006H\355\2536?.\325\232 \31107?\323\216\246p\300\2137?\265\355j\250\007\2737?\301\331\246\253M\3716?\302{b+\325\3660?\270\304\'#\202\377*?\236\325\346%\035\352)?\252\245\237\301\275j)?\214Z\275j5\211)?\315\305c/\251\024*?\343\315\252g\362\341*?\203#]@#i+?YF\302u\307\215+?\242\307n\355\344\326+?\317\232\367\266\233\013,?\355g\033\371h\343+?\273\213tb\2664,?\377O\230\014\324\035,?\027\324\221\005G\'-?\366\202\204e\302\350/?\255\270fb\"\364/?Z!\2647[\355/?[\232\220\023|\214/?n\274\212x*a/?\345\233\264C\330\375.?[\305\374\213\211\225-?.Q2C\'\247-?\310T\243RJ\332-?s\002\337\334{\222-?\373T,\266\375\266-?J\220\213\026\022\303-?\350\255\032\201\001O-?\007*\307\2128\242-?\215\316\352\376`\311-?\266\313\344\2773\346-?\277\257s\316\255\342-?ap\273:AG-?\262\026b\237G_-?~\345\016\211\345\020-?\001\237\265ah\003-?\372\22482\\\013-?\3526\265\'\331\316-?\271\267\300\275\351\230.?\033\023\016/\033\254.?\374*m/q\375.?O\210\360\227e;.?\321N\177V\226q.?n\211\345ads,?\322ft\276\332|,?\202\373\367\234\230N+?\311\274\341\200\216=(?<\016\232\225\241\2658?-N\\^\036\n=?r1\'\344Z\037<?\275\262\262M\217EA?\257X\000\251\006\307@?\370#\306\344m\242??\302\336\330t\203\357=?K\207\315N\246\324<?\233a\354\202\226\265:?Tr\346\010-\254:?\317V5s\016\2777?7\005\030\347\206\3366?r\247S\242\025\2556?\241\256\312\222\364\3016?\306^Z\232|/5?\243\256\277i\035\3744?\302]\220\t\005`4?(u\234\267\276\0034?qV[\351iK3?\272q\360$\240\3042?\326\3357\034h\3162?\260]\235\r@=2?,\363\2352\023\0311?\360\375\301Kfx0?g\326\357\025\037\227/?\177!g>@\'/?A\307y\305t\235-?f\027\251\203\376:.?\225\332\220!\365\016/?\222\315Z\254\326\371/?L\277\373\345\276\225/?\211\306\226\302\334\036/?\nJC \246c/?GA\222\207\365\2560?\025\023n\016\344\2241?\335\215\330\003\272\3522?\353\325\300\211\372\2722?\234\265\336\346\302\2052?\231\240I\014I\0003?\312\311\226u\227u3?\356\305\037^:Z3?\205\250\300\236\266\0233?w\243\272y\33543??\022\221\302>\3772?[\306\234S\010e3?\276E\314\221:\2463?\304\314Z\344\200X4?B2f\020\364W5?v\205\350W\r\2366?~\306\333\003\332A8?\260\362W\ny\3539?\331\223tX\327$<?\327N\352\204\375\302>?W\242+\222(\024??\373\346\335\334\210\274??\371\321\357I\307\237??|;\301\262]\227=?\320\006\223\364\306\317:?\370\0376\344\34156?\301\327\313G6}4?\357ps\336\212\2722?d@\337\336\201v1?o\213\200\252\324c0?W\230\031\221\203m/?\026d\0329J\337-?\020\202\002\255\310\001.?T\276\007\262\025i/?tn\323\322\356\355,?|@J3\260j-?\332\236\002[\203\311-?\200eu\020\023\213*?\322\352\017\215!\022+?wz\\V\214\263,?\227@\366\354L\260.?\030s+\022\200p/?flU\003\256\332.?\026#\340JU^+?l\014S\276\024\334\'?f:]\336h<+?\233\317\341\243\303\0308?3.\301NV\261=?\3156\273\336\313\267=?\212\005\235\224r\214>?-dP\233\250\r=?\301\t\236\245\330\217<?>\016\302]o\373;?\034$\370j=\377:?\311\354W\372\003\3679?o\261\027\024J\2027?\255\303\030+Fj5?5*\177\335:\0263?\256g\257\016\345\3431?\nkh\245>\0001?\001\231\361D}\2030?LJ\273}\310\3561?\205o>\316d\2321?\230@\017\212\355\2730?\232\231\214o\227\0310?,laq\223\254.?aYs\304}\213.?,\340\r\205\251\017/?\322-sn\236\340.?\371\230myu&.?\203Hm\177\272\303.?g\230=}\302\341.?\236\216\002oA\351-?\337\272I\251\327o.?9\313C\336&g.?\306\257\336\374\0244.?\021\032\221\215\337\222.?)O\273\300.\210-?Ph\221\241\356\371-?\205\252Ot\210x.?\213\021\177\320W\351.?l\271\264\223!\304.?)\354+\332\337\203.??\223X\255\247\261\010?\212\243a\347\\@\016?;\235\032\036\261\314\021?\303\254\006\027\341\334\025?o\\k\224\232\342\026?M\311(\205/\002\031?\225\344o1\365\251\031?_\2743\233F\341\032?\270\266\222KSl\033?\271<W\r\"O\033?\263m\266\221io\033?n\372\t \342\n\033?\306\333E\366\023^\032?\330\357\252\203\223\237\032?\271\277E\352\347\224\032?;\336V\r\321\007\034?\300l\337\374\266\302\034?\221\254\177\264X\272\035?\273im\371\314\202\036?\271\\7\204\256m\037?\"\211\177T\232\377\035?\035\215\227\374\274\232\035?\322\357?U,N\032?\013\310M\303\246\204\026?\267w\262@`\212\027?\222\343\363/\356\253\027?\327\375\276\332\254U\026?\315\325\240yJ\030\027?\210\307\217B\243\205\025?\013\310M\303\246\204\026?\201\254\247V_]\025?\363u\031\376\323\r\024?;\235\032\036\261\314\021?\215\355\265\240\367\306\020?\223\010\236\214;\357\020?\032#\310\367{\030\020?!>\260\343\277@\020?\271`\272Z8Z\017?T\314\234\211D\374\016?h\035UM\020u\017?\244K\244\331\341T\020?mg\251\006\253\373\021?#?,\345\306>\022?\334\027+\305\351\177\024?\377\236\263`=I\025?\313\310j\004,\003\030?\276\222\232,\244\262\027?\231\376\333\0332\324\027?\203\255#Xf[\027?\305\255\202\030\350\332\027?=\222\334\253\240\263\026?\265v6?Y\214\025?}\236\365\3379J\024?\006\306U\300\230\210\022?\262\201t\261i\245\020?T\010?\314\271o\020?&\020\300\027p\340\017?\235\364\031\253(\271\016?\367Rg\244\224\306\016?T\314\234\211D\374\016?\035\364[*%\272\r?|m\221\017\325\357\r?X\026\361B\337\202\021?\210\323I\266\272\234\022?1u\374\274N\217\022?\264\202\360\262p\243\022?\320\356\220b\200D\023?\377\236\263`=I\025?a&\233\274\022\222\026?\003\255e\327b\\\026?\375\356\270\t@\241S?\225\r\003G\026\361L?\302[\374zy\222H?66\'n\226DF?\205S\201\2735\256D?\027\374.S0\266B?GNzm\243\362@?\260\367,\031\021\326@?f\003\225cE\034A?\307\223\315\352W\031A?bzSu\2653A?j`PK\030rA?\346\021\350\273w\256A?}G\307\264\272\305A?\"!\331B\341\312A?.\257pS\202LB?\242\304\344\226!QB?^\200\224\020`\034B?;\342jF\001\000B?\312\003Y\233;\004B?5\337\344^0\035B?\013u5\322\202\262A?k};\320\335\212A?n\\\326/\236bA?5\234\251E\201\224A?\"\206/\251`\250A?f\343\216%\026rA?^\333\304\221S\260@?C\365A\\Z\211@?8\205\375\355\236{@?3\335b\263`8@?m<\274\r\210\025@?^\371\\\010\232\030@?\311\357e\211k\010@?8\306l\316c\302??\270\200\031Q\257\233??\004\254\023\237T^??;]C\224\">??b\262Ibo\200>?\224\344IjR\036>?w\026\307\305t\310=?\002\344\031n\237\331>?\305Y\336C,\334>?\357$a`\3177??E\224\025\024\035\001@?\325\244\372\037wI@?\230\237tR\372j@?kW\353;\364\032A?P\241\362cWPD?\364+.ru\036J?\3218DD\200\277G?\255\336\002\205Q{G?\370p\255\034x\272E?]\363\262?\263\230F?Fs\343d\202\344D?}zl\313\200\263D?e\323Q\333tnD?!g\234\261(\037D?\252\217\275g\357OC?\026Fa\264\032TC?H\216\256\261\317\214C?\"6yF2\026C?e$\265/$PB?z\247\213\337\327\362A?\177sVv\2075A?\006_\306\204\000/??\006\356M\307\364h@?2\215\361$\223\232@?\206\316\361%\342\032@?\006~\037\321\256\211??\326\204\233)\000\010@?D\314\326\016\007\210@?\253q_\2342\026A?\027}\257h\r\272A?I^88Z\323A?\326S>\023\200\320A?\350F\334\214huA?\274N\t\331\220\267@?\022\241t\226\027h@?\220&-Hrz@?3\n\252\217\205\275@?A\241\364>\273g@?j7*\322%e@?\255:\255\006!S@?\353\033Q\007\235\003@?a\227%]\332@??\003\344g\375\017\253=?\211\321\374\374\272}=?\334\003m\245\351I??\217\0006l\320\241@?<7eU!qA?\004\035\\#J\307A?\215\211y\310\'sB?m\263]\023e~D?\245\353\376\273\202\220C?n\235\267eKLC?\244s<n\021{E?\333\322\264\325\366\300H?\271\377QfF\351I?dBZ\320l8K?/\220\313x\216\332J?y{k\273dwL?\017c\002\031b>N?\263\364\250\305\316~N?\025\227R\263\341\222N?v3\262J:\341M?47`\t\0047K?]\366\341\334\003\315G?\337\311\327\000\315iD?Y\366\376\350\226{C?\341\021\221q\367\377B?\245\021\342\263=\306A?\014\033\000\322\200?A?3\036\211\275n\026A?\013K\t\257\307\276@?|#*\274\032\214@?\002c\236\021|>@?\240\377S\256F/@?*y\000\201\212\207@?b\206z\205\373\204@?`\035\241H\362\272@?\201\213_\302\262\343@?\265d\353\237\373\000A?\3604}\234\207\030A?$\016\tz\3205A?\005\235C+\215\036C?\360c\263\300\252\274E?{\251z\'\326\021F?Z\035}\357\026\030G?\232\001\345\361\337|M?\317C\267\250`\236O?{\303fHaSQ?\326\321\006\232\256\253R?\336+\377\311\373\022S?\007\350\204\361O\200S?\367\211\001\347\314CT?\263e\301\020\256\212T?\206]Dv\006\217T?y1\350\022{YT?\225\345\3511\321\355S?\346\n\255V?\231S?\227X#\377\357/R?\320\366x\2719\251P?j\202>\027a\030M?\273\n\233\224\221\231L?\351\260\203\311\333\261K?\240\346Q\342T\032J?\207\344\255\270\r\252J?]\355\257\276\204\201L?!\307\343]\206\343O?\330O\200\332\010\301S?4\353>`\033zV?]j\204~\246^W?\312\307\002\347\013\250W?\212\255\216\206\315\254W?\270\230 \234\257\217W?M\n\211:\307\016W?\225\243+\321\214WV?\333c\313\355\274_U?s\305/6Y\025T?\302\243\203\261b\021S?\226ET\355B\217R?:=\272\324\262\374S?@Z\020\210\337fT?\004\217\232ow\350Q?PG\251\177n:R?\010\207N7\237&R?k\351\222\360\013OR?\335V\316l\304\204R?\201F-\360\274$S?A\001\210y^CS?T\322b\247Z6S?\265DH\214\207\277R?g\301$\222qWR?Grf\254\027\362Q?\0006l\320\241PR?\3473\r{\273\324Q?q\376\177\314iwQ?\365:w\365\t$Q?AT\000\335\256\317P?\344U\025\233\010{P?\267=<\251\001\023P?\365\010\216\373\361\277N?\243b\205#\2243N?\224\"\374\002\257\323N?\344H\273_r\224M?|R(6\337\273O?\017t$\377\342\005P?\275\022v\301H~P?\"A\206\310\310\335P?\351K\014Us\261P?\207\300\\N\263\207P?C\211\364\255\237\226P?\2554\274h\256$P?\t\355\237\036\020%P?UT-\204\375 P?\352\261\300f\237\030P?\337\037\010\363\313\036P?W\261\201?\277\231O?\340;\336\242\233\026O?\221\376\020{\236\310N?\007M\374e\270\200N?!+ 6V7N?8\211g\'\210\\N?\341l\366\344\272YN?\370\300\027\361`5M?gq,\023q\177M?\246\343g\254\310\253M?\260@@3\222\201O?\347\000.\271k\270Q?]\324\342\344b2S?\274\000\221\0045\nV?\235\364\216\270\237\nZ?\264y5\243\223cZ?]j.~\355u_?10\341\206\316!_?Fee)\311\242_?\2737Y\177X*`?\367\376\212%zS`?\303\336E\021\262)`?\246\355\234\274\201/`?\242\020\277j~_`?\343\035\250\237\254\"`?\014\t1\372~(`?y\000\230&\375\241_?B\'\252\325\\\020_?8ia\351X\262^?\244\232\236\037b]^?MR;\361\014\202]?k\016\352\004/X\\?p\027\377\026\033\365[?\264\234j~\023B[?\231\326\355\206I\305Z?\370O\312\263\261cZ?\351\271\205\256D\240Z?`G\201\335g\227Z?L\363T\250\352\365Y?{\350d\244<\305Z?p\354\033\220k\340Z?\271_)\276\346\304Z?<\202\237a\377\257Y?\267!\025\2622\233Y?\311\274N\035\275wZ?\340:M\006J\201Z?\354\277\316M\233qZ?\"t\031\374\322\342Y?\005&\3033\231\330Y?\234o(\242}\261Y?\361\230\320\020\315\275Y?J\270o9\207\000Z?)\336\274\311S|Z?JB\020\212\'gZ?\323\356/9\360\225Y?\331+3r\004\023Y?.\367\"\n\310\277X?\303D\263MR\342X?\0067.\360\320\010Z?\236\366\2559\264\206Z?\210\365g\273\031\240Z?\270jK\333\307#[?\301(\224\307\313\201[?\240J^\201\016\021\\?\305|\246\202}\200]?7W\346\020\345\311]?X\337tV\001z^?\2238\242\260\310\005`?U\025\316\371\037\034`?o\360\307\345&\007_?\204,\352\027\025\006_?\363\003\243\007Hx^?\345\203\371\206\035!^?f\260\213\235N\204]?\035O\345c`\345\\?\347\302\234.\370%\\?l\237\036sOk[?\225\357Lzu\024[?r\235`\256.oZ?\344\000\'\377\206\225Y?\006\263%\205[9Y?\241\257\356\222\027\035Y?T\317z\337\225\260X?\200\"\327\314\250\231X?\333\313\275\215\273\253X?\251*\244d\210OY?R\033~2$\371Z?\020T\215^\rPZ?B\000fzf\242X?\274\277:\301\020\317X?\274\030j\027J[Y?\013\034a5\274wY?\333\031\314}w\315Y?\336G\311\006-\177Y?\2477\333\220\nYY?\344\347\r\227\037/Y?\000z\245\"\321\250Y?Z\361\274=\320VZ?\345#\\\332\006tZ?\257\377\230\250n\306Z?\312\036\212\312\322\303Z?\225\276)\017\177\013Z?\206RAf\343\230G?\311\027\022\002\202\321F?`\235:\301\304@C?+\216G\314\223;A?\254\343D0\030\240@?\242 P\264\255\221=?\221X\200&*j<?\246\375\266\367\016V:?\351\302\207\223\255\2169?\271\220\325\032;\3028?\200W\255G?\3545?\351g$!\025\3575?\237f7\351l\2673?AKa\"\001J3?\243r\016\374zN2?gt&\276\361\3551?~\235n\265[\2060?\330\304b\321\375g0?=\340J\016\211\2170?A39\311\02730?\264L+*\207\273/?u\224\336\222wi.?\177\241\361\213\345r0?`\342\275\332\271\177(?a*\320\003,\255\'?A\351\200.^O+?\307\376z\321\223<+?\356\305\371\226\227\316\'?M\314\260\332\307\315*?\264\352\025D\024\373*?\017\340\222\273\206\033+?|\357\322\372\031\346-?d\215\323@\216\0161?\340J\023BIy4?\314\230MC\376\3406?\017+\254\271{78?V!\275_\007\3719?\206\207\301\340\300\002=?3u\177>\217&>?\030oO\203\256\354>?%\317\251\357\3620A?\337s\021\363m@B?N\353\020\341ZKC?[\217\317\037+\334X?\022\344\247>~\331W?*\326\253\363h\335X?\337\324+X\357\337X?\27436\033\373\367X?\261\272\226\017\217dY?\332\006\363\371V[Y?\2139O\017\346\203Y?\323\317\326\354A;Y?}8\246\371\363\005^?\2239O\242IU_?W\246\244\366>/^?\341\376\177Cx\031]?\232s?\223<XX?\374c\236\270\303\366X?yME\263}\213X?6\374\275\000:MX?m\252w\203+JP?\2424R\361\252\307P?\210C\006W\030\331P?\302\260\376\372\341\032Q?\265\033\311ZM\033Q?Y\277\340m\272rQ?\026\226\027\027I\346Q?\254\243\233\336t\264R?J\223\2173\006\003S?\370\273)E(?T?Q\025\237wm\263T?\234\277qh}\tV?\246\360\022/^\022X?*G\226\006]FZ?<\350\031\310\241\350[?=B\000\202\317\225\\?\203\223\232a\226\202]?+3.\347\025\371\\?s|h\252\035\201\\?\203\256\252\202D\037[?\r\375i\\e\221Y?\246$\237\342.~W?\222\310\200\344\204\246X?Hlw\017\320}Y?\373KF&\304\202Y?\247m\313\231P5X?\340\"/\037\324;X?\352Dp\306\252\355X?g\304\232\004N:Z?\t~\247\013\251\211[?U\231\250,\252H\\?\317\305\213\367vZ]?\216\020\026\374\323\231]?\323\310\271\335c\232]?\231H\362\'\355\267]?B5\346\364C\014^?\361\'\324\032\035l^?\027<p\301^\320^?1\361\201\374\360\034_?\226\'6=-\341^?e\347\2254D\352]?\363O}\333\244\206\\?\266i<v\357_[?\245\205\313*l\006X?\371cv\360\365\260U?\\m\036\267\372\022S?\250\236\365\276+aQ?\357\t\344\242\362`O?q\355\360I\272uM?\312on\237\227\202L?\356\224\t\035F\321K??J\006/\343nL?#\256\311>\273\210N?\264e\223\330\302\347O?\r\313\215\214O\255P?\276\r\367\262i|Q?\276z\0057\214aR?B\331\323\217\377bS?V\016X2\372\343S?d\3212Z`\362S?\030W\326\342\305UT?\301\006(3\374\254T?5A\215\250t\243T?#O\234 \rNT?\254\202Ag\014RT?\262\252`\177\322\203T?\354\234\265\307JMT?\'\021\375\2643GT?\323=_q@dT?\362P\331\205&VT?\311\303\376\217l\336S?\325a\231?%5T?\362}\307\251\003DT?d\214\223\353;\371S?\332\231\261\204\217jS?\nr}C\324\211S?\246\003a\300\365\325S?\304b{\375\256\247T?\253\333\277\003\032\244T?Q\022zL\220PT?\251c\206\247\006\203S?\232\027\033K<\306S?n\275 \3165_T?\361\375L>\357&U?\014\001\273\370\255fU?1;\235\301eiU?\216\333\036sT$U?\273\257\266\241\343\034U?\024\306?\001N\316T?\030\203\r\243\256\"T?\030\001s\377!\225S?\001\030\324Y[\350R?\260\000\246\014\034\320R?\231\221\363^\262zR?\245\345\252\363T\371Q?2fMWprQ?>\230\220\346\372\004Q?)\351\037L\243,P?\365Z${\3616P?~\252V\233\t\312P?:_h\205T\027Q?[\212\365W\331\210Q?\017\346\305u\313\217Q?\\\217/\222W\226Q?y\361P\244\223VP?\201\256\"HJ\037O?\227\224\210\336L\306M?\220\013>5\255\000N?\355G\333\017\260\nO?\251,\366\326A\327N?\247&^\361\026@O?h\267\257f\021HQ?\372\266\225\233\376\245R?\332\211\244s\004\304R?Q\357:\377\234\240R?H\024\270G\377cR?T\267\333w\n\216R?G\343FM\230\211R?\271\n,\3677\245R?;\2663\206\0303R?\337_\213}\314~R?\275\351\306V\370|R?d\2156kIwR?)\316\017+\365\217R?G\244\347\302\272\204R?_\356\000@/\213R?\262\246!\306E\227R?W\264\030\300\204\237R?\253Z\310\337\232\224R?\037$\246l\332\212R?\303\270g\322\260\\R?\311p\266e2\257R?\321\013#/\376\305R?\033\037cwL\240R?\307.\332\256\223\244R?\305\367w\026\272\233R?}uv\256\377\245R?\035\342\311\265;\200R?XcH\317\246\203R?\202K]\270\307`R?V\020\274\207oTS?\222\203V\203\327\376c?\300l^|\241\345X?,\223+\006Y`Y?\211\316\007\013\364wY?\322 \247\335\037WY?\253\013\255\2131iY?\177\324\204\277\357wY?\271\014:L\364,Z?\241}\201`[-Z?E\030\360F\247-\\?\204\362\260\343\316k]?\333\3407\312ik^?\020k\304\250x\027`?\325\037\013\030\367\373b?\245\334\032d\324\255e?]\271\341\356\341\317f?\320\311*#0\001h?\244<\014\020y\211i?k@\0038]\031k?\204\361\357\rgyl?\3041o..\360m?\006\337\367\031^\343o?\232\350L\n\216\363p?\317\336(\230\202Lr?`\017\322\3059\371s?\nQ\322\204l\247u?\275l\231\336\216\010w?\317,\275\301\r\264w?\273\005\207!\266\027x?\2518\217<p\313x?\211\025kA\272\233y?\240\204n6#qy?\371\360H\226u\372w?\305\3766\264\226<u?@\312i\376\201:q?w!2\271\014\220l?p\321\330}\0308h?\376\344\004z\234\372d?Z#\217\233rib?\256d\205*N\030a?\266}\234$\356\225_?\373\000\220R\212\317]?-m\371\307\311d[?\346\362LS\367\r[?M~\242\352\013\254Y?\026\327+>\233\333X?\037\271\337\350\375[V?\254\n\271\304$kS?\350\013\274\273\027]S?Tn\2712\\\250R?>\374\234\205\264\373R?\324\254\025h\325\271R?|3K\261\214\325R?Z\264z3\334\023S?\nRm\2231\016S?p\004#\333k\324R?\233`\344\327\242\024S?@|!c<\352R?xH\316\025\347\240R? \307U\263n\206R?\220\024)~\240\235R?u\201\213H&=R?\026\000\367\375\032\227Q?\273\231\362\235ovQ?qW\245\260/2Q?\253\247Y\027\354\303P?{\235\026\264w\343P?E\003\234\321\233\371Q??P9\351\'\343R?{M\303{\004\272S?\336\332\221\003\331_T?\032`\235eA!U?\001\023\033\240\362\267V?\210\316\351\264\231\003W?\277\235\261 \256KV?\371\351\211\370\230YU?\322\330a\303\010\036U?Z1\226\310\211\237T?dcw\344\274\275S?\226\004\352\3057\261S?\231\333\326y\310RS?\363\010\262\301i\221R?3\005\2049\356RR?\003\275\216=\035\275Q?\333\236~\"\337=Q?5bz\203\256\313P?\233\237\326\305Q\337P?\372\213\367\350\257\205P?u\233=\276\'PP?\201A(\250\016\335O?\032\'F\025L\234O?_.L \321vO?\216\322\337*\323XP?\001y\322i\255\315N?\001\033\301\332\331\326M?\377\215J\2450\323L?B?\225\313-JL?\204\334Y|\211\377K?\363\0036k\031>L?\325SK=\202PK?(pZ\014\370\336J?\343\205+\242QzI? \225~\234\022\013J?\025h\034\217\276\356I?\305\237\001%\240\352I?\370A+j\017\377I?\301\365Q\333\300\374I?\017Z\034\211(\nJ?7\275rZC\353I?\341\302\034eF=I?\372b@\r\027mI?\010\244\212\003d\277I?Y\2604\300j\004I?\000p\330\365\214\366H?i1\200\t?\345F?\337\201\200\003\372GF?\354;\354\251\310-E?\016\010w\336\373XG?r\004_\207 \275G?\330\0068\316\267OH?6\337\322{t4H?\265\306\306\332\344\222H?\272\377\237\365\266\272H?\251\366\264\206\374zH?\017\023\005\341\247\375H?\273\246+\313\034:I?\2143\300\344\312\311I?E\313\335\216@!J?6\232\2267\013\244I?7\351\237\250\270\346H?x6\232\022\377fH?c\210\352M\017\201H?\255\251\311\337\377\277H?\007$\243\373 hH?\240Q\205\002`\203H?l\360(\017\267\265H?v\311=\377k\260H?&\027\027\322\327\257H?\345kd\221\005\320H?\026G\374\302\337\272H?\2440\202\325w\317H?E5d\275\312:I?\262\'L\333i\262I?\314H\253\304\266\361I?\211\275\2602\243\352J?\002\220\255CBOK?i\212\211\230\325\345K?C4\326\330\007TM?rb^38\313N?~\343k\317,\tP?L\363\226\304\274;P?\212\0307\264OgQ?\261\231\210&l\031R?s\013#\336\266\306R?38\320\227l\251T?\320\351\327\250\027\024W?O\210 \321{\230Z?\220 \030\344\207z\\?\232\2345\323\030\010]?5\262\027I<R]?\375\205\247\"\330b^?f\005B\217q\365^?\031_\375\235\302Q_?\000\030X\222\377s_?#\017\261\262\227\034`?\022\313G\001\213\304`?\341\351\310\243\261|a?\357\264\0021s\373a?#\273\206\244\014\330b?\025\030\020,\327sc?\373]\177\342e%d?\001L\322b\024\367d?D\017\230a\205Ve?x\303\350\177\332$f?\364?8 \273kf?\346E\261\322`\367f?B\007N\227t}g?\024R\017\265\223\337g?\213\210\372\016\222\306g? \371\004\002\375\273g?\302!\310\377\354`g?\337}\007\237\343,g?0\301qe\305zg?\300\223\002J\304\rh?\377\203\250\370H\025h?W/\233\r\355\364g?\324l7$b\010h?\356\207Qp\256\352g?\201\247\332\270\017\212g? \223\2438\373\216g?W E`Vog?SJ\005\236F\035g?\304\026\246\342\013\002g?\354\344\222\376\354\264f?\014/\276\361\200uf?\334\202\332\254P]f?@4\201\217\262_f?\r\327\373q!\255f?\315b\004\202pmg?\322.\343\374\006Sh?\322\020\244>\010\202i?vItM\203\315i?.\241{\t\'\377i?\024\0268\200N\246i?ouE\230\276\261i?\224\256\330\340\366dk?\264U\031+\t\007m?\225\326\257\331i\"n?\305\033\212\034\321&o?\264\277o }\303o?{\263\000\177\216\025p?\224\224Gy\336tp?\345O\325\266\301\206p?\210,\261\266R\235p?\241\340\004\324\013\246p?\354~C\030\247pp?},\347\314\"\206p?8\034&\262\300kp?qnF\337:\205p?\020Lu\316=\216p?O\016 \3657\236p?1 \227\022+\236p?b[\246)y\252p?\233\212E\355-\316p?\177d\252\3107\307p?\267\004\200-&kq?L\377\307Fv^p?\270\211\021\304\244\270m?\313\037\367\240\254\207k?\035 \276jj{i?\270{5\027\352vg?\302|\370\200\340\364e?\371\361\324y\r\'d?X\345\211\272\353yb?\331tS\266\207>a?\2712x\375!\264`?\361\007\330Na\223_?\230\037\302<\207\331[?\247Us\007Q\301X?#R.\350\030\353V?\335\337}\256\346\233U?\216\205\273\217\260cT?\206P\003\330\020\264S?\351\333Y&\211FS?I\'\221\313\037\326R?\375\372\325\247\022!R?L\023\261\346\322\210Q?o\362\235\220\204\032Q?\212:\253\271gSQ?\253\342?=\263\255Q?F\230\254\316\215\220Q?_\276\343~\001iQ?\232`\320\363\273qQ?\263<\337\264\270}Q?E>\037\315\247zQ?\316s2\333\217\300Q?\337\020\037\342c\323Q?\000\204\027\226\242\tR?\362\210\324+\232\013R?m\304\252yB:R?\312\201+\224\335\260S?\264\004\225\310p\002T?\266\253 \236\326\201T?0\273R\217g\251R?\016\206\356\035+\264P?\340$B-J,P?]j.~\355uO?\026\335\301\"\233\270P?\310\334\003\024\355\241R?\371\3526\352\031\251T?7\325\360\263\345\352T?\025\265@*\341\343U?e\277Btu\270W?\027d\373+\214vZ?Fk\337\270\231\305\\?c\267\215\016a__?\035\367\362\252\352\277`?\231Y2d\310\363a?X\274|\336\231xc?\2601\330\242?\023e?s\004\001\026\037\275f?)\003\213\354\030\221g?x\344\022\276,*h?EBB1\005\255h?\207\334?(\205\377h?%oA5\254Ij?\363\261\251]\215\230k?\027\000\311\305/\364l?\333\320\215\343\231-o?W=\344V\326pp?\034q\211\242\216.q?\376\261\013dH\336q?\346hSJ\017\020r?\220 \377F\347nr?T\210\204E\376\306r?\236qQ\225\005\377r?\300\3223\234\266os?\361\254\303\"\235\271s?3,D\\@5t?L\276~-T\243t?\222\035\002\344\327Qu?\254r\367\362h\316u?\030\245N\267!\003w?bY\342a\327\177x?s\363g!\374\351y?^\303{*\201vz?-\005~6m${?{N&\340j\254{?\353\003\316\364@\233|?\"q\277\336%\272|?Ur\256^\3167}?\037\347z\376[\231}?\2602\231x\247\005~?m\204i\013\024 ~?\2051u\231\222\223~?4\337\271\336\323(~?\234\'\350@ \341}?\372\034\023\272/\215}?5\251\255\200^\222|?\0331\355z\355\302|?\202\007.\330\013\332{?\327Ebf\305\216{?%?\342W\254\341z?\006e,0\352\256z?J\315`\204\327\313z?\000\247Lq\"\350z?\230rI\313\004\240z?\305\205;\313\2674z?_\272]\360\350\315x?lSjf\225\350x?+\204\325X\302\332x?Y\346\330:k\311x?\370V^\3211\020y?\005\350\025T\366\213y?XV\014\352j\021z?\224y\210\237/Xz?\332\217:X\004\241z?:\367\373\036%\021z?\271R\336\255}\030y?\220f9\304\320\316w?\232*\013k\322\211v?\230\306>\347\277\036s?T\0053>}\030r?\270\021\271Z\323.q?\017\210\245\273\312^o?!<\313\r5\363l?\324\231\234V\341\001k?\301j\260\231\021\030j?Y=X\255\351\315j?\026?|O\233\'m?\036@E)\257\002m?\001\221\241\nOMq?f\327v@\375Zs?t\t\037\373m\020t?\3058^\005!\356t?\251\302\256\014\373Tu?@+\306\177\325\037v?#\363\031g\013\274v?\371\250\037\321\215{v?B\377\225y\321uv?\205\262\002\331q\027w?\275\232\217\255_\227v?]\035r\306?Ru?P\312U@b:s?\256\003\006\232\346Uq?\265U7\201c{o?\370\005c`\367\377l?@\000\200\316j\242k?@\340e\254TUj?\271\242K:\365Ai?\275MEK\232\026g?\236s\340j\327cf?\246\237\332Z\013%f?=\254\024[q\014i?x\334>KZhl?{\003\037\3051yp?D\370\313\262\035\017r?\036\362}\016\177\217r?\313\213:\335\363\250r?G2\t\351\271\035s?\036\307\261#E\314s?tdW\355\251\273s?\202\340z\337\273ws?d\241u\013_\212s?\265\303\030\276\251;s?7\354\323\376\302\203r?\0236H0\361!r?\370\016\242\250x\313q?\307\245\231\n\313\201q?}6\022kh8r?\375\347pz\005\014t?t`/\320\222 t?\373\324\244 \347\031u?\331\272{P\265\265t?\232\211\010Pjgt?\027\312\032\331\273]t?\335\006\035\303O[t?\250\262\353\210\212\013t?j\246\023\272_\306s?`m,+\304Xs?\341U\3245\232)s?\033\331\021^\355\356r?\341\300\014\017_\373q?\026\302\232ew\312p?vd=\231\245\273p?\177me\330\024\007q?\372\003{\322\335\003q?G\266\360EF\312p?P\250\276+6qp?\234+,\263f6p?\345yJ\2603\343o?H\375FR\nno?\r\272\\{\241\253m?}y\025\332\270Lm?\246\347\326\236k\365k?6\025D\005\320\355j?d\365\266\265_ c?\315^\353\217\206\014a?\235\247t\217\360\346^?\311}\265\347UD]?\377\0006\343\336C\\?\315fa\221W\316[?\004\375\tW\325\005[?=\214l\216CbZ?\333)\317\034\217\242Y?s\237\034\005\210\202Y?)\244\026\371\336\247V?Gke\362h\013Q?\361\272\317\010nXN?\021\035\322\r\354\257I?\343-\2120\333\324D?\270\361\010\035]mA?\202C=\267\257\207??4\254&\253\311#=?\371(\303\273\323\3229?\310\312\317\020\005h8?n\316\356\264(\3705?_n7\216F\2503?0\364g\303\212\3501?\334\374ay\307\221-?\005<\020)ks*?\003\335\202\230\220~\'?\2272\255\243c4&?\316:\t\303\205\336 ?\343\234\023\246\350{\037?\356\205 \014\336\205\035?\001\206,\245C\264!?\313\353\237\337\253\341(?\210\0272\301\352t2?\313\303\024u~;=?\'#x\215\247/E?\350{\0252\2720P?j\033G\370S\355W?\216\013\377\320ii`?HFMB\211\231d?\274\212\374b\005\253i?~I\014\375q\315m?\265,%\354W\021p?\217-}H\365&q?z\342nM\020.r?&p]\304\206\215s?r\242\007\205\333\266t?R\020\033\260\324Hu?<\377\321\222\"\215u?\235\355\2757\007\201u?\020\203Y\236\220hu?\023@,\371\252%u?3\306\226\004\371\360t?\010\325\306\013\373\323t?i\211\213_U\026u?C0\341\254\225\304r?y\002\224\230\375@m?J\n\'\307o\232f?\350\206\355\301\2002a?\302\010\276\302\2624X?\201\232\277\341\274:R?i\032\315\367w\251M?\3013\227\327\356wH?\230c\036\236\312\016F?i\320?\335\032\272D?\353L\210Vz\257B?\266M\005\235\217\271B?\340\243.\264\233bC?\233\304S\241\027t6?\236+\034\321\325\007v?\010\035\007mX\244x?\333\324\023r\262\310w?\243^\275x\251Rw?7\367,\017\237bw?\300]\245\244O\367v?\300j\222C\267\243w?\256\353\226kq\220w?\006\thZ\026\327v?\277$\322\214\376\375u?!\203\211\375mhu?Tw\341\336g\"u?\027\233\303\246\257\226t?\027{]\366S2t?\035\177\353\210\030\266s?\251h\024\341\022\277s?M\314H\367R\374p?d\266\345\325\231xp?\252W,\246\033&o?kKHdRUn?\026J\373&\032\222m?\262>\275\320^\250l?\327\263\035\334h\303k?\250\361\347\350\254\247j?\353\336\035(\326\372i?\336\204k\203M|i?X\277\200\373\215\270h?\3546)~\354+h?\224Y\265R\245\271g?\237\353h\r\277Jg?\252\271\014\232\276 g?\001\205\255\353\255\007g?\032\357)a\357\303f?\201NR\252\216ff?\232G\2336%Qf?\350\n|f\305Gf?C6\363X\361\025f?\262\334\353\007\351\347e?\"\344h\000\002\345e?\302\226\022\332V\331e?\236z~\372\312\341e?\377\214Ll\260\003f?\027dz\253v\231f?\361\310\"\304\312\245g?\361s2\'\036\006i?\233:>C\000\274j?\372\332\177\331G\353k?\306g\020\361\237\006m?\037\374kI\254dn?9\306\030\317\325\223o?\371\322\253fu)p?\375o\314\202\356jp?\005\261\253J\324kp?BH%[\256\225p?\216\204\336d\031\267p?\0163_\036e\326p?O\336\021_7\266p?#q@_;\227p?\212\271\030\301\316fp?lk\302\370\224\\p?\253\360v\243\340@p?\236Ht\362\311Zp?T\242\335\002\270Bp?\366M<\225C\363o?x\342\365=Cho?e\201\341\"\030\203n?0\006\004\252\347\363m?a\370<\n\3151m?\316^\302\020U\322l?v\177\340\035%\036l?\003\277\272\3503\271k?sFZK}0k?\374\253\"7\036\307j?\315\003\021\017Laj?b\316\243J\343\003j?\"\366\251-\354\236i?8\203HQ*\213i?\223\305e+\033\025i?l\031\224\\\n\267h?\037\222\236E\226\234h?\335=\367 /dh?Z7Rt,\010h?]p\311\033\247\273g?Fr\362U\004\225g?\326\201\314\376\333\215g?\256\266N\233\362\232g?\254\344Bi\230og?e\013\205+G\230g?(\351\277\331vrg?\377X\312*Sig?(\252`O\231mg?\355\274\343\315G=g?\233\007\224s\200eg?=\031\261\211\253Ng?\333c\337\321\243\002g?\371|\355\311^\027g?\274Z|w\034 g?\017!2\325a\277f?\265Lr\377\022jf?\370#\r\272\371Pf?\2527\301<\006Yf?a\007\226o\362ef?H\247\210\265\363[f?\274>\352\344I(f?\314\327N\\\332\345e?D\303\256b\373\rf?N} y\347Pf?5\243\2048\215\357f?D+\215\036\023\267g?^\036G\200\216\347g?C\213\002\003\\\036h?\257Z\272\3764 h?F\255\204|=Ph?\253Z\261C%Ch?\376\334\327N\202\241h?(\035\010pJ\336h?2v\246\366@0i? \001\321\003\207fj?Z\022\216\303\332\304k?o\351\320\235\353\361n?v\273Oo\365\205p?\264t\230>Z\355p?\371\274pT_wq?9,=5\277\343q?<\270H\225\271\335q?\333\354\335Y\232\337q?\345t\323\022\235\370q?!\033\227]o\034r?\301}\330c\006Pr?s\031\016\266\236Br?\227\217\331\226Wgr?\237b\254\241\232\263r?!S\004Y\313tr?n\340>\r@\354r?l\262\222\313\211\272r?q\3276\270\271\240r?\274\013@\025\312\321r?\265J\215)\210\034s?j\335\020\'S\254r?/\302I\327\242\276r?7\241H\253\345\304r?\212\335\275*\267\267r?\242\351)\310\210qr?\"\021\326\243\311\365q?\340\320\264\364\003\177q?\353$\273\317z\303p?\3176\3314&,p?\020T\273\226\370\362n?\304\247z\336\377Zm?\247\24270G\374k?0\030\376\001F\377j?\201\311\300\023\020\031j?\330\026J\230\374^i?vb \031\274\371g?\205\305{\352e\317f?~\030\361\002\304\333e?(\030\257(\016he?\256\256.\232\332\301d?(\025\200\213\2753d?\031X\333\325*Hc?\351\306\276\333\361cb?\223\177\303\312\274\343a?O\002T\236d\236a?\355\370>;1\002b?KvK\366\370Rb?\310S\313\340l\226b?\275\305\356\373j c?\002\265\234t\360\206c?\201\023X\240\340\331c?Q|Y3b\001d?\220\266\330\212\211\017d?\215\007L\301\311\037d?e\365\300\'\323\361c?c\276\n\220k\272c?\200\347t\337\205;d?\246\241/\205S[d?m\021\270x\357\335c?\301\024dR\343\250c?\272?\3228\270\232c?rLD/\013<c?\010\226\251\235\357\024c?\307\022\253F|\025c?\'5|Wy\014c?\"\r\016\371\336\024c?\277\234\203\256\027\037c?*\251\200ls\022c?\027\236\200\356\027(c?-T;\031\325Oc?P\010\255\037L\236c?0LC\340\212\274c?\272\205\331\304\374\356c?\005\002\370\002\016\374c?#Q\005/<\'d?mn\271\353\206\034d?\207<.\034\233,d?\247\"k\306\317jd?S\350\010Uthd?$\312\353|\320\227d?\366\003\356\336)\233d?Tb\241MC\221d?\304o^*\243\202d?\260?mzn\246d?\026Y\223\360\202]d?\270\342}}\366!d?\266h\345\204\'\371c?\366X74\036\322c?`E\314@\363\246c?\302\214\216\203\311\217c?H\305\263\217\013\212c?w\210=\274\000^c?\245}CF\337[c?\255}U\274\376\025c?\334x\226qj\237b?v]\2564\337wb?\233\376T+\377\231b?U\345,\000Nnb?B\2356\006DXb?uXt\372`jb?\260\032lf\004\206b?lMA\036\304Ec?\216J\221L\354ye?e\316+\205\335\003f?\035\207\267\212\242`f?\'H \351\311\270f?\3349\270g\242wf?7\262\317\274L\257e?\244(\254azSe?\257K\362\373\265\367d?\333jn6jFe?S)\326\246:\257d?\215\237\337Z\232\031e?A@O\347\260\031e?\236\265\001\366\326be?XC\257-\246\023e?\037\252&\021\254md?\274C\020;\341\222d?\341\323\362\274\201\355c?\374\313\346X{+d?t\222\001.53d?\240\366\027\036T\022d?v\373\213$j7d?\334z\016\253\306\262c?\177\254\342\270L\200c?\027\2174\263\364sc?j\341\226\265kGc?W\003_\224J\277g?\377zC\351$\276g?\030E\341C!\263g?=]O\007\301\311g?7\n\377\330\332\261g?\265\250\3139\343\301g?\342\326\223\257\272\304g?u\\/{I\313g?\274\2501\257\220\252g?&\344\331\236\206\223g?\032]\352\217Lag?\217\363\231\024hug?\332\343_\255\325|g?{q!\020a\\g?\236\201\204m31g?\316Q\366\177\326Hg?G\333w\223\1770g?\024u\341eXUg?\317\320\027\371\367Dg?\3618B\217\343Jg?\224+\013\022\032Bg?S\320\035_\243.g?\016\321\300F\224!g?\027\375\2726\310\342f?8\374\013\220\252\036g?\363x\260~\231\023g?\245m\020n\261)g?\260Y\252\342\370gg?s8\360\363\252\221g?^1y\274\366\360h?\363\335\307\200\325Yi?\373\223\n\300\305\336i?\324\017\2671\340\246k?\362fw\302\367pl?\035D\022\215SLl?)\037\236\377\000fl?k\250\341\363t\302l?\204GN8Q\321l?D.\214\202M\216l?Z\350\035\203\"\321l??\375\270\024\217?l??\036v\266\262\nl?\276\267\240\371\307;j?|\222\212\262\366\370f?0\202\245>\271;e?\316\274$\347\'Ie?\026\241\\C>\"e?C\361IxYKe?\346\037R\023JMe?\035\346\022\341;>e?\014\363 h\305je?\236A_T4\321e?P\355\234\376\235\001f?K\346\360\372\340=f?9\311\204\317>\245f? \225\014G*hg?P\246F\362\331]g?\324\354\005\217\004Tg?U\0371B\304Bg?\232^PI\027Gg?\221)EIM]g?\237/\002\322\032]g?}uU\240\026\203g?/\242\035\322\320\210g?\027\2426\266F h?\245fw\227w\024h?\242\230\226:\3032h?\364\207\272\235\352\201\210?}z\350\222\334\'h?\270YO\274\351\347\210?\215\320\026\252w\305g?\254\246N\264it\210?t\367\316\242V\034g?\004B\324EV\363f?s\265\3552\376\250f?\035\33725vzo?vo67U\340l?B\377tk\350Rk?\215\201\177\216\262%k?\374\343\336xN\345j?8\267<\350o\310j?\201\207F\320\310\202j?h\3614)\235\371i?v/U;S\200i?\315\255\250r\3567i?\245\337\n\235\341Ji?\006\215.\251\271`i?\303\024\371\266\337(i?\031\302\374\330\316>i?\353\344S\232\251\035i?\221K\3152L\354h?0\225\230\026\336\255h?\035Gb8\215\243h?\231px\331`\365h?W\023\312\026\327ei?\016\333\365VM\245i?\331\r\357\372K\331i?n\353\263rK\205j?\374G~{\331\241j?J]\346\377K\325j?\212\207\016\271\315\337j?X\323\314\305\245Kk?J4\324j@kk?[\341\315\202\237$l?\346\207\0313\354\244l?\316\370\264F\341\323l?\020\341\023vG\202m?I~i\366\345qm?gq,\023q\177m?\233c\314\237g\232m?\353\226\207\306\277An?\206\035\366\335\325\364n?\300i,\'\302\002o? &\360mK\373n?M%\\\370\\\316n?Ge\007\270\307\242n?\246m\\\374\366@n?\327\327\030F\n\375m?97\221\214\341Yn?\370\374\276\354\217\021o?+t\024\326|Ko?\364\201\034H\242\215o?\301\2479y\221\tp?B\330\252\326\"\237p?\306\256\231\356\010\266p?\241\356\236d\364\241p?9p\307\316\355\273p?[\003wz\207\326p?\336\331\264\330A\263p?X\354n\037k\246p?\361\362N\347\205\231p?\0202\005u\016\301p?\204.\021\nr\231p?B\330B\363\255\315n?\307\316l;\223Tk?,C\010\007\374\223h?\333\200\031\235=\341f?\356\301\253\262\335\247d?\037\215\330a+\354b?\255#\002f\242.`?\344\361\252\212M\204]?B!\232*,y[?\320\271\212\256\323\224Y?Da\207\231\314dW?\032P\232\306)LU?\255\353}\316\320\204U?C\360\234\206\330\373U?\216\234,\205\245YW?\037[\212<-eW?\014r\0106]8X?[\322\201G|p\\?\206\313\307AKO_?\371\270C~\216sa?\367ZB\321K\253b?\363\264\037\320i{c?\274\"N\340\003_d??\030>C\264-e?0\260O\177D\263e?\232\206\377y\274\276f?}[\212\215tdg?\203qB\261\255Ph?\335\243\016]\0264i?\271;\221~\000\364i?x\r\227\250 7j?\322\272\255\367\222\373j?\332\352\334.\340\327k?\330\217\361\201M8l?\020 d\325\367Ll?m\373r\364eZl?{\344I\261\'\252l?\260x@\222\277\237m?\247hz\303\\\326m?\267hOi\307\204m?\331\223\322\311\330$m?q\r\362\316/\267l?\2564\354\241\304\201l?A\n\357\211\255Tk?y\0047R\266Hj?5\365}\342G\317i?\251=x/\357Xi?\252&y\217\342\005i?\313\237\261\'h0i?c\363\336\t\327Ri?\033U\251\200Kei?v<8hG[i?\\\3163c\302Ii?\003?uo\357ai?5\205T\245\273Xi?Q5\204\247\263:i?\250\237Qi\2550i?Mg\362\220\323\036i?Y=\360\311t\374h?\177;\223zr\364h?26\220\010o\ni?\027}\373\366R\321h?\013\2258X#\256h?\323\220r\251\252\315h?_\340\250\313\030\325h?\267\017K\223\352\354h?\303\345\234\313\031\371h?d\2757\327G\337h?\325K\204\364\261\016i?S@\252\306\352\ri?#\302k\t\214\004i?\265F\244p\264\030i?D\033\231\252(\034i?\021]\217Cv>i?\317o\254Lw%i?J6\320\334@\ni?\340yIfl\035i?\270eU\276F\026i?\340\232\006\010\220\350h?\316\361<~\220\341h?\016\343@\330\301rh?\001R\216\016\267_h?]3,X@\'h?\200#5xU#h?\000\273\n\221\"\036h?\234\341R\n\304/h?\0005\362\317\305\014h?{\211\334\314\0339h?\360\242\204\240pdh?\317\326f\010lsh?K\255>\361xgh?e\227\347B^oh?\264\313O[7fh?\024\332\232\366\222\233h?-\246\365^L\230h?m\265L[c\235h?\321\233;\016D\225h?A=\253<\351\223h?\340~\315-\005\210h?\027\214G2v\205h?\223%}\236b|h?\'q\237\032\004]h?p\236\376t\202\204h?\373\304\030\220qPh?\006\340\t7\305Uh?[\'O\325\0243h?\353~\350^4\037h?\257\237YmY\031h?\271B \343\3067h?\216\024\265\'\215@h?W\377\340vz;h? \311\373$\266<h?\212n\210\2647?h?~\337C\262\025nh?\377\363}6G]h?r2]\3079ch?&\037\300\304M}h?C\tr\321Bbh?t\372\375?\247Ph?\177j\226\255\360\214h?<<:d\271[h?P\311,\207\205vh?\026\\\210\342Ich?\325\307{\211<?h?;\030\254\226F\\h?\227\320\336\222|\"h?\003nn0\372(h?\216G\343/\261\"h?\301\010\r\t\207\372g?.\246M`0;h?\036\r8/tCh?p\307\025\303GWh?\234\312\254\"\377sh?\213\371\332\257\022^h?\366\360\232\224\330nh?\260\030@\273\355\211h?\030h`\254\273\356g?\332g\017`\003\265g?\307\256\376\031\357\330\031??\376\322\242>\311\035?\260\374\\\341\033\022 ?\342\355\212\336~\000\037?)\337\\\221\322K ?\304y\257\217\213\300!?\370\024O)\356\371#?\331A\234\274\005h$?@/\351\3432R%?\254\221\372>^@&?\345\307\232\274\301J\'?\274\201/pl\202\'?\371\276v8\323\347\'?\031,\341xZX)?\3317\275\254\005\315)?`\325Vu!\031,?\275O\353\274\341\314,?\351\304\343w\332\347/?i5\025\303\204\2720?R^\361\3651\3660?`\021z8\254i1?\210\035\017{v\0001?\026\022hd\033\2561?>eb\336\326\"1?\313v\353 \242\3350?\273\3628\220\036T,?\326#|\013\305\377(?\n\320\005\341I\214\'?\350:\350m\307/\'?\001Xk\310B\353&?\010Z0\332\253\333%?Q\301\014\206m\235%?\257\367_\n\266\341%?\245\215\014:m\002&?\204Z\321\273\270Z%?P\250\351\253\222e$?\325\005\250\350\311\256$?H\222\343\370\350\247$?\356\360e\017\245\327%?k\006\365\203ss%?\246\210*\001\323\227%?\035\330}\t\r\253%?\215X0\226\216\336%?\004\216\263\322lj%?\220\256%&\240p#?\262[\352q\366\006#?b\000\336\213\372\347#?+{\357\310\210\246$?6\345B\231\321\205$?*\020\250\304\226\232$?\3214\373\030\200\001%?}\"\221\256\200\337\"?\317)m\026\324\\#?\306E\336\007Z`#?\331k[C\222!#?R\\\360\312w\356\"?pd\360\300\230\336\"?\313K\330`\334k#?j\022ah\032\271#?\330K\256\275\252\016$?\016\354\313\256\210U$?Y\302r5\306\017$?oZ\2200\203f$?a\004\023\323\023\003%?\236\320\203lm\242%?\324Y\247v\370\376%?>\313\254\013c\376&?\214\335\253G\373\316(?\207\262\"0\367E)?J\022L\201A\334)?\265\253\002H|\r2?\031zO\333B43?\252\323`\236\27634?\264\245~F8\0314?v\033\234\324\014\2634?U\343\211F\225f5?\262BH\0301\2545?Jb\225GA46?iWw\345\340\2756?\\\000\364\335\250s7?\224\264\371\267\177\3607?\014\020\210\264\346\3678?\006A@\361u\2579?\202-\026\211\200x:?\306x]W}\302:?z\001\034\231L\267:?O\363\017\324\211\001;?s}\025\234\236\320;?\343\271\221\216\177Z=?1\243\314\304|\222>?\357\371>u\334\213@?\220V\243\301\3473B?\310\2711c(,C?\204b\303\204\345\220C?\022\363\337\225\272\352E?\331E\345\347\005&G?(\307\232\0323LG?_!\035e\227\204H?\354\230\026\234\221\246I?q\033\262&\273>H?M\r\270\327\027CH?u\225\235g\264\241G?%\271\243\317\254DG?za\017F\034MF?k\261\241\274\013kE?\202g\376u\307\222D?\227F\0375\036SD?\263\n.e\377\215D?~:\007\227\332\307D?\036*\266\027\013\"F?\233\240\312\214^\335F?\207u\035\211\033\340G?&{\005\03372H?\373\232O\227q\305H?\374)yhd\377H?u\324\020\326xII?J_\347*\006\335H?T\010\232\205,\301H?\237&\005\246k\327H?\265\022\016Kp\333H?\352B\002\377\301\253H?W\375(\"w\234H?\225U\224\357rAH?\335c\232\375B\016H?\234\013&u7\214H?\305\254\325&g\213H?\271\237\322\017\212\260H?k\256LX\030\253H?^^g\340\323\336H?<\263\374w\177\347G?\267\021\257\350_]H?\360\353\253\236\330\262H?\217\036\202T\321\362H?e\336\2452\227\344H?\014\271\306%\226\255H?!\344\207\r\300MI?vD\341Z\275(I?U\306\037B\345*I?\330\3461\220\210\245H?\006\306C\335\334\237H?2cys\222\217H?\231\300=g\274\301H?\332\317\336\360\355#H?Cb>\375\300\205G?|Rt\304$\323F?Cb\203\321!zF?\356N\331\021\320BG?\2405\356\266\323\"G?,C\257N\264\374G?Wz\177\031\022KH?\340\177\177\330?@H?yv\010\002\265/H?B\"\320\r\013\275G?\005\353\322\233^\035H?\033}\377\370\250EH?m\246\366\255\314\027H?~sO\274\242\022I?%\364\223g\347\377H?\021\3315\221\001\357@?w\312\361\252\321\"@?\312a\244\325\230)@?\'\200\225Un(@?\033\"\302M\2631@?\341\250\361\337wd@?\010\035\014&\022\rA?\023o\375\361\347\246@?{P\030\340\367y@?\345\210\364\\X\227@?7\326\315\336|\227@?6\353\262\266.\327@?\317\322>\353T\330@?g\007\277\201\207q@?\205C\244\343\300d@?\213\023K\tB+@?r\205\230\307q\022@?\363\204\225r\r\037@?p\331\327pG\356??n\016\310?\342@@?\351I\236\215\212o@? C\222\034Z\253@?\374\341\262\3157\351@?\366\221\337\313\022\327@?\342\321\276\240\"\332@?g \'0\303\235@?6\010\236;\364\357@?[w\315\215\344PA?\341]kET\016A?\237\010\022v\262\035A?\3322\200\272\370\020A?\001\317Dx~\310@?\n%\022\323%\346@?\235h}\350\207\263@?\307:\236\224\036\215@?\276\315\326R$\205@?\036\253\\\364\212\261@?\\\267\001\322\020\3533?\2713\227D\213\2462?\322\235g\271Z\2212?\337\207\360 W\2312?\263\001\265q\364\2232?\223\020\257b&\2162?\030/\016\025\200\3222?\372\210I\314t.3?+\025\177\324Y?3?\021WaB\35323?\220\270\336n\375\1772?\025\3161\312z\0043?n\014\307\024(92?\364\262DlR\3770?!\304\315]\326\2720?\2368\033S\371\2340?\305R\236%:^0?\214\334\177\326\217\\-?t\336\374\017{d-?\215\'\032U\232U.?<:\016\271\242_.?\317n\336L\r\263.?\211\271\256\334.\333.?\300\243\007\352\006\235/?)\223\025!G\0030?\360.3F\315R0?-)?\365\204/0?\221\215\230\275\222\0020?\263\356\313\013C\363/?\325\004\310\005\244S0?\206Y\230 Kh0?\007\220\2207\257\240/?Yk\322\264^\350.?g\362\031\305|\275.?\007\306\330A\331\037.?\253\266=o\232\246.?\263\240[\250/].?&\276\347{\236#(?_\\z\231\000z,?\201\2238\356>\016-?;\370\330I\274\275-?\036R\273Hi\202-?N\255\177V\347\270-?\023\304\205\253\037u-?g\243J\377X\251,?\213\346\221\3274\003-?\033\354U}\021\341-?Y\257a\007G).?\233\021\243\274\226].?\036\3017\224t\251.?\024\215\336>\345w.?\227\261\314\033Zv.?\375.\360\005\373\351.?M\271l\273\243\333/?\343\016W\253\317\0050?\314@?5Y\0010?3[!\310\033B0?6\037?j\377B0?\217\313\343)\336\332/?u\266f|v\370/?\230\226\017C\326\0230?\232\203\2302\r\0260?x\267z\232\010%0?\036\271\361\313\271D0?\355jn\\1\3510?;\327\227o\364f1?\335e\032\250\34782?\'\211\016Iy\"2?\375\037 \2223\2522?wDU\261\320\2053?\215\275r\030\'\0314?\200XZ9\300;5?\036<\272\341\334\3763?\231JIS`\2503?Q\226\037\215J\2673?\211\316\3005h\3112?\023\25716\024A3?(\214\344-\202\2772?~\013\227\307-\3652?\340P\360\373\324\0043?\357tOm\\>3?\223,\331\021\204\2641?/\222,\026u\2341?g:P\264f\2741?\034_\307\364\216\2271?\317F\353\376j;1?w\315 H\"W1?\036\224\273\305\177^1?\307\300\273\0165\0071?\303\030!\324\366\3030?\361\330\331\324\234c0?\237\\\244g\26230?\030\264\375\034\000 0?\341\261\3756T$0?\377j\226J\306\321/?\\\220~\022\327\345/?\350\325\361yt\0140?\216&mc\031\006/?\360\363=\365\330..?\231\002\222\343`\314,?\351\255h\020r ,?&\333?\235\222v*?W\271\362\207\326\362)?!\007\275\350?,*?G{\034\003;\311)?$\030v4\350-)?\\\273\267\231?\343(?.5\325\242$u)?\010\004\nZ \370*?\3202\324&#n+?\317\352\301\375\260@,?\370{\307\310\020\002-?\177?\353\320\237\354,?\337t\337\362\327\262,?\000\336\024\354E\010-?\374]\337T\222\337,?09\331\371\303>-?\0325\307\010\224\214-?\340\031V\271\234\207-?\246Vg\316]\277.?P\030\307Z\331\304-?H\n\307TC\340-?\336\372U%6\304-?\241z,\374gm-?\357JDX\212m-?D\000\230\264\247\271,?\303$i\362%8+?Hl\3329\213\346*?X\350bW\203\305+?pq\214\030\001\013,?\375\312\200<\206\212+?K\273E\036\220\235*?`\200\252\365qy+?3|\t\352\233\001,?\374\207\236\333\036\231+??\2253\021\277-+?c\260\025F\020m+?\254y\206W/\022,?\227$K\275\331\254+?\313\2023?\321Q+?\364\265\'{]\034+?\203#]@#i+?\242\251\033K\377b+?\010\354b\201L\276+?\322\224\266\033\361\"+?{k\266\253\275s+?\253\017\354D\276U+?rV]\352\224\005+?\201\221]\212\'\222*?\250\373\252\243}\210*?\242\2064\377\357U)?M\272\346\273\177\037*?\322\301K\207\206y*?\245\243\332\257Tz*?!{i\374U\217*?4\252KG\262\247*?1\375\316\323\331\371)?\241\231\253\017\271S)?EX\231\230J\031*?P\3679\362\313V*?+2\261.\253\006*?\240C\004\017\030\223*?\021\010F\356\201\007*?i\251uHU\006*?;BEV0\212+?\200\363\361\357\204u+?\026\250\251\2132 -?\362\312y\357=\226-?\201\322\227x\034\023-?8\216>7K\001-?\\\202h\272\222u,?&D\337.\022\022-?\037\270\353!\361]0?q.\235\215\227\2312?\217\257+\320hW3?\331\0317\031{M4?\247\353\022\240i35?\273%*5*Y6?n\014\241M\205\2556?\025\362\224\027\221\0177?\261\371/E\366\2276?wE\334\333\256I7?\221\017\347\322\331x9?\317o\261\0051\2169?\302\272u\'m\3449?\303\265\223\356\322y9?\245\275\320BS\2156?h}\263\225\343\2125?\365\3046Sh\3634?\270\242lH\336d4?\263\377\263F:\2144?j\032\031\206\275\3004?\'\007N\336I\t6?V\037\211C\250\3456?\242\215\027cD\3107?q\214/\235\200m7?\001\206\006\336\240(6?1RHb\344\2155?,\352k\024\224\3155?\320\353\342EE\3555?~\274\241:gU5?\323@\204\234\035\3074?\002\213\335\355c\3154?}\3410\371\350\3224?%\001\242\0248\3174?\2043\300Qg\3703?\034\255\351\3101\\4?{\024\256G\341z4?T\34468\026\2664?\263\355\351\'\362\3353?\264\276 \240\375s1?\245\315\345\304&K0?*A\230>\350\2270?\276uh\322R\3530?\330M=\223|s/?\017\030h\232WE-?\371x\300\363\215\023/?\002zt2WW,?\r\0174{\255?*?f\370u\376\362k)?M$\262\276j-(?\252\352\333\005\'\373\'?\017\326\3779\314\227\'?\270\320\341\226\231\026(?\013;M\345;\230\'?\213b\364\007\303\263&?\031\344\233^C\037%?j\002r\255\351\206%?\203\223S\214\n\324&?D\002q\027\224{\'?oR\013\004\205j(?\272\300@k\331\265(?\235K\355\0345\354(?\233\302Rv]l(?n\321v\n\301\303\'?\336 _\344\223\205\'?y\034\030\326\023\261&?\234e\356\330\n\305&?\033M\211\1773\214&?\'\321\254\033\330\362&?\301\236#\260Ax\'?\022d\312\250\256S\'?\342\332\021\315\212H\'?4aY;\032\037\'?\353\226;8z*\'?\360\340\304\343\344v&?\007(\2715|\032&?\014\013~\263~G%?K\257\3278\276\235$?\252\266\010}\312\340!?\276$\230\341t\317 ?\221\243\345\262d\235 ?\223\020=\r>\353\037?H11w\334\331\037?\305\203\017 \2418 ?\316(?\244=0 ?\230\200\033\006L\020 ?A!!\033_\263 ?\325>\367\307v\034!?X:\323\017\340\260!?\3312\331r@\250!?^\037\301\200j+\"?\347D\307}\307\312!?\233$3j\000g ?\n\361\023\312l\327\036?\267\253\205\311\274\244\035?Y\001\2061^\375\034?8\351\307p\206,\034?\201zc\243\324\247\032?Ty\226{\334\022$?7,\250\320\302c$?0\206\031\352\025\356#?V\036[\321\021\271#?\220Ga\3707Q#?V\274\306k\264\325\"?\315|\360\242\373\256\"?nj\177\353\263\230\"?\212\333Oc\316u\"?\240\026\2731\310S\"?\035>\024\305\336\235\"? \360\300\000\302\207\"?\370Oyl\262\343\"?\261\017\243\001k\276\"?\222\357\255\243\005\303\004?\204\271\335\313}r\004??\253\314\224\326\337\002?vS%%\230\305\377>\276\252\016\024\323\340\001?mg\251\006\253\373\001?[\347\204u\210$\377>\374mO\220\330\356\376>\032#\310\367{\030\000?x\234\375\334+N\000?\266\217&(\217\270\001?J\340 kW2\001?\202\270a\312vt\002?v\203\r\364\365!\004?v\203\r\364\365!\004?\354Nw\236x\316\006?\006\242\'eRC\013?\374\251\361\322Mb\020?O\356\322\341|E\022?z\235y\3362L\022?\024\374%\230 \331\022?\357gg\207\256\372\022?x\220Ci\0247\023?\331\026\257\303\342\201\022?\010\323\2135\267\235\021?\253f\214\305%}\020?\007\243\243fYA\r?\201\210y\373\030\030\016?\370kW\215\312\362\n?H\257\274\232\362\327\n?\347\034\227\314\014v\016?!>\260\343\277@\020?F\322n\3641\037\020?\262E\322n\3641\017?F\322n\3641\037\020?\311\337b\352S3\020?(Y\230\317\003i\020?\316\261r\036\004\323\017?M\355V\340uG\020?\262E\322n\3641\017?\3360\033\256\037\254\020?\030\n\330\016F\354\023?O\342\030ne.\025?\314\324$xC\032\025?\262u\272=R\216\023?\n\324\0077\276\233\023?}\236\365\3379J\024?v\203\r\364\365!\024?\371\220\001\352\0276\024?\371\220\001\352\0276\024?\026\375\241\231\'\327\024?\247@fg\321;\025?d3\32111\247\025?\24430\362\262&\026?\361h\343\210\265\370\024?4vx\276U\215\024?*NZ]\363O\025?\3411\227\257&\252\022?D\3058\177\023\n\021?\325\010\375L\275n\021?\n\340\301\252\325\262\020?\354f\353\205\247\374\020?\276\252\016\024\323\340\021?\361t\235\374\314\017\022?\024\374%\230 \331\022?(M\336[\354Q\023?\003\271\037Kzs\023?\327\tyN\304l\023?6\203\2563t\242\023?\206\306\023A\234\207\023?hM=\034n\321\023?[\027mD\346\200\023?kN\271\035u\317\025?\030\376\035\233.\325\026?jB\377\251]\270\030?\345\'\325>\035\217\031?pP\261 \203\313\031?}\206\201\370\n\034\032?y\3643\263\236s\032?\366M\004\353\344~\032?\265.\245\226\374;\032?\225\344o1\365\251\031?.A\302\007\341\227\033?$\322\214\376\375M\033?\020\025\340D\277y\033?\363\243\017\315\244\234\033?S\244\266e\244\004\033?\267\377\003\327\325\027\033?\341y]JS\300\032?\255?W\225\\I\033?H]\230p\333\003\034?\0078\\bg5\035?\030\345\374\301~W\035?\017%P\200\005\211\035?\256\320[\312f\377\035?\254\226\336x#e\036?yJ\016\245\344?\036?+K\206y\025m\034?r]\347\225\241\340\030?[\027mD\346\200\023?-gJF)|\021?[#\'\270\375\227\020?\n\244\037h`?\017?m7\3017M\237\r?Q\313 \210=\376\014?\3567\177\270P\236\016?\316\261r\036\004\323\017?\177\267\345\310ov\020?\204\305\227?\225\211\021?\351Y\265\020\211\347\021?\307\322,u5\036\021?R\373\010W\233Z\021?"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\267\254~I\203\013$?P\'\243A?\220\"?\236\265\205.{\356!?{.\375\222\'%!?(\001\314\3350\317\037?\034V\360\217\202\235\036?\234\214\331{\271\233\034?\022\215]\276\317\232\032?jB\377\251]\270\030?\213\310\013D\252\203\027?H\3070\202!\006\025?+Z\024\321\ng\022?\316\355\024ayF\021?\270_>Y1\\\r?\307\256\376\031\357\330\t?8xp\301c\211\010?tj\035\013\300\365\007?+B\240\351\3338\010?\207\242\345\345UB\014?\376\252m\324T`\022?\262i\000\312:w\026?\021\327{;\323\225\031?\010\272\235M\254+\035?\337A\206jW\334 ?\301\017\307\355\2512\"?\253\r\336\357\001\316#?\223\362\203\210\016`%?\035\205\254\355t\207\'?~$\355\222\2558)?\010IF\236\211\210)?\033\006\245\310W\213*?\027\330\223[\2736)?\355\311.\336\260\351(?\216\270j\030\352\"(?\270\261/\222\243$\'?\337*\277t\251\375%?\341`\007\177\323|$?\267\277C\351\274\332\"?\004\326D{\311\272 ?pCJ\273\352d\035?o\201{\3231=\032?_%\037\273\013\224\024?\270_>Y1\\\r?\030\n\330\016F\354\003?vS%%\230\305\377>Y\346\010t\201&\375>\024\330\367<\332\223\373>\200\207\375\371\021\032\374>\250)n\201\251\013\375>A\254H\226\335\335\004?\356s!\373\305\021\020?\262u\272=R\216\023?y\204\211\365\374\037\026?\240\031\304\007v\374\027?\021I\200\334v\210\034?\215\0103^\324\235 ?\033D\243\357\371W\"?\262\352\023C\351@#? \271\031\224\207\212#?\002\350A\213\266t&?\352\275\245Z\023$)?\270d;0\227\214\'?\215\3166\215\246\340$?\273\001Hh)+&?\243\'(\357*>*?=x\215`Z\t*?\311+^\314\231d)?x3\022\275f\233&?\275\203\n\324\203\376)?\224\310E\202\227\203*?\226\003\361EqJ-?C\361\007\\\207\005/?F\335\343Y=\270/?K\013CVJ\336/?4\344\373\211\232M/?\260G\336\302\205\377.?d\320CL\r].?\250\324sr\211\232-?\001rn\205C~,?L\325\025\352\353$+?\2308\013\336\004\235(?\346\344s^\313z-?u\022\235\2472s.?W\354\227\236\234\340,?xy\257d\013d-?4\270a\237\366\027.?\274\3307\324H{.?\'\264\010l\236\210-?\212\243a\347\\@.?j\241>\253\307\333,?\177\276\244fL\027+?\230\321\3070\262Z,?\231\255\345c\261,,?[\374\243\370\303\222,?\353\236t\3262\017,?\363\234\004\241\202\344)?\224\177\005\347\216)(?\374\224\005A\267\377\'?3\2345\357m7\'?K\013\217\344\217\365&?r\336\372\016P\252%?\250\352\014\366\240L%?-\334$\314\325\013%?X\225\335\3110\271$?\300\235\365=\253K$?Y\3541\274R\311\"?$\341\032V\363G!?\304\n3D\200\231 ?l\252r\312q\341\037?T\010?\314\271o ?\203\320V2\273\177 ?\233\344&\356\241\022!?\206\3332\304\327\365 ?x\361\251\\\333\355 ?\241\373\213\003\\N!?\376zP\023\'>!?\375\221J\372y(!?\321\0073\274E\237 ?/\377&\266\260\336 ?\221\210h\365\207\306 ?\340\246\360\264\275\\\"?\371\362\024\317_<!?\364\361J>\350l ?*iV\232\272I!?\000g,\021\335\360!?\343\031>f\303A\"?f\025\032\256,\326\"?\0020\3233\023\305!?[7\032\312\315\223\"?\027\3267w\216\335\"?\315\024\177\203\022@#?\200\t\213s\234\'#?J\306\321\037\021\210$?\021\214\256\313#\221#?;\233\300:\257-#?\273>\314\216\357\263#?hc\212\021@l$?\201\034\321\223\353\323%?o5\263\342\220\027&?\215\251Y?\264\221&?\002&\364#\023*\'?N\373\355\270\317\224\'?\257E\202\336X\246(?I\243\31756\265(?\215o\253\375\366\245)?\310=(\353\341\022*?\340\370\310P\217\031*?\225\372\274&\307D*?\274\2759\226V\307*?\362\354\200X\'H+?\036\354\361\233\362\203+?\372\336\244>\320\327*?\017\010\370^\0216+?\203\211t|\n9,?\212\350\353\2726\242+?\220\330\230\036\347\022+?\304v\215\034=\014*?\205\363\215\016f\030)?\336\366\237]\007\314(?\342\211\232\224\364\303\'?\363\034k(\260^\'?\321\247\372:\025\025&?\233{;\316\334_\'?\233-\232zOx(?\251q\377)\006\\(?\356\200\275R.>)?2\310\317\331\021m(?\311BX\263\354N)?\341\207\362!\202S*?\017\330\332\235\343\023*?\035e\377g\215t(?\212c\"zY\340)?\016\225\370<|\"*?5\227\3246\351\251*?$\362\353\364t\217+?\230\'!\242\342I,?1\230\345\t\211V,?!u\214B\312\003,?\343!\252\365 2,?\033cW\365\032\004+?\372\014\231\014v\254*?\2575\223#(t*?\021K(O\351\370)?]\376\231\372\246\324(?\213\006\276\334\0069(?\274#\320Q(\272\'?.\227\350\207l{&?\021O*\245]\010&?\001(N\007\025\311%?\262\267\241\035\310^%?\014Xr\025\213\337$?9\332\3215\034a$?\330\010\314\\C\035$?\013@\374,1\367\"?x\302\272\rD\370\"?\265\267=<\251\001#?wd[\357\377/#?\355\253\250J&j#?\371\001\330\030%\374#?\271\327\271\321\026\303$?Q(\321\263\325\274%?\272u\246\354\316\274\'?h\260\377\363a\341\'?\257Rj\304\006\352(?9\335\332\013\312\t*?\261\3769F^H*?\256\257\316aY\221*?\327i\346\301\304\274*?\240\213\310\250\031\357*?\207\265\252\205\217\021+?\335\031\207\251\026\331*?;\206\324\250\030\313*?\"\220\t\000\247\332+?d,zw\311\327,?fM\243\376\267\350-?\343\301\360\363\332\312-?E\355\322\024n\352-?\265/\323\010\223h-? \r\232\242\313\267(?\n\246FZ\275\322(?\260\313F\240\'\211(?\332]G\354xk\'?L\321_\"\275,&?f\2600\344\3332%?\311\033m\020>x#?{X=\232\311\273#?\332P,\025&\034\"?&\263\247\010cP%?*ZG\302\257r\'?\333\313\026F\003C)?\305\231\020\207-\274)?\231\0334=&\'*?\207!\237{\002m*?W7\261\234\221\374)?\256\313\370\020\267\267)?\237\221\245b\245z)?$\331\026\252\n))?\350\336\261B\013\265(?\222\266^\304XU(?\266s/j\326\235\'?\355QM\203\201k\'?\035\252;\254\366\004\'?\3547}\267%\344&?\254\302\304\361\014\262&?22\233\334\374z&?+\027\263\360\270R&?\311.\2630\215$&?3c\263\036\034\276%?\'\234\255!\020f%?\347\314\030\024=X%?\023fr\033!\304$?~\253\335\305\347\215$?}v\220<\257/$?Nga.-\023#?\263\343=\t\227N\036?\335\315?9\213\220\032?\323\343R\360o+\030?\345\'\325>\035\217\031?R\327\332\373T\025\032?!\032\202\210y\373\030?\327\361\004g\225>\031?\235\014\216\222W\347\030?\240%~{\215\023\025?\001\254\351\325[^\024?oh%\010\262\371\023?\253Z\322Q\016f\023?\235$\002z\206\025\023?\200\253+UX_\023?\006\256\341\330iZ\030?z\240\265\245\205\000\035?\243\241\344\255q8\036?\226\322\361\240\362\022 ?\0357\t\231\274\345 ?\375\231\002\030\0350\"?\363\302\r`\340\245#?\265\375\247\362\250\276$?{D\313\010\017\235%?\373\215\372\024\225G&?S3_\266\201a\'?\226\362R\230\224\016(?\001\021\207\021g\352*?\265\270\236\237\3449+?\312(W\367\026v+?>\014\347\371W\177)?);\310\256^\214+?@0\230\326\336[,?Y\335\243d]\317,?\303\226m\223\311*.?\252\031\177\306x\331.?\242O\300\203Zd/?\016\006\302A\207h0?j4\017\031\274\3230?D\322 e\301M1?\tb\\Nb@1?\267\333m\230\032\0012?\333\366O\315k@2?1_\010\200\304\2132?\245\275O\302=\2602?-jy\343y\2602?\356\312O&E\2262?\036\251[\311\320\2512?\305O\360\010\377\0063?\304\234\344j\013\2372?\002\212\257{\315\2401?\345|\315L\022F1?\350q\\\351\\!1?\372\r9\324\364{0?qY\260M]\0130?\3109&\225m\003.?}\n\035\307Q\261(?`2\007\241\271\327$?\207*P\031l\333!?\2104\260\251\201S ?\354\3431\233\261|\036?KH\307|\020g\035?=\206\"8\211\234\031?D\255\304\227\344\333\026?xx\317\201\345\010\031?pP\261 \203\313\031?[\377\370\\\267R\031?\225$\375-i\333\034?\212\254\337\223!\243 ?\355\346\322\215\352S\"?\225\200\315v\333>!?\262*U\261\027[\037?\346\234\257\304\311\036\035?}\025]:\215\204\033?\222>\376\351>\264\032?Djc\267\222\307\032?\274\345\2369\341\341\032?2\260[\362\342>\036?N\362\007)\226`#?\326\2746]G\003%?\177\211$\354n\255%?5\341\277\302G\231$?(b~_=\235$?\034\327\202\210\033\212\'?E>\311\314\356\221)?`y\237\311O\301)?\026\352]z\003\345)?\270SQ\364t9+?fwb\205D\242,?\004\202z\337j0,?\342|3/\\]+?\226\0223\017!-,?\354X\n 3R*?\217-E\236\226\262+?Sn\274\352\352V+?mZu\222\267\240*?\2245\231\332\032]*?\375rLg>\037)?\022\014\311\304\013\364)?\355\031\253\225UM*?\331\364\332K\236\333)?\031K\223}PJ*?{\260\362\357&\004*?@\301\033\213\3234+?1\346\206]\026>+?\261\020\004e\246\366*?F\003\355\030\233y)?\\n\30373K)?|\277\202HG\270\'?\223Oi\246v\344*?\215P\253i\220\342)?\307\370j&c\245\'?\322\266\275\204\332\324(?\350\372\333\361h\333\'?\264k)\275\302\304\'?\255\373\224Q\317\374&?+\330Sf\333M&?\013\\\247\\\244\372%?\020\301\255\305\353\035%?&\231\327<\007\311$?)\025\212\3750\005%?\274\251\023\223\341\277#?\036<\272\341\334\376#?\000\365Za\336\t$?\213<7\327\252\t$?\377&\322\005\016\313#?\035\"\352\025\201w#?\305A[1\320s#?\333\351g\347\275\374!?,b\032~\036@\"?\363\325\322\377\031u\"?\260\0252,\206x\"?*\231s[\350k\"?\261\222\221\3360\004\"?v\262\374B\215\027\"?\314p\265\256\316\272!?_\327\374\346h\317!?\r\247\016\352\t\350!?\226%D=\240\023\"?\352\377\330\310\316\013\"?\235\034J\\\343\r\"?_\021,\251;\230\"?\257\304\272\363\357\363\"?\277\365\250\222\335\331\"?\245\345\r\036\020b#?l\216\023)D\365#?<\001\330v\226\375#?\014l\344\246E\376\"?O,\205z\331\372\"?\3745\306?M\334#?>h\3523o\356\"?_\263M\013\r\255&?\313\270\372\310\345\363%?k\225\320\305\365\333&?_\014}aF9\'?D\236\202\3164\371\'?\227,\320\351\327\250\'?\2518}Y\264\342&?)\317\240\307F%\'?\322\246MI\224\305&?j.\014\230\215\274&?\216\\\263l\030\313%?S1\204Rj\345$?\303\200l,=\247$?\252!\002\362K\033#?\002\0271\332Mj$?c\202\037w?\336#?a\017 U\252\312\"?8t\272\3714\221#?a\323H e\221$?&h\r\212XW$?\222{\001\220\357_$?7\201TPr\003%?\tR\306Ky\245#?\240\2057}\323z#?O\304\023[\360\213#?\300\377=\025\303\027.?\312\220\024\245E\374!?\025\260,\267\005b!?pP\375\256\310\342 ?t_\\\027oE!?\025\323a\222\205@\"?\361\262O\225)\305\"?^]s\031\307\340\"?;fs\261v\317\"?FH\366k_\376\"?\037\020 \3678\311\"?\314\223\352\211N\231\"?.\\\213S\003\206\"?X+\221F0\316\"?\211\'ID\351\354#?\344I[\'\361c#?!V\330<\251W#?\023\334x\0229\306#?\223\265~\3412\372#?V\234\031\346\314\302#?\346\r\322\201\034\374#?\\\032C)\357\035$?O\310H\242\t\247$?z\314\233\036oM%?x8B\205q\327%?\236[*g\326\357%?\245\254\014\316\323\305%?\004\365w\000\325\211%?\352\026T07\323%?q\371)=\274\257&?\rP;x\375\264\'?\336\3454\241\317\233(?\370\034\210\307\246\336(?f!\210\223\376\325(?\037;\216pq\214(?q\362\237\221\257\324(?\262\021\377\345\227\027)?]\221\370\022\263)*?\307\365\025\302o\345*?\2338\332\355\212K+?iV\244,\275\342+?\316\001\274\344\003+,?!Lz\255\276\231,?I\261\227\376\tT-?\231\357\314C\'\375-?g1yOZ\302.?\342\230\220\317^\217/?&\270VPX\2570?\021\234D\316\014,1?;\202D\250\214^1?\223T>\265\016\3171?3\037J\223\326\0102?\225r\221W\364B2?\261\250\336\323\002\2372?\316*s\300\234C3?u\237\220[\233\3373?\265Nx\343\206\3324?z\002\357Qp\2225?\352\037\271?[*6?\277\200\320\r\\\0047?g/\304\262\345\3217?]\3264W\034\2728?\0073\371\250\267\3558?!f\311\370\004D9?i\377u\001>^9?\210\366\261\202\337\2068?\334\357F\242tB8?\207._\231\342j7?\030K\022\375:m6?%\r\335\010e\3035?+\320\233H8F5?Ch\007\323en4?\031p\226\222\345$4?\027\346N\372\214U4?\035x\352\316i\3172?d\033\251\330G\2202?\310\320\322\2213\1772?\325\3272\232\016\3750?\307^\'\251\327#0?fd\017;\363u0?H/\310h\255\0000?\350\026\272\022\201\352/?>r1\'\344Z/?\316j[v\203\306.?\264d\322\002[\365.?<7\206c\n\224,??\n\215\026V\340*?\177\333{\007+\215)?\3708\262v\004\005(?9\231\3128\314\353&?n|\312\212\021$\'?\213\353@\037*b(?\340\"\210\327\033\323(?\317\024\201\204=\372*?\021$p\235\337-)?\335\034\334\r\n\231\'?\010>\006+N\265&?kv\036\301\377\351%?-\265\355\232\341\035(?.\317\275f=\245(?\237\036\246@\020g(?\210[\034\315E\007*?n\205\260\032KX+?\207\\\374\257kb.?\271xz\320\254\2370?\216\002\213\226\030\330.?ng*\207\300\330%?\r\3428-\316\321 ?\270\326?\321:\177\032?\341\031#\310\367{\030?\345\'\325>\035\217\031?\264\225i\304d[\032?\303:7h\r\260\037?\323\t\\\257\315\354!?{\366\2504l\330\"?\"\351\204\344%~#?\315\370T\324\264\031$?\372\215y\224\177j2?\322\367C\001\025m2?\241\3727\312\"\2262?\024\242\360\227\036f2?\216\017>\212\366U2?]Q\221\335\341\2032?\340\257U\304\341\2632?c\363C5\275u2?g\355[RZ$2??E\\\240\247x1?\253\003\244&\217\3410?\004\215\272R\246\003/?_\306\306\034\001e.?BV\243\226g\327-?\322q\002\301\206!.?\320\025\257\366\323&.?\r\330\r\217\210\037/?\212zORQ\326.?\231\026\205\3650\310.?-p\344G\035\231.?2-m\025\035\371.?f\223\r\265\267\245/?\226!\366X\346\354.?\360\022\360\371\316 /?\252\"\344\325\2340/?\344\317\367 \362\0000?\267\231\337p\354\3070?\016\364\251\223\316\3500?\211R\003Lg\3070?)Fzw\202\0021?\000\330\251\207\242\0371?b\365\235\030\277\0241?\'s\301S\247\2071?\353\227\016\361\235\0052?u\223\374\256&T2?\375Q\2276ck2?8~sB\222\2402?\021WaB\35323?)^I\030$\2023?\244U7[\234\3303?`\313\351\272\t!4?2\354\327m\265&4?\000\262\037H/\2013?/_a8\014#3?d\340%\335;\0173?\353@aF4^3?\255L\344\301\227;3?\250\211\314\311|!3?%\2737^8\0223?\270\3257&G\3362?G\246U\212\243\3062?br\010\364@f2?\033\353s\231\300\3131?\032\2118\354\252\1771?5\337\213\246\350\2051?.\234>\027\032C1?\315\367&b\036\3550?\017\3412\203\005\3530?\006W\200\274E\3120?3\203\337#\356\3630?%$\375\266Z91?\226\326\315/\304\2260?\373\206\025\260\025\0330?\236v[\226m\257.?\244v\306\304\324\000/?4\201\2722\274\032/?\001tI\351Z\372.?\304$\352r;\025/?\306\212O>\223\266.?C$,\3627\026.?\241\367=\037\242\'.?\250\022&\013\346O.?\007\0058\314\266$.?<\206U).\250.?\344\234a5YM.?\255\260\256D\177\354.?\310\347\001kV//?~s=\331\346)/?\346`\330\217\204\345.?\262\303\220\203\257;/?\3729ai\260\016/?C\377\2343\266\230.?\335\362Ox\"\353-?$\276\032mC/-?\305\3208t}\226,?\303\25123\003\372,?\325\017\274\352\231\017,?\221\267\2146\357\201+?\352!\025$\210\203,?E1bgV+-?\321O,H\027\301-?\277\245a\315\010<.?kR\360e\271\244.?7e\336\022\317\305.?\216%\300q\230\266/?\202\3544S\323\216(?\333.\246,RG(?f\332p\353}\311\'?\301 e\233\206n\'?#\315\333\265\3354(?\220\211\311X\303\376(?K\003\n\270\221\371*?\311\362\016\355\354\366,?TF&W\346\352-?}\334[\352P\350-?\343\274\300+\320\216.?7`\256J\304\211/?,m\'\000\265\0070?|\236t_$m0?\251\351,\023{\3610?\231\246&\306\324\2131?\253\370=\354\260\2022?\205\3717\327L\2302?OYs\236\266\3502?f\361\220\231s?3?\032t\031io\0214?B\221r \271o4?\305\342N!\013\\4?\220\361`?O\3713?\355uU\027%%3?P\245aV\372\2312?h\332\344A\221&2?v\2012\220\336\2451?\002\333\177l\253\2741?\310\365\010\230me1?\322\200D\2126\004-?KT\201\360\'~*?\273\2004\357za)?HP/\n\030\343\'?S\266M\223G\247&?7\376es\254\275%?z\\r\341\342\326$?D\242\204$\251\010$?\264\230=\250B>#?\263\375\330\342\"\020\"?\240\231\251\016\216\231!?_\352\301\206\242\236 ?\326\240\300\037\244\305\036?4\236\221\323\232\220\035?\265!>1d\325\035?\354a\360\257l\206\036?\000HaoF\363\036?\235K9\253z\003 ?\035\270\204\365\337\200\037?\017\240\007\300=\244\037?\222\252%\321V\033\037?\260\2747\310\034\262\036?9\313C\336&g\036?\336\'\266\236\373T ?\321\207\001\'\350\352\037?9\262 \004L/\035?\300R\0171[;\034?\307\263a\323\236 \036?\370v\227\000\006\306\035?\220\007\324\373\303\037 ?\262\372\203~/P%?\277\020&P\272\260\"??A\200\021\326\364 ?x\267z\232\010% ?}\271\361\034\001D ?\303\235x\277\353\342\037?\373\'\260\347\010l ?Z\010\252\372 \301 ?\255\017\206bt>!?:)n\n\233i!?\353\337y\322W\312!?J\377\322oM$\"?\230\300\250\002\300A#?P\255\031t\235\241#?=\207\2348e\340#?\030q\234<\256\013$?\352\0341\352\302^$?\264\200H@\3762%?L\036T\204\311\304%?\366!\351\177+l%?\200\376}\361\005`%?\"JlX\002\022%?\331\325\247\306\222\014%?\023\350\263\006f\272$?_.\204\312/\353$?\264\303*\241e$%?\323\027r\007\022]%?z*\373<\263\025%?\016\204Z\217\237\346$?\331/\204\016M\350$?\322\226\335\rN\266$?\326\263\321M#\254$?i\230\327\232x\312$?b\344\263\334\234\301$?\245\326\313T`\177$?X\342\321+=Q$?3\336\351\335>\374#?\365s\r\252B@$?\203\0177=\256a$?s\013\220z\345\000%?\232\246\247F\352h%?\370\324B\255\217\245$?\326u\037\265\306\366#?a\375\007\247\361J#?\257\3377\261\314\312\"?h\263\323\327?\304 ?p\014\243N\260g\036?\220\377P\320\360\335\033??\223X\255\247\261\030?\334\013qQ\322h\027?\324\374B\331\245W\024?F\306\264\200\032\010\023?\376\252m\324T`\022?fL\301\032g\323\021?\223\010\236\214;\357\020?\300\267D\211\361\365\020?F\322n\3641\037\020?#\017D\026i\342\r?[#\'\270\375\227\020?o8=9T\235\017?\311\337b\352S3\020?\226\3311\277\344\220\016?\021\277\007T\244g\017?=zh\304q\205\014?B\224\324\256\256\257\n?\233#\206x\177\027\001?\200\207\375\371\021\032\374>\316\311\346\0053\001\372>\247(\362\177\242\r\373>\024\330\367<\332\223\373>K\2608\234\371\325\374>\374mO\220\330\356\376>\215\355\265\240\367\306\000?\202\270a\312vt\002?\024\330\367<\332\223\373>\3360\033\256\037\254\000?\003\271\037Kzs\003?kN\271\035u\317\005?\372\204Gv\000\037\007?2]\210\325\037a\010?\316\311\346\0053\001\n?\235\014\216\222W\347\010?\366j\333\213\303\364\010?\262]FV#`\t?\3525\207\265B\242\n?\250A\342h\3309\007?\223\010\236\214;\357\000?Y\346\010t\201&\375>tR\251#\221\307\375>\235\364\031\253(\271\376>/t\200\273G\221\000?M\341\234l^0\003?\352M\373\234q\320\004?\030\362c\'\027\276\t?\3556\003\267I\240\014?\340\001\257\340\310M\016?\244K\244\331\341T\020?R\373\010W\233Z\021?\024\374%\230 \331\022?\005\272\233L\201q\025?\247@fg\321;\025?\253Z\322Q\016f\023?\235$\002z\206\025\023?\332\n\365O\313j\025?4j\276J>v\027?\325\344\316\361v)\032?v\336J\237\3535\034?\335\"\271\307\225$&?u,\271\001\324\021&?\317F\3057\310\257%?\340\331\225\313\203J%?\334Z\r&Qq$?\342\013[\377#\335#?\301\246\250\334?t#?7\260C\237\t\371\"?#1\227\r\230\253\"?\211\tD1tJ\"?~a>\310\316\265!?\333y>\2521\206!?\n\355\251\220\203\366 ?>[7@\221p\037?\177\223\352^\316<\036?m\353y\307\301V\035?=\220\265\271C \035?\222\314,:@\315\034?v\023\230($\224\034?s\234\307\240\224\302\034?\024\014\230\324\221\242\034?\013\2302\003\244\034\035?7F,\016\331\323\035?\216j\374\265\001G\036?`\224Ox\321\243\036?\214\352\337\273\356) ?u\364b\242\355\n ?\353=\300S\373\206\037?\031f\221\273B\376\035?c\021\375\271\354\000\035?#w\2655RQ\035?8\364\007\344\301\377\036?\024M\322\302\206#\037?\274Q\306 \371H\037?\247b\242\302\212\263\037?@Im!I\302\036?\244\201\236T\233\002 ?\341\023\222\234\261\007!?\257\245\010\357\371\001\"?x\213\023\241\t\373#?e\264e+\365M&?\306\302\"\0349&)?\n\304Km2u*?\375\217V\371\301\240,?{e\331\3611\350,?\277\035\302\247\"\335+?i\272\222u\034e+?6\244\274\034\227\355*?\324\263\266\257W\346*?lV\362\273-\264*?\231z@M\353>)?\231\347\3414\337\351\'?\002\272\377-\240\316\'?\267OM\235\325o\'?\240\315|\227\352\263\'?G\305\210\017\257\225\'?\362!MaJ\311\'?hd\270\203\326\230\'?\273\257#>\022W\'?\257\216A\371K#\'?\353\"\217$d\307&?\265\246S\000\207\256&?\343x}g-e&?o\216\3428\312\243&?\205\332\270\303\373\261&?\337D\217@\005\205&?N\243kT\027X&?I\235q\373\224L&?T\232qsZR&?D\332Y\003z2&?YG<v\243\321%?wYNmih%?\366W\343\372\344\031%?\316:\212C\233\273$?\265X1,\344\351#?\326\220\234r\243\315#?\261\265\306\271\260\342\"?) \227\177\307\314\"?$\333=\234g\274\"?\310harJ\020#?\302\022\235\322\262\317\"?\000\' \225~\234\"?z\312\300\272W\321\"?\336\346\256\241\253\337\"?e\35114\030\317\"?\032\346C\321\265\217\"?\311!J\312\311\003\"?k\324\374^.\325!?\355\261\205\004\262\365!?\311\374\272\013H\206\"?6\360O\033hM\"?g\014\265\236\010\177\"?e\206\360\3349\234\"?\t\211m\270\263\242\"?\312\316\306=\242\261\"?\177\221[\211\374\327\"?\352X\010\037\010\230\"?\331\356I Xg\"?\261O\257}\311\022\"?\263&\353w.z!?\235\2662 \374=!?d\255\331~\275\270 ?t\374\032\300\220\022!?\377\330\2571k\006!?k\030\214\261\026\026!?\361\373\016\260\034B!?\335\267>\322\376\014!?,\312\213\235\007\257!?\341\220\243\277\353\301!?\223\344m0\312\357!?Ay\243\177\027\360!?\210\005\301Z\352]\"?\342\355U\354\256:\"?\n\261\322[>\275\"?7\n \347\303\324\"?lk\336M\304\026#?)H\374\"R\347\"?f0\227k\t\255\"?\024\247y\030q9\"?\"I>\346k\345!?b=b\262\300p!?\331&\236~\023\264 ?P\023\260/o\224 ?\010\317V\356\235\202 ?P\236V*\330\341 ?\263\335`O\013\303\037?\325\264\375\276\216\036 ?\031\307x/\037\222\037?\317\032\252\314\016\235 ?\321_\265 \376\333!?\203L\273ct\352!?\267\032\315\"\370\005\"?\325\347\242\325T\014#?\204r\306#\375e#?\036\375ZW\377\371#?\351N\250\216\362\037$?\274\300\rz4\252#?y\236\330@C\312\"?\200\346U\230\034I\"?\304\235\221\\\214\356!?\230ta\2224\371\"?\271\203\272C\350r#?\310\214C?K>#?\310\254\360\3042Q\"?=\002\323\367\207\036\"?YJ\221\332\226\221\"?\330\306\344|\315L\"?:Y\213\313\310\213\"?\242\237U\330\237\323\"?8!h]\207\220!?\2770\323\325\241\303!?R\230\307\377\274\'!?\211\364\243-#\377 ?2\214D3\022K!?\330\261Dy|\001!?~\010\017r\225)!?\217iha!\003!?\005\227\345\360\353\265 ?S.1\357\241\337\037?e_m\035\000\227\036?m\001\307\274\223\361\035?\371\033\\V;l\035?$+n\305\306\010\035?0\305,\346\255\333\034?\004\347\025\032K\002\033?s\351\273\002\241Z\034?T$\236m\347[\034?\264\327P\244\332+\034?\322>]\252\3003\033?\306!\260\254\023\033\034?=\341,\362\331\244\034?\320\342\t\340\r9\033?\312\312\367\330\322\255\033?\276I\\\222\306\022\035?\320\007\032\037\245\223\036?\314\346\360\227\266\202\035?\014\213J\035\366\330,?\236\025t\"\221\033-?\277\n\375\007\351\r-?/C\353\372h\345,?\244\341>\271@^,?\311\251\235ajK-?\022b\243\266Q\300-?\310\373s\374\020N-?\377\307yg\003\234-?bnaW?\250.?\2553\235!E2.?o\366\007\312m\373.?\377\004\177\016\337\001/?r\272\314\263\te.?\211\352x\217\335L/?\254\226\336x#e.?\007Z\344Kf\304.?\274\367\351\330>m/?hH3\033\006!0?\203\001\310,\"Z0?\030g\t\273\363\2070?\203\274\031\223\320&/?qF \240\363\001.?%l\366B,[.?\365ia\213\347\260.?-\317\360W\342\260-?\342\260\2057\243\232-?\026\347\010\026\020%-?\205\341\366\340\302u-?\251;8\240\361\271-??\262\2132\263\200-?6CV)\3206-?e\216\\l\227\214,?\302\014t\212\341,-?y\241b\227\006P,?\311\367>\265\3672,?\240\255P\222\030~,?H\367\2004\3643+?\374\251&\305\035(-?\202\277 hS\025-?\237\310\177\300\204\203-?\376\222,\336\312=-?v\221V=\337\235,?\253\313\\\362\325\024,?4\215t\246\3231,?@\224\206\037>\336+?\326d\266\371\271\200+?\021w\3029\215.+?\233Fo\305\271\336*?}\315\230\240\213(+?L{9\2421I+?\233\321\025\300\",+?\214eKm\341-+?\326{\260\340\014k+?\265\340\003CoT+?\"\353\2229\342\005+?;\322\033\031\244\023+?c\302-\364\310\354*?\300\200Q\216q\341*?\324\002\324\004\354\313+?F\004\232\n\034\311(?\206N\346W\'\362*?0\017\231\362!\250*?\n\\\332MI\006+?\022X\0205\227<*?\262\205\253\371\255z)?|\t\"F`\220*?0\\\215T.@*?\274\360\253\273w\251(?\326\321W\341\255+*?\373\376Q\304\267\352)?\314\213\346\335ez*?\005\243\324V\323\222*?!#\347\227\235R)?\317~\232\026\231\331\'?$\001\373\314\177f%?\352\2617uA$#?D\266\366\265c\'\"?\020Y\273%\355\321!?\004[\016\274\246|\"?X\233\272\203\274D#?6\234P\2159\375 ?\371Y\331\374\307[!?\212\202 \r\225\351!?G\273t\r\3374 ?6BtE\177!!?\362\326\177\361\232\304!?>$[\341\206\255#?$3rq\257\'%?\377\224\241_\230\242%?P$N\335K\320%?hK\225\251\373`&?P\010$.\356\251&?\211\220\350\325h\210&?/\001\203\232\3357\'?\313\311\027\366\254R\'?\252@5wW\352\'??>\254-\370\021(?\360R\311\204\210i)?k\200\261B\272m)?\n\003\253\367\017z*?\327\227(\037\333b)?>v3}Xj+?{\366\\\246&\301+?\014l\230\030\000\347+?\313\217\033%\177\225+?\355\352\t\326.)+?\005Q\260,\274\276+?\235\000\324\036@\320+?\353\020\370\366\300$+?Nqu0\375s*?\366\374\214\262N\372*?\257\2419\212*\376*?B\241\274\224\\\363*?\207\221\310\270\216\343*?\324\241\354\220\0178*?\252\354\266i>w*?o\277-l\216\362*?45\362A\033\365*?\306XW\031N\030+?\325\024\354\262\244K+?\355\352\t\326.)+?\272$\2604N\025,?#\372\243\022\030\227,?c\342\214\352?.+?\267\031\324\2421\237+?\0145\361\253\305\351,?\375`\2659\233|-?\214p\213\340\034\001.?\253j\366\376\016^.?,\005\235C+\215.?\362xU\305&\302.?\021\003\227\246\214\250.?e\3061Kh\266.?\207I7\0202\223/?\0240E\257\302\n0?=\334n\177\267\0130?L\336\373y%Y/?\000HaoF\363.?O\310\374\023\304\217-?\352@\307(~u-?\245\245\265\023l\366,?\372\2532\031\257\365,?$\021\354\210\333R+?\315s?\005\222@+?\252\\\340\246\312\355*?\321\306-\300 \344*?o\327\324Db,*?_\201\326f\335\353&?hrM[\005,\'?\333\240)M\340\\\'?q_Ay\243\177\'?bV\270}@\264\'?N\031\363\313D7)?\024\215\253M@l)?\264\262@eC\321(?\324%\210_V\315(?UBp\217\267\362(?\001\346\231\030D\004)?\331\321\245p\036\375(?\203\344\375\265Ed+?\365\363\331\023\272\321+?w3E\256\013\247+?5\372\025\216\307\334*?\320\233\3627\215,*?\264s\341\332e\314(?\336\022\312\014e\362\'?\203\216#\304\377\227\'?\225\242\210Q\177\331\'?\305\354\341\242\305\337\'?!N\241\237\033-&?E04\365\277\376)?\"\306\003{`\210+?\244\010\367jJ)-?\210rI\245=\375.?\304W\'\246\21410?\034\342\265\321T\3350?\302\364\227\277=-1?\237\331\265\212\354\3550?\t\014\\\225y\3501?\030O\273\232g\3451?D{s\272W\2462?`\255=`\334\0253?h\331\220\010Xn3?o\341Z\234\03204?O+1A\240B4?\'\000C\262\'Q4?\000\002\352\216D\2663?\311\257\037b\203\2053?aw\221t\22392?p/J\177\030\3511?,QV\t\237x1?\231q\200\204T\2260?3I\260a\033+0?\340\242\242\320\0036/?\2137\273\200Z\266-?\360\232\016\237\237\242-?\013\246\307\332\322\257,?S\3748\312\\A,?\373\214\200\024\271\003,?W\334\'cV\321*?m\245\216\220\254\274\'?\325=}\307\232\330&?j\260\314\002\275\325\"?\210\223\357\252\353v$?\223h\212\177&b$?\272\206\220(\361\017$?\033\014O\221>\013$?\225\363~\t\000\201#?TU\264\256\333\344#?\224\324~u\231\275#?x\370\264\210\375\245\"?\357\242\221\312r\344!?J\240\373QX\322\037??`g\010\234\254\036?\031PD\306pc\035?|+\252/_\037\034?\003\306\273\242\342\237\034?\301\301\331\013\3273\034?\354\210\'\341`t\033?F\356\315\225_\013\034?\232!\222w\307\217\034?\005g\375!\216Y\034?\241\276\273NP\256\034?U\014\367\224\023\"\035?\217\013\tC\335:!?\037\034[\353e\275#?\341\334k\260\214\347%?f\232do\037u(?7\227\"\306Y{)?\024`\026\342\252\025*?\320\030\004[\307\346*?\346\323V1\004\034,?\2327\337l\231*-??T,\024o\270-?E\355\322\024n\352-?s\343\336H\025\317-?\346\371_\360a\335%?\010\376,\240\224l,?5\210\222m9\307+?\365\212\273\002P\023-?\321\241Pr.\225,?>\363D\240\222$,?\214\364&\257c\226,?\023\224h\352\361R,?\251\254\\^oQ,?d\202!xj\230+?\200\275\367t\313\307+?\363\313tp/\267+?\272\210\236}\255\227+?\021\222?\367i\005+?,>\354\"\330\372*?\360\246\310\022\267\271*?\370]\302\265\233_+?\340\224\214x\277\305+?%\321\337\014}\376+?\265\333\323zd\030,?\340t-\202H\204+?\265\241\244\270\221O+?\232:4\321\214\352)?\224R\276\nj\244\'?b\330\371h\205\252\'?\333\376\210k$%\'?aw\304e8E\'?.\307\005I\232\235\'?\335*q\3458,\'?L\342|O\204\213\'?\266K\312\306K\203\'?\003\177#zL\266\'?\337>\262\206y\371\'?\361\035\312\212\300\334\'?\247\251\005\371P\327\'?\"-G(\263\312\'?\027\371\355\322#\231\'?\211\245\210\331\271\323\'?\341j\232\000\216\000(?$\350Xs\272\013(?\375\245p\375\356/(?\376f\021s\021+(?\236\322^\320\204\036(?\016\205\210\0016\023(?\323\215\371~?<(?o\313\347\337\245\t(?\245,\246F\246K(?\377\276\341f:9(?-\030/\362\277P(?\234\207v\302\tT(?\363\242\341Z\016p(?y}\377I\360D(?\000A#R\177/(?\222\237d\335\005k(?\352\276RL\224s(?me\202\024Nh(?L /\350\340@(?Q\250j,\250B(?\203\273j\240$\035(?$4\240\343ET(?\360\262\202\206\316\320\'?\245\340^\326\032\003(?\256\007\320E\374\360\'?\376\355\202&a]\'?!\254\262.\357#\'?\033Sf9\277\027%?\005\205\033\322\243\007 ?<\023\360$O}#?\326\313\371\246\014\303\'?\251@hh\374\365\034?\327\375\276\332\254U\026?\017\326\3779\314\227\027?\251M\234\334\357P\024?\224\374\343\030$\330\023?\371\220\001\352\0276\024?\275\236T\240\273\311\024?\334\027+\305\351\177\024?\334\027+\305\351\177\024?tv\327~\327\014\025?\311\307\356\002%\005\026?\032\013T\020M\352\025?\215\325A\271\310\230\026?\336\030\247\306\360}\026?\242&\372|\224\021\027?\021\3435\257\352\254\026?K\310\254\203(\004\027?\343&Y=\026\221\027?\222\343\363/\356\253\027?\274\205d\267\205\235\030?O\326^\372M\027\030?\227\361\245\246\023\277\030?\366j\333\213\303\364\030?a\032\341H\373z\031?\330\345J\363}\'\034?\020\0243S>*\034?\370\321n\311\261\302\033?x\352\323\"\211\373\033?\034\306\230L\3716\033?s\213\252s\315c\033?\005V\340\364\306\372\032?a\\\310(qK\033?\343\010\010\234[\327\036?\211*\236\250\334\254 ?Z\233\010\023-\026\"?\320Q\322\271^w#?\222\n+a\342\231$?\211[\233L0*&?\263*\241?]r&?1\323\216\3147c\'?\235\377\245\254\251\243(?7]\363\003\207\262(?B\361\005[\\K\'?%\220$\236r\240%?[9\365-\345\017%?\004\345\007\305\216z#?\022\023 \177s\303\"?\323\213\235\232\022\343!?\002#\353Me\201!?Y\032t\031io!?\250)n\201\251\013\035?\025\303&I\017\367\034?E\377\352\302&j\035?\350\245bc^G\034?\347\253?\035\352\322\032?\365\225\310\204\346\332\032?\0138\370\200H\330\032?\207\256\237YmY\031?:\205\2466\202\236\027?\225\344o1\365\251\031?8\271\252\257X\n\033?\017\331\010\020z@\035?\303!-+\323\203 ? ]b\350\2652!?\370u\003\254%\202 ?\351i\244\313\271\031 ?%.D\252\317\245\035?!\330\315\231\2506\034?7S\223sq:\032?\321\326\034{Q\026\031?\236\030H\006o\376\025?\367\203\313t\371 \025?\255g\010\307,{\022?_1\331.#\253\021?#?,\345\306>\022?\264\202\360\262p\243\022?X\n7\317\307k\024?\017\004\366\010\235&\037?_~\315\220/C!?\223\202\331\312l\014!?>\266\213\207\374\325!?L/>\300\353\027\"?\224\ny\360Rk#?qk\373\354\272\226$?k\0257M#V$?\314\002g\325Y\300#?\232\261\264\310\2000#?>\303sm\252\031\"?\266\265b\330\221\205 ?^\331V\312jn ?M\311t\023u\031 ?\271^\252\004Q\030 ?Jp\336\220*\260\036?\314J\337\340\025\005\035?\372x\331\220.\037!?K\256\251\306\'q!?\223\r\200\305\325Y!?\217\276\024\341\320\242!?<\227\213\363\225\022\"?\261j,;\246\351!?\345\375aF\326\354!?\001,P]\211\330!?\353\350\336\341{!\"?+\323\360\254+\006\"?\276\240\374\022.:\"?\223s\227\001\275)\"?\022\303U8^\216\"?\311 \235\330H\264\"?\020\360\234\024\203\023#?6\370\0079\013U#?k\032g\025.\222#?\rGU\350\303\200#?\020w\3008bt#?-\272\234\342\326|#?dGC\303\353\305#?m\354rG\210\275#?-\270u\360y\351)?1\303\237\021\0071)?\003\356\237\305W\335(?\002m\013\314\2236(?\231\025\326\002\205\276\'?\350\362#\324\305\323&?\355;\000\216\257\320&?\3572\233~\213y&?\001\230wD\241?&?\215\256\211\007\277\315%?\221\374G\372B5&?$$0\250\377D&?\325Je\255H\034\'?\244\323v\360l\277\'?\2261\262\"r\023(?\303\344\333\365\261\006(?\027\250v\232\215\024(?\372\016A\177\350\034(?1\036)KB\\(?\273Y|=q\226(?pq\013\230\353-(?\377\362\262\356k\231&?\335\2215\023\241K\'?\351P\203\362\t\234&?\232\322A1\216\236&?\212c\241\371C\003&?\n\337G\252\371n&?\345\003r\361\006\204%?@\254\372\006m\014&?D\212\217\274d\375%?yE*k\037\033&?\335J\036k ?&?\266\340\320Q\312H&?\330\363\254\331\007\257&?%\377\240\351}\307&?4X\364+\366\307&?\3050q\365\255 \'?jzS\010\031\005\'?\323\234;H\357\036\'?\203\234\270\233.+\'?\241\2405\273\305.\'?\341\026\233r_\260&?\370\201q\221\367\201&?$~\014\360\271 &?\346\353\312\0303J&?\307>T\\M\205%?\026c\271\325\016\247%?\257l\271\017M\224%?\276\305\014R\305\224%?\n\344wr\004\253%?n\316\356\264(\370%?\226\243\203\322p\372%?\263E\036\3759I&?_g\006\233\201d&?\374\001\247(\253\252&?\236qw\\\250\212&?[\364\270\351{\177&?\263\324G\316,\203&?\003`quV\304&?R\332/`H\325&?>\n\014\226@\003\'?9\231\3128\314\353&?\261<\352\335\217C#?z\263\306\323\004\347\"?\333\350\272\365<\255\"?\222+\205\330J\374\"?\320\022s/\201r#?\321\327\226{-Z#?\372\313+-\334\037#?\275G\177-\204\334\"?+\0378\035\267N\"?\323^\366K\301\243H?t\326\021\0013QG?\241}\000\340EPF?\262\267\241\035\310^E?\374\337\305\206d\204D?x\301\r\034\303\250C?\233\300\nv\027\266C?\000\367op\177\264C?\023\213\250![\252C?\016\007Ile,D?\376\353\247\302I\341D?\261rQ\365w+E?\367%lV\265XE?d\244N\250\366\325D?\377\205K\262\001\035E?\t\332\252E\300\370D?W\010\"\300&\301D?RF\020r\324\215D?\371\207\365\222;vD?T\034\237z\270\245D?\016\303`a5TD?$g\245l8\374C?\374\301\031,7yC?\004^=Y\367\260C?\203w\250\\\227\320C?\361\356\223f\2358C?\264~m\334\346\266B?c\363C5\275uB?\371\330X\347\352WB?H\371\341\321\332\365A?\201\237>\360\233<A?\343RS\232\346\200A?hKb\270VUA?\350[h\254\322\035A?u\220\315\021\326\037A?a\241P\373\037\363@?N\301\320\331\270\264@?\344\377\273)\330\213@?\20490o\304I@?l\026\3051\346<@?X\363\273g_\244@?\232e\000\274\306\255@?\227\351\246\263\344\010A?j\2042\030\031\240A?\34085?\032(B?\177E\024\031q\217B?\260X\024\215\355iB?%\264,2\026ZA?\263i\315\330\225kA?c\225\213^1\026B?\367\252\002\246\355\016B?\336\315F\363o\263B?\021\232C\243R$C?cp\256\020?\307C?~\341\327@\241;D?|\336Z\024\3405D?\203\333Q\321\225^D?\257G\026m\344sD?P!\037@\373\233D?\364\234\321\257\335\330D?}\3613\230\000\250D?7\272i\204\225BD?\024I.\336\023\024D?\231\301\020 \340\234C?\371\345@\315\230\233B?\340\r\016\233m\023C?X~\317\376\366+C?\226\304\311e\362\271B?s\262\363\207}:B?$\222\021\345E\005B?\360\342XrpDB?\307\204\344\331\357\315B?vS\3602\310\377B?\251\t\240\355\330\325B?\257M\363&p\377B?\002\235\341\2675\252B?R\365\322\344\3077B?W\024\3343>\330A?D\227\235i\265\314A?Y;;-\000\014B?\210\351\202\307\245\224A?\2168P\037\002\300A?\013J\265u\216\006B?\271\356\355c\363\333A?\371\nw\323\322\201A?&\327\257\234\006\nA?Q\033\017\225\312\004A?P\256Y\311\357\266@?6k\206\332\212\213@?fx\225\260\2247@?N\242w\215\nZ@?Z\272\364\302\2546@?x\221\203\276fL@?*\200\367\310\305\234@?\245\341\304\362\017\244@?b!\313f4\020@?\310\211I\224\312\317>?\376\236g\322\3671>?\371Q\257\211<\261=? \270y\314\010\273=?\255\2008\313\t3=?r\334\323\034\363\026<?\342n\367\017ua<?\266\251\\\3264W<?S\33586\366}<?t\211\251H\023\\=?{\000\360\'\341D??\335\331Y\037\317a@?B|e\2009\352@?\003_\326f\221]A?G7\331>\230\237A?\350L&\343\";B?\245\216\363\326w\200B?\177@\213\230\036\274B?\223\233U]\217\333B?\003\377\034eK\366B?\0144|d\243\016C?t\2474\225WDC?\037^\325.\255SC?\216a\317P<dC?qp+\265\305\322C?>C\264-5\010D? \\\"\223c\035D?\236[\275\312\247\265C?\332ZR\372\261eC?\304;\327/\214\177E?\372D\'\026\273\'F?\341\340\240\367\245\002G?\312\361\233\246\365\325J?\027\274\326H\214JL?\203D\221\360\350?N?pg\231$\032\315O?\345\241\003SL,P?\2572\260\024\035WP?=\370\254\022\374\324P?\010@7\217\036\032Q?u5:f\'#Q?\303\207\223\255\216\031Q?M\227V\'\215\357P?\371\222\3560\353\232P?\177Xgc\302\273N?\2719\225\014\000UL?kAR\270\334hI?|tUfk\371H?\216\215\352\273\365vH?\256\333\216\023\240RG?\235\004\326t\264\337G?\017;j\2042\030I?e\t\223+\272\312J?-\n\2107\325\324N?\236wz\335\326\241P?\017\303\220\232K\261P?\257\276\rsz\305P?!\271S?\021\271P?\r\223%J\255\275P?<X\030\205\321jP?g\214\026m|\220O?\227e\205\253\316-N?\363;\236\255\273-L?\207\353\244\000I\277J?\206\317fm\004\366I?\264\025\003=7\341L? a_\205p\331L?@\375\362\277\030nI?!=\267c\371\331I?\002\rR\312M\317I?l\0361\301C-J?\247p]a\\\322J?\020a\'\265J\302K?g\334_3|\350K?C\270q\247N\351K?]\002\343%\247\222K?s4\351\344|\031K?\324\350\252\200H\255J?\3067\220\005\267{J?K\007y\2524CI?_\034\224\344D\261H?\'f C\205\362G?h\345\221Q\3733G?\362\3325\271\311\274F?\2007\247\t\020BF?\376\021\370V3QE?\256\344-\316M\330D?\302Qi\371\276\016E?\343\'@\332 \017D?\255\t*)\376\217F?F0n\240I-G?\357\223\202\362g\rH?\331\310@a\372\245H?H\000 \357\241\271H?P\3517~n\211H?\"\377\253\022U\215H?x\363^\371O\336G?\360\"S\013\023\260G?\002\226\035a\237\240G?\222\354\377\206\312kG?\026\'\342\240\311mG?s \2116~\343F?%d\367O\375\244F?\306\267\342\250\375RF?C*\302\3267\363E?\326\n\354\224\273\215E?\263e\313\202!\\E?\234\010\212;\270\035E?\334\324\357\253:\367C?\224\341f[G\001D?\250\r\3254\362\360C?K\264`\271\020qD?\251\326\324\017p\\D?]\t\223\230V\371D?\321\035\0012-\027E?1;\2473\331:F?\021f\221(\337,H?\003\263\034\312K\\I?g;X_Z]I?\237\261\253\240\324$I?\274EX;\'II?.\310\037\327I\'I?\214\016\035Bb\251H?0\375\272\357\362VH?\r\036\035\214\025\213H?\3719\032\224$`H?m!\232\t\036\220H?\274\352\272\035\005{H?\005\320U\336\201FH?\202\357O\014= H?\234o\024\276\226\016H?\325\241&<\231fG?\375\325 \"\356\027G?\005\255 \003\002hG?\0059t\357\353\004G?\002\222A\322\315\034G?\373\256\301(,\344F?FsP\001\261\036G?5\367 \234\000\327F?|\272\345\343\rBF?\307\252\265\356\356\032G?\343\231D{\304\001G?\216o>a\310kG?\340\204V\350\002\345F?\300\261A\010\303\336F?\335D\232i\334JH?;\320@\265\214\227H?\rX\363\225\240\274H?\221%\307+}\331G?\226\n\265\234\007TH?\364?\240\0030=H?\237\330On\367LH?\257\325X\241\314/H?\337\340Rh51H?\262\331=\353\255\220H?LH\224\213k[H?\340v\032\311\033\351G?\203\016\367\347[LG?{\024\033\344\017\265F?\345\0246f\206KF?\321B\244\324\2257F?S\312\323\010\351hF?h\363\315p\342/F?\273m\225\026\344\035F?g\010\263H\224oF?\305\031w\016[6G?E[\356\374=\331F?\305\272j\376\225\036H?\002\225po\036QH?]h )1\356G?\216+VV\230\223G?\263\336m\263\270\314G?\251\004J^+\016H?u\275\002\013?\274G?U\002\367v*dG?S\217P\r\335\347F?\341A\033\317S\\F?\333\237\017\2770\323E?\262aH\254\227oE?\3177o\2121*E?\324-\r\214T\311D?\032\271\302I\007\334D?:\377\033 =\352D?\223=\n#2\266D?\'\250\3241V\267D?lWl\274\t\370D?\202\2123QGqE?\'ub\0145\325F?\306\016\2447N\235F?\376+\310\"\217\330E?\272p\t\210\225FF?\3759\017kM\232F?\020\014\241\374=\256F?\335Zz\302\177\253F?8\302\334\315\327UF?\215c\003m\233wF?\337\223\361i\372^F?4\276P<>\214F?\017\023\230Dy\303F?S\274>1\272\325F?vO\356\334S\360F?Q\3132k\371\346F?\267 \230\371\307\250F?f\367[pC\342G?Sz\035\246\272\326G?e\3206\"\013\335D?\336p\250\252\223\335C?\256&OYM\327C??-\016\200\033\326B?V\371\267.\251\230B? \334\341\322\330.B?\276[\254\352\335\006B?\251\245\235\300\222\260A?+k\022\361\023]@?\365D0>g3@?(:\315-mk=?\354~\307PK\374<?\333\240\003\206=\321;?\256\305\033W+,;?\003LX\234\343<9?\344\226)\302Zp7?\"\016\356\333\004p7?O\324\334N~26?o\026Z\226\342\2745?\373\2620\033\317-5?\371\367\036\320\307\3544?\342%+\313\177d4?v)1\254;F4?U*H6\316\3335?\376\023\rf\324\3734?\210\315l\374.\0214?\252\365\350\207\275\3025?e\037\006\350.\3616?\314\266\371\235+\3547?S\267{\005\336\3239?\004\242\200\035\232\332;?u\345\007<\235\034??\240q\353\262\273\347@?\016;h\203\007^A?K\352\355\227\233\344A? \305@\244\315\333B?\277\362\215\331sHC?\251#p\2714]C?\274\202o\305\276\227D?\276\027\2124$\000E?\277\230\036.\350\246E?N<\225C\363OL?\261&QZx\221K??\221\304\036\034\344L?\355\2375\254\232\001M?\221\345\224\350{\371L?pp8\337\307RM?mEV\017|2M?\3739V@\331HM?\320\206\323\264Q\276L?\356v\336B.\243N?\374W[SN\353N?Y[v]\377{N?\366\361\1770\2702M?\307\036<;b\362K?\014\355\205\312\013%M?\366\367\027\026\343\311L?\nZ\331\"\217\376L?\006\030\373j\3059E?\352>\271\323\301\355E?QG*\000\204\027F?~\317\323v\317^F?Su\200A\201`F?\315\260V\217)\217F?\252\000\025\027\022\363F?\213M\301\240\240\242G?\240\352g\034\260\314G?^\002\035\3210\301H?7N\366\0168\304H?LYX\000\353\"I?\374@\032\227oRH?6H\005q\305\225H?a[\232\266\332\036H?\330\307\330C\332JH?\302,\240\217\263bH?\3364>\022}\336G?\214o\227\031\020\003H?$6\016\253.\226H?^ua\307&\311H?TX\275\204\211\215I?\344\267\004\272\330\257I?\275\240\234\240\001\200I?\202iFv\rII?\255\007\202\266\213\037I?\245jX\337\002\001I?\344~\333\241\316\315H?\363Q\021j0TH?\317f8\022&\224G?\323\202k|\223\227F?K~z\">fF?\272XN\313\332iE?\030bZs\376(E?yJZ3*WE?)\376\217\026\336\032E?$\347\321H\334GD?\300\255\370\334\302 D?\202\374]\271\215\357C?\004\354\376\014\312\217C?\210\021U\007_\351C?\201\323\244\334\311\034E?q\371\320\204t\030F?\277\271\345A\177CF?\'5\375\327\216\351F?\365\313A\177\212\253F?y\366\307A*AF?p\204c\233\366\302D?\307\354i\335\277\337C?\372KX\t\200kC?\304\212\314\274R\037C?\'\236\256L\312mC?\014#%\214R\201D?\341N\357\320\032\375D?Bs3b\272\236E?Cy$\000-\315E?Y\274\3563\202\033F?\202\264_t\002eF?\274\247k oOF?-\250\230\030\005\240E?\331\315\003\215\326\247E?d\355z_\030\215E?\215o\321\304\2311E?\201\231\316\322>\353D?\210c\346\315\244\367D?i\217\313C\234\nE?\023\361\030\026\212\021E?\216\003\204\026\337>E?EX\277_\355\244E?~\003`*\240\312E?\227n\335\220\360\004E?D\273\000\267\313\327E?\006\233V\344\271\271F?&\343\035\202\330\tG?\036\025\203\260\350\020G?\000\324\024\316\\JG?\030y\301\366\177MG?\232(\257\206\2450H?\311\322\325\275\030AH?e\343\325\372\241 H?\257\335\374\332\210\224G?%\275\177^~\310G?\331s\224\341J\006H?\023\230j@fbH?X\340=\235\261\203H?\220\355\267\241\"\201H?\021#\257\307w;H?G\355Fk\201GH?\266\330\336\210\235\022H?s\377\325\006\316\351G?83\307\340\313\276G?\206\206\315\031\264\004G?-6n\260\276!G?=\356&\273C\321F?G\216t\006F^F?m\317\364^\361\336E?\033\274\230.\020yE?O\035\234iq\257D?\014-\362\270\2263E?\203\346}`\352\216E?:/9\341j\014F?\t\225n\001WhF?\020\251_\245_{F?u\037*\324meF?oE]\311`UE?\265\345E\3565yD?\023\347\3620\376\307C?\\.\"W\330vD?\333\306\263\214S\373D?\205\220r~*qD?\224\271\001\270\274\346C?\241:\305\306\226\307E?\"K\337\236\3712G?-\347\013\207\311GG?\355)\350\337\366PG?\355\n\217\223H\366F?\300i\326&\t\032G?\210Fh\345\r\031G?$\2472i\254-G?\323\377#\347\205\272F?\232M\345\214\337\026G?\3448q\353\316\020G?\265N\345\177\265\024G?\025\017\200\234V(G?WoS\212\275\032G?e\314 \350\257*G?N\020z\3309=G?r\007z@\212NG?\022\320\027WiFG?\203m\\\260h\373F?[\023\0226*\332F?\245\365\221==\024G?\311H\334\2640CG?o\2642\315\263\023G?8\253;\237\314\002G?g\225\307\n\346\376F?\340Hk\317\326\010G?\204\216\312\013\270\000G?M\354\227\0139\017G?\227\240\301\321N\000G?\31575\337\247\373G?\327\274\027P\211\232Q?\203\273\021\350\334\205G?\037\037P\335,\303G?^\302\374p\353\311G?v\327y\036S\254G?\376l\251X<\302G?\016\225\213\240M\350G?I:\235@\345SH?\206\326I\321XhH?\377\005R\307\002\335I?\330\245\321\332\360\230J?\3705]\022\021EK?\177\310\312K\330`L?\034,\205\010\204\022P?\322\337\210DZ\220Q?\266\232\371\376\233QR?\252\024\313\305\311\021S?t-R\017n\276S?/\017\253\325\335\220T?\256\240\236{e\227U?@\177\275\234\273XV?2\222r4\235VW?R\360\206\307\215AX?\220\361\235\242g\326Y?\213\346}\363M`[?\371<\031\370^7]?\273\244\360\364\330\003^?\002\314\267i,\224^?\243\230\211\020\301\262^?\031XU\234[\002_?\344i\226W\360\323_?\221\314\362\216\266\236_?1RK\032s<^?1\353\031P\334\342[?+M\301OY\243W?\321\241\246r\347}T?T\210\177\214D^R?g_\206\272\240\242P?5ty\224\306?N?3\232\265D\311\014M?\364R?\334\306\200K?{C\370O\353\301J?\264\312\242i\266\026I?\213G\344\346\024\027I?\220\260m&\346&H?\313\304\347-\242\026H?8X\375\346\005\245F?\347u\376\314\244vD?T\203c\250 \305D?\025\022.\271\221\177D?\223~\327t\370\374D?\235\201f\027\331\274D?0a\343\343\333\007E? PT;ecE?\033\367t\342c\221E?\200\347\203\n\263uE?\334\'BH\350\367E?\255\322n\330\334\357E?4{\025#\217\003F?\026\336\\1`\037F?\303\242\364\025<6F?\262\365S\266$\024F?\366x\252\016|\266E?\326\020\3352.\274E?\"\204\233\032\325\332E?\255\377\003DrFE?\333\207\255\272\275\215E?6\242t\034Q7F?\330\361>\022\037mF?\257\206\342\223\360\262F?\301\243SxL\264F?LUh\2152\374F?\245\306\216\n\277{G?\000\302\243g\\3G?\203\021\022\241\305\335F?3e!\346\004\000F?\262\266\364+G\017F?\343`\302\252r\210E?8|r\027\330\230D?T\300Tk\025\210D?\344\257rc\3303D?\205`U\275\374NC?\215!\010\251>\004C?\234p\216\276rRB?\213*Y\324{\270A?k\375\016\3649?A?\240\352 G$\036A?.\250e\'`\224@?\005\365D\0170~@?\013{\r\323T\325??\020\332\335\311\310\325??x\177\r\237\254\314??\364\234\367v\200d@?Z\032\251\01395>?E\2022X4G=?y\341\307\313\254;<?Nk\230vq\350;?\036\365V\253\026\333;?\335\324Je\255H<?\315\3758\016z><?\3234\244ac$<?\260\326\206\023c\\;?\211#!\'\322Q<?\326\t-\300~U<?OB\206\341e~<?\373\323>\004\362x<?\007Xb\240\226\337<?:v>\246/0=?\323&hB|(=?\341jt9\353t<?$\216Vd]\244<?\211\007\367wt+=?\355$\222PI\211<?;\261\301\241;\261<?\344Jc\322\344\004;?\261s\354\003=\222:?O\232\207\305\010\3369?\340\373P\246\'\345;?;\354D\235G2<?\231w\353\350\367~<?b\005\033~\007\244<? qb$\210\256<?\351\360\243)!\251<?\025\245\323\246)\203<?\n\264\265jI\332<?\304\277&p\215\375<?j4D\013\214\231=?\321\035\265\243\347\377=?\352\302\010\024\303k=?D~V\311b\303<?\345\260\323\306\023l<?\037N\206\001Pg<?\232\006\025\272\352\270<?C!\244\234\237J<?\257\031\033\345Y|<?\235#\t\372\277\256<?\2754\025G\275^<?\260\3642n\220g<?a\214\345\351\236m<?\263\213b\354\226z<?\017\266\3234\372a<?\023\263\3016\240\255<?\014\025\353m\226?=?.p2\327\215j=?T\020,\334,=>?CU\366\244\346\207>?beU\000c\350>?\327\267z\353O$@?^\247\337%;\255@?\362\203A9\324fA?\013\035n\231i\201A?\032\243apN\236B?\344\221\306\010\253(C?\321\324{\302\303\310C?\rN`\024\3468E?\034\364\024U\231\013G?!\"\341\355\324kI?@\306\244\013&\010K?c\007\327\324`\267K?F8\247>\002\022L?\275`Vy\031\375L?\225\210\246\242giM?E\221\210\005\313\314M?\376\017>\001\005\370M?e\3264\352\177\213N?.KU\211\233\033O?\036]\242\003]\276O?\027\251\203\376:\036P?\0367\260\340tNP?P\310\037#\330lP?Bi=\266D\262P?G|\037\365t\001Q?\335\360]x\225\035Q?\300\2162\364\345\213Q?\007b\004M~\235Q?-\234\227\317a\332Q?4m\246\022\003\374Q?\277\252\277\315\376\032R?L\346\033{=2R?\007\226\363*\nrR?\241\370\311\002:TR?\277)5F\256ER?0\214\366\243\241yR?\270i\352w\214\353R?V\036Q_\236\347R?%W?\243e\276R?%\347n\036!\337R?\016\030\240D\266\271R?\362\243\252\241\276yR??YE@\004\243R?\307N\221\246\356\210R?\245 8a\324KR?\252\271-\250\247CR?\374\026\n\311\343\030R?\230q\343\256\017\377Q?k\324\374^.\325Q?\235\263\027g\222\254Q?\241\231Z\310\271\323Q?D\317\005\254W\274Q?IY\257\267\007\000R?\201\016\273;\247cR?\324\025>\353\262IR?\312\206Q\352t\033R?\034\357\366oJ\270Q?,\036(\001{\226Q?L\256\2638\233BR?\364#9\361\2719S?\027I7\231#\361S?\375\261\321\270\276\257T?\312\341[\244\305#U?\001HTEDsU?\222\215\206\332\326\031V?V\305\242\211z8V?\310|\267\256\325tV?\244\235\031K\370\250V?\246\021m\246\306tV?\244\377\243>\342\272V?\267\350/\267%\271V?\363\362\227\275<\002W?\276\033z\247\334&W?]\356\202w\250\\W?\347\332\313A\306_W?\317p\373\314\366tW?p\\u\006\016\264W?\215\232\027v\004\257W?\003\002\034\311\205\315W?\032\352\226n)\037V?\256%\361\255\240MT?J1^\370c\210S?\311\331\350Z\203\020S?\232\247\347\233<~R?yB5yX\025R?i\353E\214U\205Q?\213\177\242)p\357P?\t\252\275\275\2503P?\220\317f\000h\307O?\271s\330\262\271\300N?\274\375\262\256\343UL?,\264\362\031\360\374I?^\352\272\314\275{H?G\261\251\341\305<G?\276W\252\224i\367E?\013\374\200\276/YE?L\265\310\3260\314D?!\177\376\265\233dD?\223\311\004W\324\273C?\372\335\234\223\3346C?S\250\336\202\273\237B?\313\267\314VO\307B?\010\231\311\017\023\017C?\240\370\"\273\201\353B?}\275:H\001\002C?\361\033\202\212z&C?6\326\2233\363hC?\034\203\275\245vhC?H\016\333\215s\330C?l\240\204\217D\014D?\037\315Qz\270zD?Hy{J\255{D?&Zx\262)\304D?\224\367\3074\000?F?\340\216h\351\247\213F?\375\207\304\242\301$G?\3060\277\204\036\362E?iN\376\361\325\303D?\314\350\252\355\344\333D?\271,\r\231~\313D?j\365\342\177\203\332E?\363\364\005\205%DG?\021\364R\334\261\013H?\023/8K\025\001H?p\337\306\r\217bH?\236\353\332b\247\355I?\002i\260\275\327\217K?\031\2642\017\320\345L?N?\035\231\213\033N?\202\242\242\177\2746O?,\000|\246M\213P?Y\322\0108\257\252Q?7\251LW\316\343R?\317]\\\364_1T?\367\276Np\005\242T?\275\255\371\223&\025U?Y\',\306\000VU?*!l9\026bU?\251cL\374|TV?}\'\364g0\'W?\242\332\013\305P`W?\014;WW\257iX?\313a\t\001\177LY?\271\331\013D\320JZ?_\222j\242FV[?\240R\263t\366\257[?\177\245\237\342\313S\\?\003\262\346\346l\030]?\356\200\227\213\213\262]?\307@v\225\360\257^?-S\0035\313Q_?RX\247\237w0`?Q\227_\342\234\314`?\007\273.\352\375\300a?\263Z\332U\272Nb?\254|\367\020R\214c?n\222\245*\373\033e?\031\320$\024\317\227f?g\017`\003\265\'g?\202\321\255#\203\346g?\231\352Z_J{h?+J]\3008\251i?\371}\026\203;\333i?~p>u\254Rj?\240\020*\006\202\337j?\257\300\222\326\330Xk?mpsA\265uk?\201\036|\276\354\362k?]u\'\034\235\232k?\032\241X\324K\177k?\253o\271*\353_k?\222k\354\r\034\242j?\004?5TH\326j?\225\252\243\231\335Ij?4u\252\276\353\032j?Y\r\347\354-}i?\253h\251E\017?i?\037\364\336\253eQi?\034\321\252\207Igi?P\034p\370\005=i?\010:\234\361d\324h?\033\024y\004\312\265g?szt\251e\371g?\314<\022_\210\375g?\221\325\255\236\223\336g?F8&\276\3544h?1U3\3427\302h?\341\330d\241^oi?J\276[\036@\306i?\270^\301\240\306ij?_*\221\237\350\025j?\361\214\237\216\023\233i?{)\024\240\250\227h?\375\213L2\005zg?A\264\230\320\013\024d?\237\306\372\\&\360b?\243\277\002^\207\346a?\225\215\2461\\H`?\212\301\252\027\317\342]?\270\233\306G\242\317[?+T/\2466\304Z?\301\230\263\222\344&[?I\313]X\362\t]?\342\016\333\343s\221\\?y3\325YN\276`?_\rP\032j\024b?\360\257y\260 (b?\374`<*\316\266b?bv\344\202\022\352b?\331\000\305\370\313Oc?eC\030\356E|c?\025\351\263@\021Dc?\262\262\253\000GQc?\352\352\257\323\037\314c?K|\220\223\371\257b?\375\351\2753\005+a?@5\204\201\354\227]?Q\261\212gk\245Y?J%\244\204LqV?G\350\343\261\321\377S?\333\214p\346\231\217R?\000i\220fRaQ?\023\237\267\210Z`P?\360^\312\315+/M?\335\034\266Fg\rL? [\025/\266\023L?Ng\364\221\376\330P?\327c_\010\362\031T?\310\264\214\215\246\236X?\034\240R*\203\230[?\227\320\270\313\331\226\\?\207h\031N>\342\\?\347t\005M\336\017^?\032\207bAMl_?4\340x\263\020a_?\005%\360zu\375^?j\353\204\360\230\034_?3\217\236P\277s^?\262\361\310nR\020]?\365\254\326O h\\?o\3261\305T\256[?\237wB3x-[?\032\225\212|M\305\\?\r?0.\362>`?H\024K\253\320)`?A\312dE\310\321`?b<M\335\312O`?=(\2616\211\353_?\263\005\306\362\225\335_?\005\370Z\017\340\246_?\201o\303\275l\032_?\340\035<\272\341\334^?\023\240\374\226f\336]?\267\327\274\211\245q]?dZ\320\270\306 ]?\020\372\023A\016\335[?6(b]QTZ?|0\332\367i[[?\250\0353\215|\027\\?A\216\367\364\"$\\?#\273:\026\307\300[?\\\365\372?\371N[?k\221\316o\201\314Z?\201\211\257\336\367[Z?:>_U\3534Z?\006\311h\010\272\002Y?M\377\"\000\351\257X?\375\030\\;\235\240W?\365\247_\262\211}V?\273V\255\022M\034P?\341\242\334{\215dL?\330k\242\030\036\320I?\277;\224\311\362sH?\037\322\002\303\330\223G?\305_\315\340sPG?K\3545\230\341\232F?\205<9Er\362E?\3114\351\242`GE?\226\t\207*q\'E?\221\n\027}\373\366B?\362)\337\267JE=?\007\214\201\2678\021:?\362\300e\355m56?\353|\2213\301.2?\320+J{\026\223-?K\322?\005\343\207*?\254^\210\031=^(?\207fZ?V %?\211e\373\334E\242$?U\344\335\177\316\036$?NC\177a,\345\"?\372\214\314\242\376\032#?\203\220J\266\\+!?G\342\023\"H\364\036?\376/\353\206\354\n\035?\320Y>I\274g\035?\356D\346\035\351\004\033?\246\016\"\264F\206\032?T\344\020qs*\031?\312+\337L\257A\035?\353\r\274/np ?x\240\263\244ZF%?\n\366\265\347_\2660?(\2075\346\214`7?\235\227\331\323M\343@?\337\2772\234V\375F?p\267\366\316\000\310M?\264F\254\341\374/R?\361\027v\302\222EV?\321t\353?\257\233Y?\300-\035H\036U[?\342F\234\336]\030]?\247W\0362R\340^?\255\200\010\222\363\325`?\323\251?\203\314\034b?\221\241\351@d\376b?\004\007|\312\246fc?\241\276\002$\334\\c?\211?\241\326\350`c?^\277\002\306j[c?\001.!O-\203c?\207\"\nQ\261vc?\223\266\327\323%\033c?u\206\254\345\003?`?\3669%\275\373%Z?\315yB\206\300WU?\207\371\205f\275iQ?\255j\327\361P\365J?\246\341YW\014$F?\275V\325\332\032bC?\255\021\233q\025\351@?\267\240\037\217\336E??\341D\221A0?>?f\201\033\316\241\261;?l\004\316\221\026\340;?2\"\206Z)\275<?g\205\3522q\2652?\013,\'q\273oc?o\013\352\351\220\214f? n\373\334\330\005f?\363*\361\324\261\267e?7\246\3629!\273e?U\301\020\210\303\021e?\271\352\346T\305ce?\000\333\236yi%e?\225\017\275\234DJd?U\275\326\207\360\215c?\263=\371Bh\007c?\267d\260=\016\336b?n\022\007\371n-b?c-\020\315\324\325a?\322n\255\\\223aa?\330\302\0035B`a?\220\363aj\t\0012?\263\337\255\010\013\3424?\023\002\003R\254d1?{\325t\204\246\0010?\205\340I\357A&.?\255\362b3P\261+?G\331{!\177\221)?\222\227\254\277bc\'?\024\177\225\365\373\373%?e\342\247\210\013\364$?\324\272\rj\277\265#?\220\274\272\375\316\003#?!\001,\275\371\267\"?\334\007\273\211\243p\"?G\363I\354\257^\"?\216@\010=\245\307\"?|\372+\013\366\304\"?a\017 U\252\312\"?\333\321\300\016\352\302\"?\243Ey\220\345\367\"?\353\364\031\326\250\025#?\374yU\2225\035#?h\030\360\2225s#?:\007g\241\261\267#?|w=.0\177#?]\2067\037by#?e\234=\322\0137#?\210\263\2340\323\211#?\256\006\242\323e\304$?x\024\022)\000\330&?\r\376\026N\346\340(?\317\260\222;\336w+?\235\364\031\253(\271.?\345\376\0168W<1?C\002\227\3366\0073?\355#1\355\rQ4?s\250N#\007\3164?\343\241\217\3748\3175?\230\340/\301\004\3116?dt\262g\336\2207?I\267\232\1778k7?xc/~\224\2757?\023(A\003\332\3537?k\224#\324t\2147?\006^\276\331\014\2167?\202o#0\231\3247?\340p\320ra#7?H\231\225l\303\3105?f\243\357E\346W4?a\325IK\037\2312?&(\200\215\344%1?\315B\250C\210\332/?\021\323y\345^\206-?<*\236}\\P,?u\256-\336\275\023+?\353\274\370h\222\324)?\323\325\275\030A\230(?\267`\270Y\r\240\'?\264\027*/\224t&?\270,fQ\306b%?\207\304\271]\232\350$?v7\306\203j\331#?\234_\336-\332-#?\236C\002\016\355\330\"?\306\244\352\027\037x\"?\226\346\344\262\302\016\"?c\314\213\203\263\252!?Jk\307e\300\177!? jJ\316cv!?XUP\315\274\207!?U\226\273\253+Z!?r\177\273\r\346\206!?UW\\!NU!?\235`\331\256\313N!?\366h\3156\007m!?\030\344\032\336-B!?Gv8\311u\244!?<\344\177U\242\252!?\241yJ\030\027X!?b\211\251\"L\271!?\224\350\360\006T\334!?ZB\331\274\363\211!?\352\252,I\037l!?\351\345\010\375r\204!?X\241\227=H\320!?C\014P\'\224\026\"?\333\0038\263\031\204\"?MI\016\214G\237\"?F\357\306\025&r\"?;B\221\344u\241\"?\007\212\314\032\304 #?\225\000g\357\255\304#?L~\r\206\017,$?x\312r+\347\377#?\263\235\037\341\334\250#?\303\305\250p\2467#?0\345%\372\332\005#?\261\215a\026&\310\"?\201Lm\324\003\031#?neO#\251\\#?\375x\250\240\264\315#?U\024\373@\374@%?\336\214S\332\006\341&?\222\340\236\313\372\353*?\206Y&\313b\305-?4\267\264\255u\310.?\370@\266\"\355#0?W\034\'\265\262\2450?h\r\260\037\372\2370?\371\207t\022&\2310?uqt\305\'\3050?`\271\367\323\363,0?\201`\337e\27671?vgb\304\202\0361?%u\315\2478U1?DX>\337\327\3071?U\024z\300\346c1?\253\336m U\3731?\031\255\032\271\253\2551?\013F\331\346\274\2021?\034\203\251\301\217\3051?T\321\227_\177r1?q\376\177\314iw1?\225\365\1774\272\2101?{ h\273\370\2211?%pD\'\346\2011?U\006\2140p91?\t\367\273\221(\2350?p\202\033\233\260\0140?\010\224a\235\251^.?Q`\331\203K\362,?\326<QV/f+?JHF\374\372\211)?\331\311\355R{\365\'?\002\031\014>e\346&?\356D\263,D\371%?\313\320\241\241\271-%?o[=\"\004\266#?\202\004\251:\002\275\"?V$8\213\235D\"?\304^2\322\256\351!?\346\2158\tJv!?L\315\251Z\2164!?\350\177\361\300\213\264 ?>\274hA\210a ?B\320\367q9\000 ?\303:7h\r\260\037?\\x!\307\035\t ?\231R\'8\246; ? \026K@5& ?2\002K**M ?&-\260U\357a ?H\364Dm\241\177 ?*n\206b\305\205 ?O\353J\214\344y ?f\353\331\246\212? ?\027\0361\003`\377\037?\006\022\322\"\364\226\037? \350=\325\356E\036?\025;\010\244>u\036?\251j\250o\236\214\037?\213YCjYE\037?\2012\322\372wW\037?\261XI\177\275/\037?\373\200\306\240\241\354\036?\276\252C\006\243\246\036?GN\010\030\273O\036?6\245\352\216-\032\036?\274<&\035\250\375\035?.\005\353\322\233^\035?\213\027\\\212\343t\035?\362c\265\301\325v\035?^{,\236\366k\035?\324\034VA\327\201\035?\014K>\241\227\204\035?\355\036\\\336uf\035?\211\277\213\226\272f\035?i\246 \344aF\035?\357\326\227Dt\n\035?Rd\\Z\325\336\034?\217\217\331\003\364\225\034?B\\\200P\363b\034?\r\355,\022\304\215\034?G\241\3313Ss\034?to\200\304o=\034?\230\202\252\333\035u\033?wM\025zg.\034?\235\220\\RC\210\034?b\246\265\265\372\364\034?\267.t\246\202\352\034?7bV\2756\372\034?\311\021\017\201S\272\034?L\037\003wu\316\034?\244^P\334z\030\035?\235\217\257`\3028\035?:\002\353Jad\035?\320\333\1774\001^\035?$\250\177\350\000\303\035?7ss\352\375X\036?\346\307\234\275\354\004\037?~\332\001\007OI\037?\317k!\005\245! ?\003b\230g\263W ?c\020\033\326\233\353 ?m0\002\232p\376\"?!1I~\'\332#?\013\327\335\033\3078$?#s~\355\r|$?b?=\026\330\354#?\365) \035\271\226\"?,\327s\203\265\362!?U\024z\300\346c!?[\201\206\326A` ?\022B\017\316\n\271 ?\235\365\221\252\331B!??\226,\221\205\224!?8\245\003,\316% ?\274w\033n\234! ?\235\337D\265\007\250 ?-\373\212B\206\346\036?\231\021U-&\214\037?\245\337\344\325>\277\035?\366\361\1770\2702\035?`7\353\332~\374\034?v\301s\376\014\300\035?{!J\237I\247\035?\255\237\221\027\270\215\035?\300\316sb\024\246\035?\001\324\002\353\240a\035?\026D\206P\003\3300?tU1y)\223/?\236\260\212X@x/?R\002Iu\215\330/?\267a\031\275H\330/?\345\232\007RW\256/?2(=M\022\275/?t\010=\027\035\373/?:*\302C\324!0?0_\226*\334\350/?\373\276x9\376\241/?\242\332f~\303\261/?\2044I}pv/?\367L\330yy\014/??F\227<@%.?\222\335Ig\007,.?\315^ \202V\322-?\364\245\3520\274\030.?Q\335\352\246\205\254-?C\231\205\367\316\310-?\003\345m\247\330\221-?\246\361\374\203\367>-?\355\r\361!>6-??Y\\\334y\364,?j5J\265T\200-?\342\264\010\016-\207-?\223h>\361\340J-?\363\377\306xv\364-?2\237\3605\253\016.?\332\247\331\277\217\3030?\325#z\n\232E1?\373\261\002\2518\0012?\325)1\375\202E4?s\360\022\275\010*5?\003\323H\317\035\2224?\001M\204\rO\2574?\020\345\217\222\354K5?I\023x\362\254N5?M\032\037=\260\2514?\203@\001\360\\\3234?j\362Z*\353\0164?TZ=/.\2703?x\277\213p\363\3031?`3\266\223e\341+?U\305^l}8(?/\021\363\325#G)?qb\311\316;K)?\201;\004\031\367\242*?\0076\201\376O\271*?)\307\033\233H)+?]\323\337\362(\372+?\226\'\323\022rx-?\236*\024&\342f.?\332~U\325\233\266.?\245\250=i\004\302.?\251\007g\030\300Y/?\355\331\037\232\014\326.?a\256m\323\235\374-?\205\356\336\306p\271-?\371\356\306\352\245\025.?\377\367\226(1\276.?v\212\314\221\322\302.?\323\307t\317W\0340?!\372\307\330\217h0?\377\rVs\353\3731?r\232\221\203\n\3651?<\310U\246D\2042?\301n\250}\022V\201?\317\233\227~\032\3331?w\240\266\\\351\364\201?\352\005\266\202Z\2270?q\t\256\\\351a\202?^hg\376\274\234.?U\035\024\302\332\200.?[#\\\252\315]-?B\246\354\\g/*?\331\244^\224\371w(?b\375\210\'\007(\'?\036=\350Ss+\'?\r\305\224}\224g\'?\266j\312Z\262F\'?>\225\262\220\251P\'?C\336\216J\223M\'?\303\334#\330\016\377&?\335{\350\035\317\260&?\230\t\233\016X\312&?\353\343/\232\206\302&?x\314M\217\376{&?\250>\014\204\317\234&?\313\312\304\347-\242&?\211C\364s\\\360&?\342\245\304CR\352&?\332\256\276$\017\360&?\313\216\355\262\350h(?C\217\362u\024E*?\203T\'\363\321\332+?\200\316\024\242\222&-?4#[\024xR/?\t\224z:Jj0?\331\221\345\202\005\3000?\341\247D\356\366\0241?6\255\024\002\271\3041?\271/\273\265\271\"2?{o\336\310\324\0163?:\332x}\324\3113?*T7\027\177\3333?Z\342\037\273\255\"3?(r\024b&82?\365\203\374dsr2?\212\014\032\026}\3472?}&m=Rc3?\335u1+\346\2603?1\251\365\014N54?$\221\321\217\363\3574?\343\245\022\323\302\2735?aF\241\372A<6?\346W\030\307\355<6?\203\301GZ\260\2506?\037F\364\252O\3536?\002\336\210BYe7?\265\305\005\005}\2407?\256\205\216Z\267\3727?\221!X9\332\2179?\034:E`\017\232;?a!\236\345\254a<?\273\351,9B\224<?\036\023\003\006D\346<?\377\325\016?2/=?\325%\t\340k\252<?\r\361\257\350Mz<?]\323\337\362(\372;?W0\'\361\204!<?\357:\324\034D^;?\377\227)\2650n7?v\336=u\351\2652?\034E\205\323Jm.?\245!\231\304\017\204*?\334\021N\013^\364%?7\017P\257\316\020\"?\3676\n\004\222\224\032?8\204*5{\240\025?\376\252m\324T`\022?\262E\322n\3641\017?h5\3114?\243\t?;\221`\252\231\265\004?\r\325\2038\305\231\005?\320\342\326\356h-\006?\374\205\303w\007\035\t?\n\274\223O\217m\t?k6E6F\241\013?\007\307\321\301\237\206\024?\215\311\207E\261\201\031?|\0343t\337v ?Vb\352#\372\371\"?\177\245N\233\314\323$?@\224S.\231\322&?\013C\005\003\337\237(?G\254\346\265\351:*?u\250P$2\210,?Z\322\344q7\331-?\357\365b\346\n\0100?\202@\200oG\3660?\301\035\\\305\330\3051?\364\244\257\224#l1?<a\221x\334d2?G\3127W\244\3642?B\360~0~\2073?\335D\3000\177\3263?\036\250\007\220\227\3613?8\'\306\227(\3713?\021\316\225\253\231a5?\305\340\364=\t\2755?\336\350\211\005\303[5?\005F\3578k\0165?=\345T\017\361?4?%\265Z\244\254\2064?\301\363\234>L\0143?*\335\002\256\320\2541?f;\375\245\347\0131?f\034\244Y9\2610?\320B\266\267Q 0?\250%\266\270OY0?\327\361P\365\332U0?\022>3?950?/k\033\254#:0?\005\001gf\274f/?+\230\373[7\342/?3\314\367\366(\0100?7\023\272\350\267\361/?V\305`m\250\362/?UO\244\003\253M0?\316~\230\025n\0370?\363\373\\?\215\0230?\227\273\367\271\237(0?q\260l#\364\354/?%\232\003\256r;0?\262\217\t\211\23080?\215\351\331\021&C0?T\0363\tDs0?\277\317\353a\305/0?\274\013\316\277\341.0?\017\342\337t\206:0?\207~\204\231j\361/?XK%/w\325/?\233\376\335\034]\216/?xNC\354\375Z/?N\334\357%\224\213/?\331h\272PYJ/?\277+\330\377fM/?!\346\343\361\354\246/?{\230~\010\370\325/?qd%\263h\244/?\215\226\226\240\245|/?e6[\210\364,/?<\036\344\tE9/?\300=\360\255\037\315.?\034_U\237\246\364.?\315G\330\013\223\026/?~\360N\374 \344/?\356\246\373\003\\\305/?\274~\r\375\035\316/?p\243\204=F\251/?\232\327%kS\303.?\256\313+\002\\\303.?\373\222\336NZl.?\344\021\273:\360\377-?\257\306I\311\301X.?B\324a\253\"\341-?NO 8\243\360-?)\273a\'1\022.?+.\257\3306\367-?\213l\010\n\223\024.?\312\017\265\235Q\033.?\276\037\235\013:Y.?\220W\205\2458I.?\272\331\2266Y\371.?q\002\221M\013\301.?(\\U\027l\372.?\335\304\r\033\014E/?:#\306B\337\243/?\307\314\204\255yX/?\300\002\306j[\343/?\376#1\023\325\363/?\010\032\330\317\007p/?\363m\226\322\000\314/?u\003[\336\202\220/?\343\361\r\265\010\355.?\212\2467\314e\335.?i\"\205\025\033\261.?\021j[\324\364\307.?\200r\336v\326\253.?\267p[\206\370\272.?@\2211\273J\036/?x\\\330\303,\356.?\224\310xs<\217/?\210?%\017\215\354/?\273\260\204\241M\217/?\014Q\234\3338\355/?\007\261\003L\270\0160?\237a-\350\004\0070?\024\013\266\360@\2150?\262t\214\313\273a0?\275\030\266\245\217r0?t\177\t\235VX0?\372g\025\034\257W0?m3\260\266\253U0?\325\033\302\354\366=0?\361\005\310\370yQ0?\341\030\302d\274C0?\272\0259y\316l0?\322\2718\260p 1?\t\312\247\246\250#\305>\322\361fG\211\341\303>_\031eG\364|\307>qdqA\256\273\306>\316\311\346\0053\001\312>\223\311%e\275\336\316>\235$\002z\206\025\323>\217\344\321\021\351L\324>\311\307\356\002%\005\326>\375\224S\320\'\321\326>\235\007^\312L\253\331>\205\246\231\254Y\200\331>&-d\307\251J\331>=zh\304q\205\334>\225\335\345\205\350\316\333>\177\267\345\310ov\340>\031\036\230/q\334\340>lX\031\256\212G\344>\r\325\2038\305\231\345>(A$\350\324:\346>D\255\304\227\344\333\346>\311\307\356\002%\005\346>\206\272Y\315\204p\346>O\342\030ne.\345>\235\032\242\351p\235\344>8[\314\021*\037\337>\316\311\346\0053\001\332>\320\335\246&^\361\326>\264q\006wNP\326>\342(\263 \0300\326>\372\211w>\013[\326>uoM\323\3121\327>5m\224/G\023\330>f/\035k-i\330>\326\363^J\227\335\327>\350>kDQ\034\327>\2451\326\016\261\207\327>\223\346\311\024\367H\330>E\244\340\010\326a\332>\377\213oA\031W\332>\213\274Q\320\222l\332>H\257\274\232\362\327\332>||!h\365\243\333>H\257\274\232\362\327\332>\206\272Y\315\204p\326>pmU\320\2745\323>sx1b\331\253\323>\222\357\255\243\005\303\324>hC\335\213XY\325>\367~\233\254\356\344\325>Y\003\255#\273\220\326>~\255\2058Z\376\321>{\242\251\246=\210\321>{\242\251\246=\210\321>\004\310\257\243\232\'\321>x\227\315\024!\022\321>\362|\243\251\340\350\321>*U\344\010\000+\323>L\327<\334H\270\324>\267|\342\010k\306\326>\220\333\355\202\332\322\327>\001\240/bDG\327>\332\376:\334\263S\330>5m\224/G\023\330>\326\363^J\227\335\327>\031\001\364\1777r\327>{\205\005\367\003\036\330>\313\276\nt\026\213\331>\235\007^\312L\253\331>\244\035\026\356\205\227\332>\226\324\001\367\331T\337>\3360\033\256\037\254\340>\220\370\2212\024=\341>x\227\315\024!\022\341>\220\370\2212\024=\341>[!\315\324\373\370\341>\356gg\207\256\372\342>\213\331\365\177\314\326\343>\315\334*%W\363\344>\255[NS\025d\345>D\255\304\227\344\333\346>\366j\333\213\303\364\350>pP\261 \203\313\351>\200\207\375\371\021\032\354>Y\346\010t\201&\355>\270_>Y1\\\355>tR\251#\221\307\355>/t\200\273G\221\360>?\253\314\224\326\337\362>]\030\351E\355~\365>\265^\302W*^\373>\223\010\236\214;\357\000??\253\314\224\326\337\002?\300\253\212\025\332\336\003?\037\rL\023[\346\t?\020\276\213R\235i\r?\212\243a\347\\@\016?a>\017\244A\300\020?\23718\357\244*\022?\365\216\t\347\t:\020?\226\025\324\001Z\004\020?\324\313\336\010A\375\r?\216\275\315\321\231j\014?h5\3114?\243\t?R\343\224ol,\007?\367\203\313t\371 \005?4vx\276U\215\004?\3422\023\261-\250\004?\320\342\326\356h-\006?\316\311\346\0053\001\n?\344\033\033\313\005x\014?\003\2117|\034\027\017?q\201\025\361\347%\020?hY\367\217\205\350\020?\0371zn\241+\021?X\026\361B\337\202\021?\000\270\243Isu\021?J\340 kW2\021?\333#\3458\001\227\021?\0371zn\241+\021?\021\373\251\226\031\333\020?\215\355\265\240\367\306\020?\244K\244\331\341T\020?\032#\310\367{\030\020?\215\355\265\240\367\306\020?6\217h\247\213\271\020?ot\337{\311\020\021?\354f\353\205\247\374\020?\354f\353\205\247\374\020?\225\330\265\275\335\222\014?\275z&Eu\204\r?|m\221\017\325\357\r?@{\344\305x\203\016?\255*\352\202\260\t\017?[\347\204u\210$\017?\320\372J\326\227[\020?M\355V\340uG\020?\311\337b\352S3\020?F\226\314\261\274\253\016?\340\001\257\340\310M\016?\3567\177\270P\236\016?F\226\314\261\274\253\016?\025\331s>\341\221\r?\303\224\222/\262\256\013?\213\274Q\320\222l\n?\307\256\376\031\357\330\t?\247(\362\177\242\r\013?\006\242\'eRC\013?\243\016\206\225e\343\014?\025\331s>\341\221\r?\306\225\0161\271\254\r?\261DVm\3553\r?\362Q\353\242\215\310\014?m7\3017M\237\r?tR\251#\221\307\r?\340\001\257\340\310M\016?\356s!\373\305\021\020?\356s!\373\305\021\020?\216\275\315\321\231j\374>;y\354\302j\207\372>\213\274Q\320\222l\372>\213\274Q\320\222l\372>\370kW\215\312\362\372>\024\330\367<\332\223\373>\270_>Y1\\\375>\232\363\235\251!\273\374>\3556\003\267I\240\374>\232\363\235\251!\273\374>\232\363\235\251!\273\374>\025\331s>\341\221\375>\007\243\243fYA\375>\337\0003\337\301O\374>rQ-\"\212\311\373>\006\242\'eRC\373>H\257\274\232\362\327\372>\3525\207\265B\242\372>\334\377\266\335\272Q\372>V\345\214rz(\373>\303\224\222/\262\256\373>\200\207\375\371\021\032\374>K\2608\234\371\325\374>Y\346\010t\201&\375>\232\363\235\251!\273\374>K\2608\234\371\325\374>\324\313\336\010A\375\375>\235\364\031\253(\271\376>\201\210y\373\030\030\376>\340\001\257\340\310M\376>\340\001\257\340\310M\376>#\017D\026i\342\375>\025\331s>\341\221\375>\007\243\243fYA\375>Y\346\010t\201&\375>Y\346\010t\201&\375>\007\243\243fYA\375>\324\313\336\010A\375\355>\213\274Q\320\222l\352>\316\311\346\0053\001\352>-C\034\353\3426\352>\316\311\346\0053\001\352>\316\311\346\0053\001\352>H\257\274\232\362\327\352>d\033]J\002y\353>\"\016\310\024b\344\353>\200\207\375\371\021\032\354>\316\311\346\0053\001\352>\006\242\'eRC\353>T\344\020qs*\351>kN\271\035u\317\345>O\342\030ne.\345>O\342\030ne.\345>\204\271\335\313}r\344><\252P\223\317\341\340>G\325D\331:\274\340>\211\330y~\305\330\341>\211\330y~\305\330\341>iW\235\254\203I\342>\245D\032.\325y\342>[\027mD\346\200\343>v\203\r\364\365!\344>\325\374B\331\245W\344>\370\210\373<\004]\344>\030\n\330\016F\354\343>\201\256\001:a\374\343>O\342\030ne.\345>\r\325\2038\305\231\345>S\367T\220\227\034\344>\253Z\322Q\016f\343>z\230I\026(\020\343>\016\351CY\360\211\342>?\253\314\224\326\337\342>I\326\300\332A\272\342>~s=\331\346)\337>kN\271\035u\317\345>\3463\217\2624\246\346>\276\222\232,\244\262\347>\001\240/bDG\347>\276\222\232,\244\262\347>\001\240/bDG\347>D\255\304\227\344\333\346>\001\240/bDG\347>\276\222\232,\244\262\347>_\031eG\364|\347>\242&\372|\224\021\347>\035\014\320\021T\350\347>\001\240/bDG\347>\3463\217\2624\246\346>\242&\372|\224\021\347>_\031eG\364|\347>\001\240/bDG\347>_\031eG\364|\347>{\205\005\367\003\036\350>_\031eG\364|\347>\311\307\356\002%\005\346>D\255\304\227\344\333\346>\001\240/bDG\347>\3463\217\2624\246\346>\001\240/bDG\347>\276\222\232,\244\262\347>\366j\333\213\303\364\350>pP\261 \203\313\351>\006\242\'eRC\353>\247(\362\177\242\r\353>d\033]J\002y\353>\025\331s>\341\221\355>\217\276I\323\240h\356>\n\244\037h`?\357>=zh\304q\205\354>d\033]J\002y\353>\006\242\'eRC\353>T\344\020qs*\351>\303\224\222/\262\256\353>\006\242\'eRC\353>\337\0003\337\301O\354>Y\346\010t\201&\355>\3567\177\270P\236\356>\006\242\'eRC\353>\303\224\222/\262\256\353>\303\224\222/\262\256\353>d\033]J\002y\353>-C\034\353\3426\352>\006\242\'eRC\353>=zh\304q\205\354>d\033]J\002y\353>d\033]J\002y\353>\247(\362\177\242\r\353>\006\242\'eRC\353>\200\207\375\371\021\032\354>=zh\304q\205\354>\"\016\310\024b\344\353>\"\016\310\024b\344\353>\337\0003\337\301O\354>\303\224\222/\262\256\353>d\033]J\002y\353>\316\311\346\0053\001\352>\021\327{;\323\225\351>\3463\217\2624\246\346>\036 \2202\177\330\344>O\342\030ne.\345>d8\001\372;\343\344>;\226\220r\244\361\343>\241/\336\013\243\213\343>\002\264\357\202o7\344>\255[NS\025d\345>\036 \2202\177\330\344>\255[NS\025d\345>\206\272Y\315\204p\346>\206\272Y\315\204p\346>(A$\350\324:\346>\206\272Y\315\204p\346>(A$\350\324:\346>\3463\217\2624\246\346>\242&\372|\224\021\347>_\031eG\364|\347>\262]FV#`\351>-C\034\353\3426\352>\200\207\375\371\021\032\354>\025\331s>\341\221\355>\232\363\235\251!\273\354>\316\311\346\0053\001\352>_\031eG\364|\347>\304\273\226o\001\221\343>\300\260\272\335\344\032\343>a-%h\037m\344>\265{f\007d\310\344>\322\361fG\211\341\343>\016\351CY\360\211\342>\226\004\352\3057\261\343>\002\264\357\202o7\344>^\"I\326\002\367\343>\024\377\373|)v\343>\316\346\212\265lk\343>0k\234,9\027\344>&@\250\346\315<\344>-`\300\232\034\241\343>W\014\221\262\311\n\343>#?,\345\306>\342>fL\301\032g\323\341>\305\305\366\377\026\t\342>\220\370\2212\024=\341>J\340 kW2\341>cA\345\210J]\341>\233#\206x\177\027\341>`6\t\367-\347\340>ja\375<\231\301\340>\r\257\373\371|\265\337>\242C\236,\316{\340>\270\231\206\270\2440\340>\262@\242\246\351\365\337>\345P3bn\020\340>\2378\302\232\261\005\340>f\022y\273\363\376\336>\242\tV\315Z\247\335>~s=\331\346)\337>\226\324\001\367\331T\337>{haG\312\263\336>\304\213\256\240\2434\337>5P\360\177\r\251\336>8[\314\021*\037\337>G\325D\331:\274\340>\246Nz\276\352\361\340>\356gg\207\256\372\342>\361rC\031\313p\343>\300\260\272\335\344\032\343>\231\017\306WT\'\344>\377\250\023\361R\301\343>\231\017\306WT\'\344>\227\361\245\246\023\277\350>\217\276I\323\240h\356>\177\267\345\310ov\360>\026\t\\\r?\356\361>\n\324\0077\276\233\363>]\030\351E\355~\365>\242&\372|\224\021\367>mO5\037|\315\367>D\255\304\227\344\333\366>+B\240\351\3338\370>\321\312b\007:\377\373>\232\363\235\251!\273\374>\324\313\336\010A\375\375>\216\275\315\321\231j\374>\260\\\312T\034b\367>\361h\343\210\265\370\364>\361h\343\210\265\370\364>&@\250\346\315<\364>\271\220\242)\226\266\363>v\203\r\364\365!\364>\311\307\356\002%\005\366>\242&\372|\224\021\367>}\206\201\370\n\034\372>\231\362!\250\032\275\372>\037\rL\023[\346\371>F\256@\231\353\331\370>_\031eG\364|\367>\224\360)\245\014\301\366>\324\374B\331\245W\364>?\253\314\224\326\337\362>\217\3561\242\376\304\362>\n\324\0077\276\233\363>\253Z\322Q\016f\363>\354f\353\205\247\374\360>\354f\353\205\247\374\360>=\252P\223\317\341\360>\251YVP\007h\361>\177\267\345\310ov\360>\025\331s>\341\221\355>2E\024\356\3602\356>\251YVP\007h\361>[\027mD\346\200\363>\271\220\242)\226\266\363>\374\2357_6K\363>\n\324\0077\276\233\363>1u\374\274N\217\362>\304\305\366\377\026\t\362>fL\301\032g\323\361>X\026\361B\337\202\361>\372\234\273]/M\361>\372\234\273]/M\361>X\026\361B\337\202\361>X\026\361B\337\202\361>\354f\353\205\247\374\360>\320\372J\326\227[\360>\302\304z\376\017\013\360>\217\276I\323\240h\356>2E\024\356\3602\356>\3567\177\270P\236\356>\217\276I\323\240h\356>2E\024\356\3602\356>tR\251#\221\307\355>\025\331s>\341\221\355>\270_>Y1\\\355>\270_>Y1\\\355>\025\331s>\341\221\355>\270_>Y1\\\355>\270_>Y1\\\355>\3567\177\270P\236\356>\3567\177\270P\236\356>\217\276I\323\240h\356>M\261\264\235\000\324\356>M\261\264\235\000\324\356>\217\276I\323\240h\356>\324\313\336\010A\375\355>Y\346\010t\201&\355>=zh\304q\205\354>\303\224\222/\262\256\353>\006\242\'eRC\353>\303\224\222/\262\256\353>\247(\362\177\242\r\353>\303\224\222/\262\256\353>\303\224\222/\262\256\353>\006\242\'eRC\353>H\257\274\232\362\327\352>\006\242\'eRC\353>\303\224\222/\262\256\353>\"\016\310\024b\344\353>\"\016\310\024b\344\353>=zh\304q\205\354>\247(\362\177\242\r\353>pP\261 \203\313\351>\227\361\245\246\023\277\350>\276\222\232,\244\262\347>\242&\372|\224\021\347>D\255\304\227\344\333\346>\311\307\356\002%\005\346>J\340 kW2\361>&\020\300\027p\340\357>\307\226\2122\300\252\357>M\261\264\235\000\324\356>M\261\264\235\000\324\356>\025\331s>\341\221\355>\232\363\235\251!\273\354>\232\363\235\251!\273\354>\200\207\375\371\021\032\354>\337\0003\337\301O\354>\303\224\222/\262\256\353>\303\224\222/\262\256\353>\232\363\235\251!\273\354>=zh\304q\205\354>\007\231C\326C\311\316>1E\024\356\3602\316>\036\003\354\202En\313>\273\207\276\232\207<\307>s[\215\262\237A\312>\005\242\'eRC\313>\203\257};h\372\305>\306\274\022q\010\217\305>qdqA\256\273\306>_\031eG\364|\307>\235\007^\312L\253\311>\257Rj\304\006\352\310>\244\035\026\356\205\227\312>=zh\304q\205\314>+/\\\312\267F\315>\273\244bJ\301\246\320>\213\331\365\177\314\326\323>M\316XM:>\330>||!h\365\243\333>g&9\334\036\357\333>\233\363\235\251!\273\334>\372l\323\216\321\360\334>\264Tb\307\024\346\334>g&9\334\036\357\333>E\244\340\010\326a\332>{\205\005\367\003\036\330>O\342\030ne.\325>\203\257};h\372\325>\241/\336\013\243\213\323>sx1b\331\253\323>\354IG\326m\222\327>&-d\307\251J\331>T\344\020qs*\331>\227\361\245\246\023\277\330>s[\215\262\237A\332>-C\034\353\3426\332>E\244\340\010\326a\332>\021\327{;\323\225\331>a\020\201\270\345\002\333>\316\311\346\0053\001\332>\303\224\222/\262\256\333>D\312hG\036F\340>\264\204J\226rB\341>\017\363\243\351\005\002\341>D\312hG\036F\340>\177\267\345\310ov\340>\004\310\257\243\232\'\341>J\340 kW2\341>J\340 kW2\341>\206\315\235\354\250b\341>\254d2\342#\336\341>\202\270a\312vt\342>?\253\314\224\326\337\342>B\266\250&\363U\343>\016\351CY\360\211\342>qw\265`\322\255\341>x\227\315\024!\022\341>\276u\366|jH\336>\333\365VM\245\331\333>d\033]J\002y\333>pP\261 \203\313\331>\310\263.\342\371\024\331>\216\307-b\257\342\332>3Y\324\016\034#\333>\277\211\266\235\2258\333>\225\335\345\205\350\316\333>\255>\252\243\333\371\333>\225\335\345\205\350\316\333>\225\335\345\205\350\316\333>\355@cG_\030\333>\360K?\331{\216\333>L\272\230,\017N\333>\026\331s>\341\221\335>1E\024\356\3602\336>\201~\031k\003\240\337>i\035UM\020u\337>#\005\344\205Sj\337>{haG\312\263\336>b\007\235)\327\210\336>\323\313\336\010A\375\335>O\305t\276+\304\333>s[\215\262\237A\332>\222\322\t\364\313X\333>?\216(\345\234u\331>~\220\341\210 \224\330>8xp\301c\211\330>2b\270\235*\235\327>\023\353;\\\376\205\326>nY\225\257\221E\326>\234\020BY[%\326>+L\000z\361\260\326>\323\350\202\270zg\327>\031\001\364\1777r\327>xz)e\347\247\327>xz)e\347\247\327>\276\222\232,\244\262\327>\2451\326\016\261\207\327>.W\334\013\016\'\327>7\201TPr\003\325> 4PS\252\310\321>\354f\353\205\247\374\320>\242C\236,\316{\320>\254*\352\202\260\t\317>1E\024\356\3602\316>\215\263mA\204\362\315>\345P3bn\020\320>G\325D\331:\274\320>2\177\\Md\007\321>\202\270a\312vt\322>\021\364\037\353\014\000\323> 4PS\252\310\321>\254d2\342#\336\321>"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\031\'s(\022\367P\276\273\275\327\331\337|K\276\243\371\262\240o\214F\276o\037\035C\"\317D\276\207A\355(\034\237@\276\250\246\252\342\230!5\276z\310X\\\024\257)\276\360\365\030\344\266\031\024\276\324J\250\257i\376\004>M\243]\331\325\324\013>\236Y\020\242L\311\256\275M\352\006\326\217<\376\275\226dy\341\177\375\345=\366\023\271Bz\263\t>:\2140\342\216y\025>\272\004\201\326\231\344\035>L\316a\343\247\235$>\203i\361\334 A)>\'\274\254\347\001\206!>\014\2229i\"h\020>\'\003V\344\273\355#\276\232X\032 c\3726\276\022\000+Gw\343A\2766m\213\231\331\263K\276\2135\216g\377\233Q\276\001\005\243B\030\'U\276\312>\017?\315\272W\276\374\345\375\371ba[\276\342\0024x=\253\\\276\213\327\342\272u\274Z\276\326\240\241[\0053Z\276\312>\017?\315\272W\276\334\200@@\346\336V\276ir%\001\3719V\276\367c\n\302\013\225U\276\2418\271\004D\246S\276\202\224\365\346\362\tR\276\"\310\013\251\036\211P\276-\314\362\030\315!L\276\004\306\234\336C\rH\276e7\333\305[\325B\276\021\024-\241y46\276\027\226 \331\320\000\034\276t\233hNoH\001>\026\335\311\325\212h\036>L\207\270\346\3555\">\260\000\232f\353K\">\236w\277h\030\300 >^\020\223\344\300\301\023>7\321\336rm\346\373\275\016\365\207X\304n,\276\325Y\370^K\3137\276-\023\234\025\207\211>\276\314\343c\350\020\002A\276\223\243\177ET\027C\276\374\020\002\0045*D\276\261GCc\245\263D\2767\022\340B\035\373D\276\254\232K!|\036F\276\336\263\347\342\235\365D\276y\254\263i,\020@\276;\323\331\336H\3417\276\221p\330\242\234\0005\276\"\310\013\251\036\2110\276\004\306\234\336C\r\030\276\0028J\345\317=\023\276\341\317\214\325\205\224\036\276z\310X\\\024\257)\276\315\215[\324lp/\276\332\277F\244\272\3703\276\004\306\234\336C\r8\276\022\000+Gw\343A\276\240\332\rX\272\306L\276S\256\000\310\210IQ\2767\3136Fc\223R\276C-\311b\233\013U\276\211\026\351\036J\326W\276\301\235v\276\300(X\276+\013\371|\241;Y\276\037\251f`i\303V\276\332\277F\244\272\370S\276\320\036\256#\256fT\276\216\366\207\003+\202T\276\225\326&\350\013.Q\276i\024zToZO\276\351@~\t\2506P\276\"\310\013\251\036\211P\276r\265\022\325{\354N\276\236w\277h\030\300P\276\034\350l\304=\335S\276^\020\223\344\300\301S\276:\2140\342\216yU\276\031\311\307{\210\027Z\276Kp\2666\036\276]\276\'\354S4\354u_\276\033\212\301\027\264\375\\\276\350\342\322\\\036WY\276\326\240\241[\0053Z\276\235\031\024\274\216\340Y\276+\013\371|\241;Y\276(J\377\340uUV\276\265;\344\241\210\260U\276L\316a\343\247\235T\276^\020\223\344\300\301S\276\263z\352\005]\312R\276\247\030X\351$RP\2766m\213\231\331\263K\276l3\037\235$ I\2761\353\227a\202\347E\276.qG\302\020iE\276\365\351\271\"\232\026E\276\034\350l\304=\335C\276\361\256o\347\374\261A\276\342\0316(\r#A\276e7\333\305[\325B\276\013\331\342e\334\317B\276\320\327\004\'\364\376A\276\366\325\267\310\227\305@\276\'\274\254\347\001\206A\276\032n\034%\314^C\276 \334\r\003!\332D\276\263\301\223\002\0272E\276:\2140\342\216yE\276\037\251f`i\303F\276l3\037\235$ I\276?\016$\032\346EK\276QPU\033\377iJ\276\326\240\241[\0053J\276\262\034?Y\323\352K\276\2279u\327\2554M\276\010H\220\026\233\331M\276\022\351(\227\247kM\276\247\030X\351$RP\276+i\244)+\033P\276\236w\277h\030\300P\276I\rhG|\267Q\276\2418\271\004D\246S\276\265;\344\241\210\260U\2761\353\227a\202\347U\276(J\377\340uUV\276\334\200@@\346\336V\276\334\200@@\346\336V\276\232X\032 c\372V\276a\321\214\200\354\247V\276\345!\331\300\362pV\276\243\371\262\240o\214V\276\254\232K!|\036V\276\345!\331\300\362pV\276(J\377\340uUV\2761\353\227a\202\347U\276\230\227 \2047\024T\276\202\224\365\346\362\tR\276\215\230\334V\241\242M\276\rg5_P\237G\276l3\037\235$ I\276\304^pZ\354\016K\276\304^pZ\354\016K\2766m\213\231\331\263K\276r\265\022\325{\354N\276r\265\022\325{\354N\276\304^pZ\354\016K\276\361\203k\335*\351H\276c\222\206\034\030\216I\276u\324\267\0351\262H\276l3\037\235$ I\276c\222\206\034\030\216I\276\315\377\010\333\370\240J\276\033\212\301\027\264\375L\276i\024zToZO\276i\024zToZO\276\355d\306\224u#O\276\305\274\033\007v\356Q\276I\rhG|\267Q\276\365\242\020&\340\256R\276\332\277F\244\272\370S\276L\316a\343\247\235T\276\023G\324C1KT\276\332\277F\244\272\370S\276g\261+e\315SS\276\344\303-\024i\221O\276i\024zToZO\276{V\253U\210~N\276\262\034?Y\323\352K\276\350\342\322\\\036WI\276\221\267\201\237VhG\276\232X\032 c\372F\276\026\010\316\337\\1G\2761\353\227a\202\347E\276\265;\344\241\210\260E\276\265;\344\241\210\260E\2761\353\227a\202\347E\276(J\377\340uUF\276(J\377\340uUF\276(J\377\340uUF\2761\353\227a\202\347E\2761\353\227a\202\347E\2761\353\227a\202\347E\276\265;\344\241\210\260E\276z:\006c\240\337D\276\371\226\261d\303\253C\276`\212\343\2032@D\276(J\377\340uUF\276\rg5_P\237G\276\326\240\241[\0053J\276\377\246\367\225\216GN\276\355d\306\224u#O\276S\256\000\310\210IQ\276^\020\223\344\300\301S\276\276\334|\"\225BU\276\367c\n\302\013\225U\276\320\036\256#\256fT\276ir%\001\3719V\276\363DeyV\317[\276{V\253U\210~^\276\366\005_\025\202\265^\276r\265\022\325{\354^\276{V\253U\210~^\276o\364\0309P\006\\\276\243\371\262\240o\214F\276\242\262\t\244\265$D\276l\245\314\243\260PD\276\200JL\224k{?\276:a,\330\274\260<\276\325\347JX\277\232<\276fj\202h\023\354@\276r\205k\210\221\374@\276\2623A\t\243b@\276\352\316\320\002\034\006E\276\240\332\rX\272\306L\276\265;\344\241\210\260E\276\372$\004^7{H\276\037\251f`i\303F\276\361\203k\335*\351H\276Z\361\355\233\013\374I\276\240\332\rX\272\306L\276\355d\306\224u#O\276i\024zToZO\276\247\030X\351$RP\276\236w\277h\030\300P\276\031\'s(\022\367P\276\225\326&\350\013.Q\276\031\'s(\022\367P\276\031\'s(\022\367P\276\\O\231H\225\333P\276\225\326&\350\013.Q\276\327\376L\010\217\022Q\276\340\237\345\210\233\244P\276`s\341\323b\310O\276i\024zToZO\276\366\005_\025\202\265N\276\010H\220\026\233\331M\276\022\351(\227\247kM\276\2279u\327\2554M\2766m\213\231\331\263K\276\362(\300\206n0B\276lz\310\231\336\207;\276i?~^A#8\276\355\217\312\236G\3547\276~uP\236=D8\276\226dy\341\177\3755\276v\215\016!wJ6\2766\230\217\243\253|4\276\2135\216g\377\2331\276\374\262VW\253J-\276q\'\300\333\007\035*\276\337\372\220\337W]\'\276\014 \214b\2267%\276\026\010\316\337\\1\'\276+i\244)+\0330\276\254\232K!|\0366\276\322\254\000\035\"69\276\2279u\327\2554=\276\207A\355(\034\237@\276\010,\353#\263:D\276\211\026\351\036J\326G\276\315\377\010\333\370\240J\276?\016$\032\346EK\276\033\212\301\027\264\375L\276\010H\220\026\233\331M\276\351@~\t\2506P\276\263z\352\005]\312R\276Uo\372c\264/T\276\307}\025\243\241\324T\276Uo\372c\264/T\276\243\371\262\240o\214V\276\246\272\254<\233rY\276x\225\261\271\\\230[\276\366\005_\025\202\265^\276\277\213\322\370Y\262`\276\346\320.\227\267\340a\276\320\036\256#\256fd\276\367c\n\302\013\225e\276\rg5_P\237g\276\270\374\335=\264\226h\276\'\233\251\n\261\345j\276x\225\261\271\\\230k\276$+Z\230\300\217l\276\307\037j\366\027\365m\276\265\3358\365\376\320n\276\366\005_\025\202\265n\276\265\3358\365\376\320n\276i\024zToZo\276\030\032r\245\303\247n\276\010H\220\026\233\331m\276\231\251\304I\236\212k\276|\005\001,M\356i\276\221\267\201\237Vhg\276I^\022q\267Gf\276\230\227 \2047\024d\276\'\354S4\354u_\276+\013\371|\241;Y\276\343`\337$\307\212S\276\340\237\345\210\233\244P\276\2279u\327\2554M\276$+Z\230\300\217L\276\026\010\316\337\\1G\276\201aND;\363C\276\265;\344\241\210\260E\276(J\377\340uUF\276\265;\344\241\210\260E\276Z\361\355\233\013\374I\276?\016$\032\346EK\276i\024zToZO\276\204\367C\326\224\020N\276\326\240\241[\0053J\276\372$\004^7{H\276\221\267\201\237VhG\276\037\251f`i\303F\276\232X\032 c\372F\276(J\377\340uUF\276\037\251f`i\303F\276\355d\306\224u#O\276\252\331Q\205P8S\276\332\277F\244\272\370S\276\2418\271\004D\246S\276\254\232K!|\036V\276\020(/\373{\205Z\276\276~\321u\013c^\276\265\3358\365\376\320^\276\010H\220\026\233\331]\276\254<\240t\362>_\276\355d\306\224u#_\276B\317\035\266\021,^\276x\225\261\271\\\230[\276\304^pZ\354\016[\276\246\272\254<\233rY\276\257[E\275\247\004Y\276F\356\302\376\306\361W\276X0\364\377\337\025W\276\243\371\262\240o\214V\276\345!\331\300\362pV\276\254\232K!|\036V\276ir%\001\3719V\276\345!\331\300\362pV\276\026\010\316\337\\1W\276X0\364\377\337\025W\276\312>\017?\315\272W\276\221\267\201\237VhW\276\232X\032 c\372V\276\205U\357\202\036\360T\276%\211\005EJoS\276\020\206\332\247\005eQ\276\2418\271\004D\246S\276\252\331Q\205P8S\276\327\376L\010\217\022Q\276r\265\022\325{\354N\276$+Z\230\300\217L\276\304^pZ\354\016K\276\326\240\241[\0053J\276\315\377\010\333\370\240J\2766m\213\231\331\263K\276QPU\033\377iJ\276QPU\033\377iJ\276\326\240\241[\0053J\276\326\240\241[\0053J\276QPU\033\377iJ\276\273\275\327\331\337|K\276\304^pZ\354\016K\276\273\275\327\331\337|K\276\022\351(\227\247kM\276\215\230\334V\241\242M\276\251{\246\330\306XL\276\022\351(\227\247kM\276\204\367C\326\224\020N\276\204\367C\326\224\020N\276r\265\022\325{\354N\276\366\005_\025\202\265N\276{V\253U\210~N\276r\265\022\325{\354N\276\377\246\367\225\216GN\276\366\005_\025\202\265N\276r\265\022\325{\354N\276\344\303-\024i\221O\276i\024zToZO\276\351@~\t\2506P\276\340\237\345\210\233\244P\276\\O\231H\225\333P\276S\256\000\310\210IQ\276\354\001x\245\323\034S\276g\261+e\315SS\2767\3136Fc\223R\276\332\277F\244\272\370S\276\320\036\256#\256fT\276^\020\223\344\300\301S\276\354\001x\245\323\034S\276\020\206\332\247\005eQ\276\316]\264\207\202\200Q\276\316]\264\207\202\200Q\276\247\030X\351$RP\276\355d\306\224u#O\276\262\034?Y\323\352K\276\315\377\010\333\370\240J\276\304^pZ\354\016K\276\326\240\241[\0053J\276QPU\033\377iJ\276u\324\267\0351\262H\276Z\361\355\233\013\374I\276\273\275\327\331\337|K\276\355d\306\224u#O\276\304^pZ\354\016K\276~uP\236=DH\276\211\026\351\036J\326G\276\243\371\262\240o\214F\276~uP\236=DH\276\211\026\351\036J\326G\276~uP\236=DH\276\221\267\201\237VhG\276\004\306\234\336C\rH\276c\222\206\034\030\216I\276\373\323Y4\374\352s\276\026\010\316\337\\1G>\203\333\236\343\254qD>\361\203k\335*\351H>:\2140\342\216yE>p\013\033\351\037~@>\220)/\246\342\2302>h\370\324a\207\2735>\253S\242$\302\2663>\356\201pqO\356\374=\336%\225\351)& >\037\251f`i\303&>p\013\033\351\037~0>\265\364:\245\316H3>\343`\337$\307\212S>\327\376L\010\217\022Q>\236w\277h\030\300P>\211\026\351\036J\326G>\rg5_P\237G>\t_\222\306jQB>\2135\216g\377\233A>\376C\251\246\354@B>\251{\246\330\306XL>\351@~\t\2506P>\\O\231H\225\333P>\"\310\013\251\036\211P>QPU\033\377iJ>\354\272\316\250\031\265@>\351\207\'\006b\236B>\337A:\334\021\305I>\332\277F\244\272\370S>\243\371\262\240o\214V>\327\376L\010\217\022Q>\022\351(\227\247kM>\034\350l\304=\335S>\337A:\334\021\305Y>fS\200\270Ct\\>|c\254\330\326\315`>(\371T\267:\305a>\020\206\332\247\005ea>C\334\0369`{`>-\314\362\030\315!\\>$+Z\230\300\217\\>\204\367C\326\224\020^>\036K\273\263\337\343_>\346\320.\227\267\340a>\037X\2746.3b>\030x\035RM\207e>[B\230\305F\214n>\031\'s(\022\367p>\2418\271\004D\246s>\007\345A\'\371\322q>\007\345A\'\371\322q>y\363\\f\346wr>\216\366\207\003+\202t>ir%\001\3719v>\030x\035RM\207u>\202\345\237\020.\232v>Jg\344\323\352\002z>*\\\243\246\334\313}>G\000g\304-h\177>:;\206\270S\351\200>+i\244)+\033\200>\347\210V\320\257\013\201>9.\2055\005\232~>\023P\246\246d\006x>4[\347\323r=t>\275-\'L\320\322i>\312\355d\025\222*c>\304^pZ\354\016[>O\217[\177\323\203W>\232X\032 c\372F>6m\213\231\331\263;>i\024zToZO>\0028J\345\317=#\276.\225\236\265\346\262\020>\325\022Ob\221c5>\276\334|\"\225BU\276=M*~\272_X\276\343`\337$\307\212S\276?\016$\032\346EK\276*6\375\206s\004B\276EInU\203\252>\276\rg5_P\237G\276\273\275\327\331\337|\033>?\016$\032\346EK\276pR\304\345\331\345R\276\026\010\316\337\\1G\276;\323\331\336H\341\'\276fj\202h\023\354 >\373k\255Z\361\342*>H!j\241~\0106>\341-8\202\017tE>\263z\352\005]\312b>i\024zToZ_>\205U\357\202\036\360T>\274\033\203\206i\\R>i\024zToZO>\240\332\rX\272\306\\>\366\005_\025\202\265^>\345!\331\300\362pV>\020\206\332\247\005eQ>\2135\216g\377\233Q>ir%\001\3719V>\202\345\237\020.\232f>I\rhG|\267a>\337\372\220\337W]\327\275\214|7d\271\003D\276u\324\267\0351\262H\276.qG\302\020iE\276\337A:\334\021\305I\276\355d\306\224u#O\276\356\302qA\377\002V\276H\257\274\232\362\327Z\276\'\354S4\354u_\276\036K\273\263\337\343_\276B\317\035\266\021,^\276\333\"\225\223\\\377_\276\007\345A\'\371\322a\276\307}\025\243\241\324d\276-{H\357\221\221g\276:\2140\342\216ye\276^\020\223\344\300\301c\2760\215\354\264\370\007_\276\235\031\024\274\216\340Y\276\305\274\033\007v\356Q\276\252\331Q\205P8S\276g\261+e\315SS\276\240\332\rX\272\306\\\276\312>\017?\315\272W\276\276\334|\"\225BU\276\"\310\013\251\036\211P\276\316]\264\207\202\200Q\276a\321\214\200\354\247V\2767\3136Fc\223R\276\026\010\316\337\\1W\276\353\243\314\370I=\\\276\265;\344\241\210\260e\276\310\316\277\314\334di\276K\305\217\200t\342p\276\030\032r\245\303\247n\276\361\203k\335*\351h\276X\201\236)\033\246k\276\033\337\232a\n\"p\276\202\224\365\346\362\tr\276b\200\342V\261\027r\276dA\334\362\334\375t\276\242A\213gwaw\276c\222\206\034\030\216y\276\262\034?Y\323\352{\276\355d\306\224u#\177\276\3756\250#\236\361\177\2763R\025q?\202\200\276\253\221y\276Hc\202\276\006-\032\356\000\250\202\276\024\377\373|)v\203\276\034\350l\304=\335\203\276\330\007\037k\302\315\204\276+\272NSf\253\204\276\024\377\373|)v\203\276\225\326&\350\013.\201\276\337\222\344\005MU~\276\355d\306\224u#\177\276+i\244)+\033\200\276\3756\250#\236\361\177\276\204\367C\326\224\020~\2763R\025q?\202\200\2763R\025q?\202\200\2763R\025q?\202\200\276\300\356 \350\373\270|\276\205\246\231\254Y\200y\276L\037\014\r\343-y\276S\010}T\367\224y\276\302U\236\367\270Sw\276L\316a\343\247\235t\276\201\334\315\255\372\336r\276B$\367\377gPq\276~l~;\n\211t\276^a=\016\374Qx\276\240\211c.\1776x\276<DX\033\207\244t\276\270\242a\261EKp\276uz;\221\302fp\276\347\210V\320\257\013q\276I\rhG|\267q\276\346\320.\227\267\340q\276\233\007p\366\'jr\276y\363\\f\346wr\276\322\326\325\\\246\221s\276W\'\"\235\254Zs\276\341\250\267\353\316_t\276\210\305>\365\016Fs\276E\345\360\233\2236t\276<DX\033\207\244t\276\343`\337$\307\212s\2764[\347\323r=t\276#\321\335\013RDt\2764[\347\323r=t\276W\'\"\235\254Zs\276\221f\327u\033\330r\276\305\274\033\007v\356q\276\205\004EY\343_p\276\031\'s(\022\367p\276\3230R\351\024\335k\276\345r\203\352-\001k\276\262\034?Y\323\352k\276\361\203k\335*\351h\2769\335\332\013\312\tj\276-\314\362\030\315!l\276B\317\035\266\021,n\276\022>\002\341\375\217p\276&A-~B\232r\276\007\345A\'\371\322Q\276\355d\306\224u#O\276@l\317\306o%R\276g\261+e\315SS\276{V\253U\210~N\276\372$\004^7{X\276$\332\257n\205\377g\276\031\'s(\022\367p\276\006-\032\356\000\250r\276\312>\017?\315\272w\2769.\2055\005\232~\276\367Z8_\330\331\201\276\253\221y\276Hc\202\276g\261+e\315S\203\276\320\036\256#\256f\204\276\234\020BY[%\206\276_\031eG\364|\207\276\234\020BY[%\206\276g\261+e\315S\203\276\347\210V\320\257\013\201\276\262\034?Y\323\352{\276g\261+e\315Ss\276\343`\337$\307\212s\276\352IPl\333\361s\276\367Z8_\330\331q\276~l~;\n\211t\276\340\360\217\262\3264u\276\242\360\340=<\321r\276\314\245\214N\212Ur\2763R\025q?\202p\27603p(\212\274v\276\201-x\3275ow\276\274\033\203\206i\\r\276\000VMlS\267i\276\367c\n\302\013\225e\2764[\347\323r=d\276]\262\34777\342\\\276=M*~\272_X\276\247\030X\351$RP\276i\344\322\007\205jA\276\365[g)&G@>\325\347JX\277\232<>\350\342\322\\\036W)>M\025\013\340a\005\027>\0028J\345\317=\023>F\021\025\010\253\017\377=\357\310\031n\tV\317=\226\362\313\332\363\314\032\276(\221\250\335/\275\350\275[\234\352qY\226\254=\202\224\365\346\362\t\022>\347T\200c\252\207$>\303B\313g\004p!>V\266\243`n\2276\276\'\274\254\347\001\206\021\276\202\224\365\346\362\t\022>\027\255\"\211\240x@>I\rhG|\267A\276#\017\265\245\330\3602\276\276\225\323%\333\3322\2769.\2055\005\232~\276\220\256\257<#\255s\276\000VMlS\267i\276g\002\326\216\010\344g\276\273l-\260\244\354f\276:\2140\342\216ye\276\327O\3671\312\242e\276\260\n\233\223ltd\276Uo\372c\264/d\276\323\337\247\277\331Lg\276\354R\"\317\016\255g\276\332\020\361\315\365\210h\276\334\321\352i!ok\276\010H\220\026\233\331m\276[B\230\305F\214n\276\265\3358\365\376\320n\276\372\312\207\321\310/p\276\026\267#\266!\241r\276\373\323Y4\374\352s\276?\264\247\215w\372r\276\3622\301\263\357Xt\276\023G\324C1Kt\276\312\355d\025\222*s\276\355\271\237\336\313Gr\276\244\250\010w4\374q\276\361)\357P\274\235p\276\300\356 \350\373\270l\276=M*~\272_h\276u\324\267\0351\262h\276\202\345\237\020.\232f\276[\240Cr\320ke\276\233\007p\366\'jb\276\'\354S4\354u_\276H\257\274\232\362\327Z\276\"\310\013\251\036\211P\276JT\021D6\037D\276\253\014\371\'\010O1\276fj\202h\023\3540\276$r\003\225z\367>\276\215\230\334V\241\242-\276\315\377\010\333\370\240Z\276[\240Cr\320ke\276M}\267\271l\r`\276`s\341\323b\310_\276\346\320.\227\267\340a\276\215\230\334V\241\242]\276\004\306\234\336C\rH\276\255\341\364\0356\2068>\301\235v\276\300(X>M}\267\271l\r`>\277\213\322\370Y\262`>\031\'s(\022\367`>\2135\216g\377\233a>S\256\000\310\210Ia>\'\354S4\354u_>\254<\240t\362>_>\307\037j\366\027\365]>\304^pZ\354\016[>\351@~\t\2506`>\005\207\226zo\363Z>x\225\261\271\\\230[>\224x{;\202NZ>B\317\035\266\021,^>\213\327\342\272u\274Z>\004\306\234\336C\rX>\232X\032 c\372F>W\213\237V\234\316=>u\324\267\0351\2628>\362\312\024\332\344P;>\244\316\256\226\235\303=>\247\030X\351$R@>\265\364:\245\316HC>(J\377\340uUF>Z\361\355\233\013\374I>\247\030X\351$R@>\323\n\254\311\253\025@>\232X\032 c\3726>y\363\\f\346w\">\207\262\225E\266\243\307=_\345\216\332\356\370*\276(J\377\340uU6\276\010s\224 m\2426\276\214|7d\271\0034\276p\013\033\351\037~0\276\005T\357\327\267\334\034>-\314\362\030\315!L>\372$\004^7{H>\215Q3Z\347:;>\303\320\035ax?&>\314*\r\345\312i\023\276\332\277F\244\272\3703\276\231\312\307&\357*B\276\273\275\327\331\337|K\276%\211\005EJoS\276a\321\214\200\354\247V\276\326\240\241[\0053Z\276\010H\220\026\233\331]\276\"\310\013\251\036\211`\276\221f\327u\033\330b\276I^\022q\267Gf\276\276\334|\"\225Be\276\nU\221\231\351(`\276\304^pZ\354\016[\276:;\206\270S\351`\276y\363\\f\346wb\276\375\224S\320\'\321f\276\"j`\374\224\251i\276*\\\243\246\334\313}>\204\367C\326\224\020~>9.\2055\005\232~>\320\300\002w$\207}>X\201\236)\033\246{>\253\353\365J\267\256z>)S\321C\251\020z>\247r\324u\223\235x>\034\361>\'q\230w>\254\232K!|\036v>,rv\214^\326s>\201\334\315\255\372\336r>{\253\204\237\336\242q>r\265\022\325{\354n>\300\356 \350\373\270l>\304^pZ\354\016k>\361\203k\335*\351h>~uP\236=Dh>p\243n\017\025vg>\037\251f`i\303f>\236\310i\222SPe>\023G\324C1Kd>\320\036\256#\256fd>\376C\251\246\354@b>\307\037j\366\027\365]>x\225\261\271\\\230[>r\023\276\201\005\314U>{V\253U\210~N>\004\306\234\336C\rH>6m\213\231\331\263K>\276\334|\"\225BU>{V\253U\210~^>\265\3358\365\376\320^>\266\3529xM a>M}\267\271l\r`>\247\030X\351$R`>\036K\273\263\337\343_>\301\235v\276\300(X>l3\037\235$ I>\251\222\250\210\226\320@>\352p%V\222&.\276|\264V\002\022^U\276\307}\025\243\241\324T\276\254\232K!|\036V\276\\O\231H\225\333P\276Zc\233\242\227,E\276c\222\206\034\030\2169\276:\032\203\333\002I\032\276`s\341\323b\310O>\243\371\262\240o\214V>\216\366\207\003+\202T>+\013\371|\241;Y>\344\303-\024i\221_>(\371T\267:\305a>\247i\002\023`\342d>6\034\341o\236#g>\367\264\264\353F%j>\337\222\344\005MUn>t\302\023X\312;q>@l\317\306o%r>\274\033\203\206i\\r>\322\326\325\\\246\221s>\260\n\233\223ltt>\267\363\013\333\200\333t>\356\302qA\377\002v>\rg5_P\237w>\270\374\335=\264\226x>>\005R\267\262\212w>\rg5_P\237w>g\002\326\216\010\344w>\264\203\274h\220\205v>\237\200\221\313K{t>\317\025\334\300z\253p>\212(\215\344\260Lo>\275-\'L\320\322i>\351\221(3\343\306d>\001\005\243B\030\'U>\267t3qJ\032\r\276\320\036\256#\256fD\276\316]\264\207\202\200Q\276\230\227 \2047\024T\276+i\244)+\033P\276\221\267\201\237VhG\276\366\005_\025\202\265N\276\273\275\327\331\337|K\276\033\212\301\027\264\375L\276\\O\231H\225\333@\2767\022\340B\035\373D\276<\250\325\324v\030?\276`s\341\323b\310\037\276<\250\325\324v\030\037\276\314\270_\336>9(\276\225\035\320\344\305\225#\276\350\r\327f\360\037\"\276\250\246\252\342\230!%\276:a,\330\274\260\034\276\2504\375\333\014\361\031\276\017/\334\021x\004\010>\236L\273^F\367\'>\376C\251\246\354@2>\265;\344\241\210\2605>\374\262VW\253J->q\231m\342\223M5>\026Ow\334\026\2319>{V\253U\210~>>\277#&\037O\2527>*f\244\323]\364/>\022\242\177\232\355\003;>\266\202\215\236B\0308>\3445\333\032\365\301:>\347)|Y\330\276;>-\023\234\025\207\211>>\004\rF\333\375t:>\021\024-\241y46>\025\301$\343\242\3114>\020\206\332\247\005e1>QPU\033\377i:>\203i\361\334 A)>\304^pZ\354\016+>\025z{\346\350a\">\236w\277h\030\3000>C\273\033\\\017\3339>\304^pZ\354\016;>\336\210\343\330\313,<>\350\342\322\\\036WI>\225\035\320\344\305\225#>\004\306\234\336C\rH\276\022\351(\227\247k]\276\310,kyfD`\276\177$\246t\002\264c\276\262\313\224/\230Zg\276sdh\253@\\j\276\267M\210g\357&m\276:;\206\270S\351p\276\263z\352\005]\312r\2766\023\017\rkhs\276\2135\216g\377\233q\276\205\004EY\343_p\276\246\272\254<\233ri\276\221f\327u\033\330b\276:\2140\342\216yU\276Z\034\362\245\335\3042\276\003\361\240\350\025\326 \276)\221\250\335/\275\030\276\227\200\036\324g\234?>~uP\236=DX>\305\274\033\007v\356a>@\275y\360\252\265f>\014\270\337\210\213/l>\240\332\rX\272\306l>t\302\023X\312;q>\\O\231H\225\333p>\266\3529xM q>\255I\241\367@\216q>c8\n\220\251Bq>9.\2055\005\232n>\243\371\262\240o\214f>\370\022`\230\320\004a>\rg5_P\237W>\007\345A\'\371\322Q>\010H\220\026\233\331M>D`p\005S\"C>\t_\222\306jQB>\222\\\326H\232\257@>:E\207\345\324\021#>\027\226 \331\320\000\034\276?U\315\026\240\255=\276\350\342\322\\\036WI\276:\2140\342\216yU\276ir%\001\3719V\276C-\311b\233\013U\276\"j`\374\224\251Y\276\036K\273\263\337\343_\276m\342ts\351\217d\276%\211\005EJoc\276m\342ts\351\217d\276\202\224\365\346\362\tb\276\004u\362\264\010}c\276\312\355d\025\222*c\276\335/\226\026\253Nb\276(\371T\267:\305a\276\335/\226\026\253Nb\276@l\317\306o%b\276\037X\2746.3b\276S\256\000\310\210Ia\276\037X\2746.3b\276I\rhG|\267a\276\007\345A\'\371\322a\276(\371T\267:\305a\276\357q\307\027\304ra\276\037X\2746.3b\276\346\320.\227\267\340a\276\357q\307\027\304ra\276\316]\264\207\202\200a\276(\371T\267:\305a\276(\371T\267:\305a\276(\371T\267:\305a\276:;\206\270S\351`\276|c\254\330\326\315`\276\316]\264\207\202\200a\276\335/\226\026\253Nb\276\357q\307\027\304ra\276\255I\241\367@\216a\276\244\250\010w4\374a\276\252\331Q\205P8c\276\373\323Y4\374\352c\276\332\277F\244\272\370c\276\205U\357\202\036\360d\276\004u\362\264\010}c\276C-\311b\233\013e\276^\020\223\344\300\301c\276\343`\337$\307\212c\276\3622\301\263\357Xd\276L\316a\343\247\235d\276\262\313\224/\230Zg\276\323\337\247\277\331Lg\276\211\026\351\036J\326g\276-{H\357\221\221g\276\232X\032 c\372f\276\243\371\262\240o\214f\276\037\251f`i\303f\276\017\327\204\321@\365e\276:\2140\342\216ye\276:\2140\342\216ye\276\"\031\266\322Y\031e\276\340\360\217\262\3264e\276:\2140\342\216ye\276\001\005\243B\030\'e\276\236\310i\222SPe\276\265;\344\241\210\260e\276\030x\035RM\207e\276\001\005\243B\030\'e\276\001\005\243B\030\'e\276\265;\344\241\210\260e\276\276\334|\"\225Be\2761\353\227a\202\347e\276\346\320.\227\267\340a\276\3622\301\263\357Xd\276\026\267#\266!\241b\276\365\242\020&\340\256b\276\007\345A\'\371\322a\276\247\030X\351$R`\276\277\213\322\370Y\262`\276\277\213\322\370Y\262`\276{V\253U\210~^\276\265\3358\365\376\320^\276\254<\240t\362>_\276\236w\277h\030\300`\276:;\206\270S\351`\276\244\250\010w4\374a\276pR\304\345\331\345b\276\376C\251\246\354@b\276\225\326&\350\013.a\276\236w\277h\030\300`\276C\334\0369`{`\276t\302\023X\312;a\276@l\317\306o%b\276M}\267\271l\r`\276\236w\277h\030\300`\276k!{\327\275\251a\276\205\004EY\343_`\276\244\250\010w4\374a\276\037X\2746.3b\276\332\277F\244\272\370c\276ir%\001\3719f\276(J\377\340uUf\276\316\256^\261\275\020f\276\345!\331\300\362pf\276(J\377\340uUf\276\356\302qA\377\002f\276@\275y\360\252\265f\276\243\371\262\240o\214f\276\232X\032 c\372f\276\243\371\262\240o\214f\276-{H\357\221\221g\276\375\224S\320\'\321f\276yD\007\220!\010g\276\332\277F\244\272\370c\2761\353\227a\202\347e\276\367c\n\302\013\225e\276\307}\025\243\241\324d\276v\203\r\364\365!d\276pR\304\345\331\345b\276\332\277F\244\272\370c\276\332\277F\244\272\370c\276\365\242\020&\340\256b\276\316]\264\207\202\200a\276\305\274\033\007v\356a\276\357q\307\027\304ra\2761\232\3557GWa\2761\232\3557GWa\276\327\376L\010\217\022a\276\244\250\010w4\374a\2767\3136Fc\223b\276\274\033\203\206i\\b\276\274\033\203\206i\\b\276y\363\\f\346wb\276Y\337I\326\244\205b\276Y\337I\326\244\205b\276\324\216\375\225\236\274b\276\346\320.\227\267\340a\276k!{\327\275\251a\276Y\337I\326\244\205b\276\210\305>\365\016Fc\276\210\305>\365\016Fc\276\373\323Y4\374\352c\276F\235\030\325\213ac\2767\3136Fc\223b\276\305\274\033\007v\356a\276I\rhG|\267a\276\225\326&\350\013.a\276\031\'s(\022\367`\276\\O\231H\225\333`\276\255I\241\367@\216a\276.*\236\305V\001c\276\312\355d\025\222*c\276\037X\2746.3b\276\357q\307\027\304ra\276e\3601\311\241m`\276\353\243\314\370I=\\\276\361\203k\335*\351X\276L\316a\343\247\235T\276\037\251f`i\303F\276\315\215[\324lp/\276l\245\314\243\260P4>\326\240\241[\0053J>\204\367C\326\224\020N>\333\"\225\223\\\377O>\010H\220\026\233\331M>\037\251f`i\303F>q\231m\342\223ME>$V^\242\222XE>\304^pZ\354\016K>u\324\267\0351\262H>(J\377\340uUF>;\277\327\204F\220C>r\265\022\325{\354N>\304^pZ\354\016K>c\222\206\034\030\216I>\026\010\316\337\\1G>\240\361\017\010\212>A>\025\301$\343\242\3114>~\240T\250\017\r1>\221p\330\242\234\0005>:E\207\345\324\0213>\036\033\024g\365\3631>\272\350\333\343\261E\024\276\376C\251\246\354@R\2760\215\354\264\370\007_\276\rg5_P\237g\276[B\230\305F\214n\276\346\320.\227\267\340q\276<DX\033\207\244t\276Bu\241)\243\340u\2769\324\010\251\226Nv\276|\005\001,M\356y\276\374\345\375\371ba{\276*\\\243\246\334\313}\276\330\266tA\207=\200\276\234\277\227/ \225\201\276\272c[Mq1\203\276g\261+e\315S\203\276\r\026\2135\025\017\203\276B$\367\377gP\201\276+i\244)+\033\200\276\305\026\230\223\3449z\276\212\316\020XB\001w\276\256RsZtIu\276\234\277\227/ \225q\276|c\254\330\326\315p\276m\204\311\306_\260m\276X\201\236)\033\246k\276\374\345\375\371bak\276$\332\257n\205\377g\276\211\026\351\036J\326g\276\316\256^\261\275\020f\276\233\007p\366\'jb\276\345!\331\300\362pV\276\337A:\334\021\305I\276\215\303\340`sk&\276\036\033\024g\365\363!\276\361\256o\347\374\261\021\276\021\352-\201\231\227\321=Z\200E\177q\367\002\276^\311\351\347\006Z\021>\017\004\330\007\246;\017\276)f\244\323]\364\017\276\330!\237\021s0\250\275\263V\223\022\207\200\347=\302\335r\244~\021\r>^\020\223\344\300\301\023>\272v.\335%\025\031>\005T\357\327\267\334\034>\362\312\024\332\344P\033>q\'\300\333\007\035\032>rni\330\301\204\034>(\330Q\332\351$\033>`,8\327\250`\035>\036\033\024g\365\363!>\236w\277h\030\300 >b\347\211F\312\363\006>\266\202\215\236B\0308\276\026\010\316\337\\1G\276\274\033\203\206i\\R\276F\356\302\376\306\361W\276\262\034?Y\323\352[\276\366\005_\025\202\265^\276\277\213\322\370Y\262`\2767\3136Fc\223b\276Uo\372c\264/d\276\307}\025\243\241\324d\276\205U\357\202\036\360d\276\247i\002\023`\342d\276`s\341\323b\310O\276\232X\032 c\372V\276\367c\n\302\013\225U\276ir%\001\3719V\276C-\311b\233\013U\276%\211\005EJoS\276\332\277F\244\272\370S\276^\020\223\344\300\301S\276\320\036\256#\256fT\276\343`\337$\307\212S\276\332\277F\244\272\370S\276\230\227 \2047\024T\276\2418\271\004D\246S\276\2418\271\004D\246S\276\034\350l\304=\335S\276C-\311b\233\013U\276\2016J:i*[\276\036K\273\263\337\343_\276\310,kyfD`\276\"\310\013\251\036\211`\276\355d\306\224u#_\276]\262\34777\342\\\2767\3136Fc\223R\276\232X\032 c\372F\276o\037\035C\"\317D\276:E\207\345\324\021C\276\\\226BEOCC\276\345\332/\3048\tD\276S\365\251\304B\261C\276JT\021D6\037D\2761\353\227a\202\347E\276(J\377\340uUF\276\243\371\262\240o\214F\276\243\371\262\240o\214F\2761\353\227a\202\347E\276\265;\344\241\210\260E\2761\353\227a\202\347E\276Z\361\355\233\013\374I\276\326\240\241[\0053J\276Z\361\355\233\013\374I\276Z\361\355\233\013\374I\276c\222\206\034\030\216I\276l3\037\235$ I\276u\324\267\0351\262H\276\350\342\322\\\036WI\276\372$\004^7{H\276~uP\236=DH\276\211\026\351\036J\326G\276\372$\004^7{H\276\350\342\322\\\036WI\276\361\203k\335*\351H\276\372$\004^7{H\276~uP\236=DH\276u\324\267\0351\262H\276\361\203k\335*\351H\276u\324\267\0351\262H\276l3\037\235$ I\276\361\203k\335*\351H\276u\324\267\0351\262H\276\rg5_P\237G\276(J\377\340uUF\276\004\306\234\336C\rH\276\243\371\262\240o\214F\2761\353\227a\202\347E\276(J\377\340uUF\276i+|\004?\322C\276\033C\030\033\372\225:\276:\2140\342\216yE\276l3\037\235$ I\276\323\337\247\277\331LW>I\rhG|\267Q>pR\304\345\331\345R>\236w\277h\030\300P>`s\341\323b\310O>`s\341\323b\310O>\351@~\t\2506P>\355d\306\224u#O>\204\367C\326\224\020N>\355d\306\224u#O>i\024zToZO>{V\253U\210~N>`s\341\323b\310O>\344\303-\024i\221O>i\024zToZO>{V\253U\210~N>\366\005_\025\202\265N>\344\303-\024i\221O>\355d\306\224u#O>\351@~\t\2506P>i\024zToZO>\333\"\225\223\\\377O>\355d\306\224u#O>i\024zToZO>I\rhG|\267Q>\2135\216g\377\233Q>\340\237\345\210\233\244P>\327\376L\010\217\022Q>\340\237\345\210\233\244P>\327\376L\010\217\022Q>\340\237\345\210\233\244P>\340\237\345\210\233\244P>^\020\223\344\300\301S>\037\251f`i\303V>\224x{;\202NZ>\276~\321u\013c^>\205\004EY\343_`>\244\250\010w4\374a>\026\267#\266!\241b>\271\2533\024y\006d>[\240Cr\320ke>|\264V\002\022^e>=\374\177T\177\317c>\007\345A\'\371\322a>\020\206\332\247\005ea>i\024zToZ_>\377\246\367\225\216G^>\2279u\327\2554]>T\021O\267*P]>{V\253U\210~^>\372$\004^7{X>c\222\206\034\030\216Y>\273\275\327\331\337|[>\031\311\307{\210\027Z>=M*~\272_X>=M*~\272_X>\221\267\201\237VhW>\320\036\256#\256fT>e\3601\311\241mP>\2135\216g\377\233Q>I\rhG|\267Q>7\3136Fc\223R>\205U\357\202\036\360T>C-\311b\233\013U>y\363\\f\346wR>S\256\000\310\210IQ>\333\"\225\223\\\377O>-\314\362\030\315!L>Z\361\355\233\013\374I>u\324\267\0351\262H>\t_\222\306jQB>\225\326&\350\013.A>\262\034?Y\323\352;>\210]\222\033\004>:>VD\366Y\342f;>\222E\324\230\3127<>\334\333\353\226\242\227=>\315\377\010\333\370\240J>\376C\251\246\354@R>\262\034?Y\323\352[>\225\326&\350\013.a>\2135\216g\377\233a>\034\350l\304=\335c>\307}\025\243\241\324d>4[\347\323r=d>\210\305>\365\016Fc>b\200\342V\261\027b>\nU\221\231\351(`>\020(/\373{\205Z>u\324\267\0351\262X>ir%\001\3719V>\001\005\243B\030\'U>.*\236\305V\001S>\327\376L\010\217\022Q>\232X\032 c\372V>\323\337\247\277\331LW>a\321\214\200\354\247V>\334\200@@\346\336V>\323\337\247\277\331LW>X0\364\377\337\025W>\221\267\201\237VhW>\026\010\316\337\\1W>\221\267\201\237VhW>\221\267\201\237VhW>F\356\302\376\306\361W>\221\267\201\237VhW>=M*~\272_X>\270\374\335=\264\226X>+\013\371|\241;Y>Z\361\355\233\013\374Y>\235\031\024\274\216\340Y>\031\311\307{\210\027Z>\326\240\241[\0053Z>\020(/\373{\205Z>\2016J:i*[>H\257\274\232\362\327Z>\336%\225\351)&0\276L\316a\343\247\235\024\276r\265\022\325{\354\356=F/\304\316v\006\021>_\345\216\332\356\370\032>`s\341\323b\310\037>\215\303\340`sk&>\204\"H\340f\331&>{\201\257_ZG\'>\303\320\035ax?&>9\376\335\350\032\2520>\236\276he\322\'3>\322\254\000\035\"69>\215Q3Z\347:;>wb\n\027\245\201=>\251\222\250\210\226\320@>c\275\212&\352VB>e7\333\305[\325B>\320\036\256#\256fD>\232X\032 c\372F>;\277\327\204F\220C>\307\357\302\251-\005@>\033C\030\033\372\225:>pR\304\345\331\345\">\036b\275c\257[$>\337\317\214\325\205\224\376=\346\323\202\255<\212\326=\375z\375\t\323\257\375\275\220`\203\t\311\007\016\276\375\354\252\020_\340\370\275H\205\275z\022;\006\276x\000\262\251\354I\t\276\004\306\234\336C\r\030\276`\236\345\3354\221\030\276\314q\266\341\204\321\025\276r\265\022\325{\354\036\276M\025\013\340a\005\027\276\2504\375\333\014\361\031\276(\037\373\326\243\214\035\276\336%\225\351)& \276\003\177\363\341\211\245\025\276\236\022g\245\222a\014\276\346\214\331\260\202\"\004\276(\037\373\326\243\214\375\275\003\177\363\341\211\245\005>(J\377\340uU\026>\310(\022y\357n\007>\031\337\304Afc\n>\356\254t{!\267\005>J\241bm\372\331\017>\321\326\377<\002\323\375=Z\200E\177q\367\322=\264\344\345\013\373O\334\275\210\245@\002\260\321\020\276\226dy\341\177\375\025\276\036\033\024g\365\363!\276`s\341\323b\310\037\276\003\177\363\341\211\245%\276\250\246\252\342\230!%\276\'\274\254\347\001\206!\276\014 \214b\2267%\276\272\350\333\343\261E$\276i\024zToZO\276i\024zToZO\276\366\005_\025\202\265N\276\344\303-\024i\221O\276\340\237\345\210\233\244P\276S\256\000\310\210IQ\276\020\206\332\247\005eQ\276\236w\277h\030\300P\276|\264V\002\022^U>~l~;\n\211\244>\204^\323\021-j\241>\026>\336\210G\022\237>^j\017q/\r\234>}\275(eE\031\231>\366\253\342\210\023j\226>\366\253\342\210\023j\226>z \233\254\235\235\226>\243\371\262\240o\214\226>_\031eG\364|\227>\372HpA\273\345\230>\\\315\201\270\207\221\231>c\266\362\377\233\370\231>}\275(eE\031\231>\214\217\n\364m\347\231>\010\033R\320\343\263\231>T\344\020qs*\231>u\324\267\0351\262\230>\311\206\347\005\325\217\230>\321oXM\351\366\230>\352v\216\262\222\027\230>\262\313\224/\230Z\227>\366\253\342\210\023j\226>\324\273;\334U\342\226>.W\334\013\016\'\227>\356\302qA\377\002\226>+\272NSf\253\224>v\203\r\364\365!\224>\362\016U\320k\356\223>\344<sAC \223>\315\201 k\006\353\221>\325j\221\262\032R\222>z\317\360\202b\r\222>\234\277\227/ \225\221>\234\277\227/ \225\221>k\375\016\3649?\221>d\024\236\254%\330\220>\205\004EY\343_\220>O\351\327\013B\317\217>\365M7\334\211\212\217>\340\237\345\210\233\244\220>\266\306\315\224\311\265\220>B$\367\377gP\221>\202\270a\312vt\222>\353%\344\210W\207\223>#\321\335\013RD\224>\320\036\256#\256f\224>\372\367\305\027\200U\224>\005~\304\027<8\227>\210\362|;\306k\227>\005~\304\027<8\227>6@MS\"\216\227>\372HpA\273\345\230>}\275(eE\031\231>\214\217\n\364m\347\231>2\364i\304\265\242\231>\337A:\334\021\305\231>\256\177\261\240+o\231>\010\033R\320\343\263\231>\224x{;\202N\232>2\364i\304\265\242\231>D\022/\342J\\\230>\220\333\355\202\332\322\227>\243\371\262\240o\214\226>E\301\204\270\017\314\223>2\243\277\232z\022\225>\215>`\3122W\225>\372\367\305\027\200U\224>g\261+e\315S\223>\344<sAC \223>E\301\204\270\017\314\223>\\|\327\216L\001\225>\224\'\321\021G\276\225>\021\263\030\356\274\212\225>kN\271\035u\317\225>\\|\327\216L\001\225>\034\350l\304=\335\223>\r\026\2135\025\017\223>\r\026\2135\025\017\223>\301L\314\224\205\230\223>\006-\032\356\000\250\222>`\310\272\035\271\354\222>g\261+e\315S\223>\211\241\322\021\213\333\222>Q\366\330\216\220\036\222>:;\206\270S\351\220>d\024\236\254%\330\220>:;\206\270S\351\220>\225\326&\350\013.\221>\347\210V\320\257\013\221>\357q\307\027\304r\221>\306\230\257#\362\203\221>/\0062\342\322\226\222>\334S\002\372.\271\222>\006-\032\356\000\250\222>\006-\032\356\000\250\222>\263z\352\005]\312\222>\006-\032\356\000\250\222>\006-\032\356\000\250\222>/\0062\342\322\226\222>/\0062\342\322\226\222>z\317\360\202b\r\222>\202\270a\312vt\222>\202\270a\312vt\222>\253\221y\276Hc\222>\325j\221\262\032R\222>\211\241\322\021\213\333\222>\334S\002\372.\271\222>\272c[Mq1\223>o\232\234\254\341\272\223>\024\377\373|)v\223>M\252\365\377#3\224>~l~;\n\211\224>\001\3416_\224\274\224>\330\007\037k\302\315\224>\330\007\037k\302\315\224>\205U\357\202\036\360\224>:\2140\342\216y\225>\350\331\000\372\352\233\225>kN\271\035u\317\225>PG\203\270\313\256\226>X0\364\377\337\025\227>\334\244\254#jI\227>PG\203\270\313\256\226>\262\313\224/\230Z\227>\361\260\251#\342\016\235>9.\2055\005\232\236>\ty\375|m\223\240>\241SAY\271\226\247>A\306KS\336p\252>9.\2055\005\232\256>\276\257>\334\335\034\261> 4PS\252\310\261>iW\235\254\203I\262>\024\377\373|)v\263>^\"I\326\002\367\263>v\203\r\364\365!\264>^\"I\326\002\367\263>\024\377\373|)v\263>\263z\352\005]\312\262>\013L\266\240H\016\260>\344\2049\334o6\253>{\306\014\364S\223\245>\257.\007w\360\336\244>\207\373`\312\324\345\243>\244\250\010w4\374\241>\036\216\336\013\364\322\242>\361h\343\210\265\370\244>\207L\013\364\017v\250>\215\355\265\240\367\306\260>v\203\r\364\365!\264>\300\246ZM\317\242\264>\330\007\037k\302\315\264>\330\007\037k\302\315\264>\330\007\037k\302\315\264>^\"I\326\002\367\263>\202\270a\312vt\262>\246Nz\276\352\361\260>\021\373\336\210\351\240\255>\233a\354\202\226\265\252>\277\367\004w\n3\251>\020UmA3\253\256>j\360\rq\353\357\256>\251<\262\240\315\375\247>\270\016\224/\366\313\250>u\324\267\0351\262\250>lE\325\216fU\251>\326\262WMGh\252>N\362\273\232PI\254>\024\241P\320\237\226\254>\250\215\\\312\010\216\254>-\250\2065I\267\253>\233a\354\202\226\265\252>KU.\342\250\315\251>\337A:\334\021\305\251>\343\215\035k~\260\247>\3453\217\2624\246\246>\316x<\334\367p\245>\270\275\351\005\273;\244>\024\377\373|)v\243>/\0062\342\322\226\242>\347\210V\320\257\013\241>\033\361PSLW\240>\215\355\265\240\367\306\240>b\007\235)\327\210\236>\211\241\322\021\213\333\242>o\232\234\254\341\272\243>t\335\233\254?,\245>s7*e\2116\246>s7*e\2116\246>\326a\255#\014\330\245>\254\210\225/:\351\245>\226\315BY\375\263\244>\247E\226/\334w\244>f\013\272\035\027^\244>\013p\031\356^\031\244>v\203\r\364\365!\244>%wOS\010:\243>Gg\366\377\305\301\242>iW\235\254\203I\242>\265 \\M\023\300\241>\225\326&\350\013.\241>}ub\312\030\003\241>\266\306\315\224\311\265\240>[\036,\342\302!\236>\337\222\344\005MU\236>\337\222\344\005MU\236>m\243\200;\3604\240>S\234J\326F\024\241>/\0062\342\322\226\242>\013p\031\356^\031\244>\rg5_P\237\247>\366\374\214\262N\372\252>7\210\023\356N\244\257>\212:C\326\362\201\257>r\331~\270\377V\257>\3756\250#\236\361\257>\273\374\313\021\331\327\257>R\217IS\370\304\256>1E\024\356\3602\256>\345{UMa\274\256>1E\024\356\3602\256>\315\032\221/n\221\256>\360\n8\334+\031\256>\371\231\032k\366u\255>\206\235\265\035K\006\255>\300\356 \350\373\270\254>yqE\326\330-\253>\020\004\303\027\370\032\252>\255\331?Yuy\252>\032\223\245\246\302w\251>Cl\275\232\224f\251>\2165|;$\335\250>lE\325\216fU\251>\2165|;$\335\250>xz)e\347\247\247>Cl\275\232\224f\251>\225\036\355\2028D\251>\214\217\n\364m\347\251>]s\363\377=\207\250>\207L\013\364\017v\250>\344\2049\334o6\253>\231\273z;\340\277\253>\03503_j\363\253>\347*\253#&,\252>\212\351\230\254\267\361\252>\007u\340\210-\276\252>H\257\274\232\362\327\252>\336\233\310\224[\317\252>87i\304\023\024\253>X\201\236)\033\246\253>\263\302\260\240\211\340\252> |\026\356\326\336\251>\341\347\253#\310\272\250>\373\356\341\210q\333\247>O\241\021q\025\271\247>\220\333\355\202\332\322\247>,\261j\304W1\250>\200c\232\254\373\016\250>\352v\216\262\222\027\250>\372HpA\273\345\250>H\257\274\232\362\327\252>\377\213oA\031W\252>\331O\345\005\357\343\254>\256\320[\312f\377\255>\267_>Y1\\\255>\014\270\337\210\213/\254>\024\241P\320\237\226\254>\227\025\t\364)\312\254>^j\017q/\r\254>\016^Q\320A%\253>9\335\332\013\312\t\252>\270\016\224/\366\313\250>\241SAY\271\226\247>\375\224S\320\'\321\246>1\375MS\304\034\246>t\335\233\254?,\245>\t\312\247\246\250#\245>t\335\233\254?,\245>\226\315BY\375\263\244>+\272NSf\253\244>2\243\277\232z\022\245>\305\351YM-\024\246>\246\226@Y\027\010\251>D\022/\342J\\\250>\213\230\356\202|a\246>.W\334\013\016\'\247>\322\025\312\224\237\354\247>\352v\216\262\222\027\250>\230\304^\312\3569\250>6@MS\"\216\247>\343\215\035k~\260\247>\365\005qA]t\247>>)\276\2326\365\247>\240\255\317\021\003\241\250>\270\016\224/\366\313\250>\351\320\034k\334!\251>\022\2524_\256\020\251>\332\376:\334\263S\250>s\346\177;N\246\241>\327\020\003\372\320G\241>c\266\362\377\233\370\231>\375\224S\320\'\321\226>\366\253\342\210\023j\226>\353%\344\210W\207\223>\263z\352\005]\312\222>\306\230\257#\362\203\221>\347\210V\320\257\013\221>\257\335\\M\265N\220>\374\345\375\371ba\213>\366\374\214\262N\372\212>\234\020BY[%\206>\215>`\3122W\205>\301L\314\224\205\230\203>\263z\352\005]\312\202>+i\244)+\033\200>\300\356 \350\373\270|>\300\356 \350\373\270|>\224x{;\202Nz>+\013\371|\241;y>\271\264\005w\254\301w>~uP\236=Dx>\207\r\027\274\026\033t>\301L\314\224\205\230s>\034\361>\'q\230w>\213\2068\221:,v>F\235\030\325\213as>\005~\304\027<8w>;\225\002E\3024y>H\257\274\232\362\327z>\243\233\007\364\345\254\177>`\310\272\035\271\354\202>\0339\027\356xm\210>v%bGlB\215>\233\262\226\254\321E\217>:;\206\270S\351\220>>\330\023q\373d\223>\320\036\256#\256f\224>\330\007\037k\302\315\224>\023P\246\246d\006\230>\205\246\231\254Y\200\231>\2523\316\021\277\203\233>\236e\tw\326\212\260>\355d\306\224u#\257>\276\257>\334\335\034\261>\276\257>\334\335\034\261>\276\257>\334\335\034\261>\007\323\2135\267\235\261>\357q\307\027\304r\261>\007\323\2135\267\235\261>\276\257>\334\335\034\261>\247E\226/\334w\264>\t\312\247\246\250#\265>\217\344\321\021\351L\264>\232\031&\350i\237\262>\300U\260#\224\022\260>\327\020\003\372\320G\261>\246Nz\276\352\361\260>\246Nz\276\352\361\260>\357q\307\027\304r\241>/\0062\342\322\226\242>\036\216\336\013\364\322\242>g\261+e\315S\243>g\261+e\315S\243>\332\255\220\262x\303\243>~l~;\n\211\244>\030\234\2115\321\361\245>\037\205\372|\345X\246>\207L\013\364\017v\250>\341\347\253#\310\272\250>\020\004\303\027\370\032\252>\367\242\376\371\004\360\251>\2523\316\021\277\203\253>\025G\302\027V\214\253>\241\244\353\202\364&\254>,\002\025\356\222\301\254>\201Z\266\035\355\224\253>\201Z\266\035\355\224\253>\262\034?Y\323\352\253>\323\014\346\005\221r\253>\201Z\266\035\355\224\253>fS\200\270Ct\254>\024\241P\320\237\226\254>\343\336\307\224\271@\254>P\230-\342\006?\253>87i\304\023\024\253>\242J]\312\252\034\253>\212\351\230\254\267\361\252>\224x{;\202N\252>e\\dGR\356\250>\246\226@Y\027\010\251>\365\005qA]t\247>\201\t\014\364\261\004\247>\262\313\224/\230Z\247>\355\034\000\372H\r\247>\000;\305\027\336\306\245>R\355\364\377\201\244\245>ceH\326`h\245>\226\315BY\375\263\244>\361h\343\210\265\370\244>7\346\276\232\330\203\246>O\241\021q\025\271\247>\243\371\262\240o\214\246>b\277\326\216\252r\246>\001\3416_\224\274\244>\374\2357_6K\243>3R\025q?\202\240>\256\320[\312f\377\235>=zh\304q\205\234>\2523\316\021\277\203\233>=zh\304q\205\234>\352.\310\027f\001\240>\246Nz\276\352\361\240>\345\342\344\210\371\025\242>Gg\366\377\305\301\242>-`\300\232\034\241\243>~l~;\n\211\244>+\272NSf\253\244>o\232\234\254\341\272\243>^\"I\326\002\367\243>^\"I\326\002\367\243>\251\353\007w\222m\243>\364\264\306\027\"\344\242>\313\333\256#P\365\242>OPgG\332(\243>x)\177;\254\027\243>g\261+e\315S\243>^\"I\326\002\367\243>v\203\r\364\365!\244>\211\241\322\021\213\333\242>\342\226\001\372\214*\244>\316x<\334\367p\245>\224\'\321\021G\276\245>:\2140\342\216y\245>Bu\241)\243\340\245>Z\326eG\226\013\246>\220\333\355\202\332\322\247>g\002\326\216\010\344\247>\312,YM\213\205\247>I^\022q\267G\246>\274Zw\276b\267\246>\210\362|;\306k\247>\0339\027\356xm\250>L\373\237)_\303\250>L\373\237)_\303\250>,\261j\304W1\250>\003\330R\320\205B\250>\271\264\005w\254\301\247>\304C\350\005w\036\247>\016\r\247\246\006\225\246>t\335\233\254?,\245>\266\027x\276\004F\245>+\272NSf\253\244>\332\255\220\262x\303\243>\036\216\336\013\364\322\242>\345\342\344\210\371\025\242>L\263\331\2162\255\240>B$\367\377gP\241>\345\342\344\210\371\025\242>\211\241\322\021\213\333\242>V9\330\216\356\217\243>\004\207\250\246J\262\243>\301L\314\224\205\230\243>1\254\243)\211\214\241>+i\244)+\033\240>\327\251s\2768\356\235>\314t\037\350\267\233\237>L\263\331\2162\255\240>\352.\310\027f\001\240>j\360\rq\353\357\236>\232\031&\350i\237\242>\266\027x\276\004F\245>:\2140\342\216y\245>\316x<\334\367p\245>\330\007\037k\302\315\244>\236\266\263\240\021\033\245>2\243\277\232z\022\245>K\004\204\270m=\245>\320\036\256#\256f\244>\307\217\313\224\343\t\245>\\|\327\216L\001\245>\\|\327\216L\001\245>t\335\233\254?,\245>2\243\277\232z\022\245>t\335\233\254?,\245>!+l\304\233N\245>ceH\326`h\245>\215>`\3122W\245>\032B\373|\207\347\244>\300\246ZM\317\242\244>\t\312\247\246\250#\245>\316x<\334\367p\245>\236\266\263\240\021\033\245>\\|\327\216L\001\245>\361h\343\210\265\370\244>\307\217\313\224\343\t\245>\205U\357\202\036\360\244>\\|\327\216L\001\245>\257.\007w\360\336\244>\223\201_\312\220\310\246>n<\361\377W\333\274>\341\347\253#\310\272\250>\327X\311\224\375]\251>\032\223\245\246\302w\251>+\013\371|\241;\251>Cl\275\232\224f\251>\235\007^\312L\253\251>\233a\354\202\226\265\252>H\257\274\232\362\327\252>\265\271\314\021{f\256>m\243\200;\3604\260>\276\257>\334\335\034\261>\232\031&\350i\237\262>\362_\377\371\246~\270>\031\344O\320\375\007\276>\\+-e\021q\300>\254d2\342#\336\301>\024\377\373|)v\303>!+l\304\233N\305>_\031eG\364|\307>\370u\267\035\340j\311>\364V\033k\230\004\314>\3577\177\270P\236\316>5\2128\337\200}\321>^\"I\326\002\367\323>\320\335\246&^\361\326>\n\301\303\027\232\251\330>\343\037\317\221\t\266\331>Z\372\310\224\254\026\332>\216\307-b\257\342\332>k1\025n;e\334>\364V\033k\230\004\334>\370u\267\035\340j\331>O\342\030ne.\325>\350!\307\224\027\262\315>kN\271\035u\317\305>2\177\\Md\007\301>yqE\326\330-\273>\203\257};h\372\265>^\"I\326\002\367\263>\007\323\2135\267\235\261>\247!3\342\305l\260>\250\215\\\312\010\216\254>$\031\244\246~Z\254>\245\360\316\021a\022\252>\357\271\215\262\360\210\251>Z\326eG\226\013\246>\007\323\2135\267\235\241>\244\250\010w4\374\241>B$\367\377gP\241>\345\342\344\210\371\025\242>\007\323\2135\267\235\241>z\317\360\202b\r\242>/\0062\342\322\226\242>\036\216\336\013\364\322\242>\303\362=\334;\216\242>g\261+e\315S\243>\272c[Mq1\243>\344<sAC \243>\272c[Mq1\243>g\261+e\315S\243>`\310\272\035\271\354\242>Q\366\330\216\220\036\242>z\317\360\202b\r\242>\345\342\344\210\371\025\242>\276\257>\334\335\034\241>1\254\243)\211\214\241>\313\333\256#P\365\242>\332\255\220\262x\303\243>T\223fG8\232\244>\361h\343\210\265\370\244>kN\271\035u\317\245>\210\362|;\306k\247>\231j\320\021\245/\247>\264q\006wNP\246>T\223fG8\232\244>\351\177rA\241\221\244>\301L\314\224\205\230\243>8\225\024q\235\363\241>\367Z8_\330\331\241>k\375\016\3649?\241>\314t\037\350\267\233\237>\020UmA3\253\236>\024\241P\320\237\226\234>q\210\324\216\304\306\232>\327X\311\224\375]\231>T\344\020qs*\231>\271\264\005w\254\301\227>\210\362|;\306k\227>\030\234\2115\321\361\225>Bu\241)\243\340\225>\224\'\321\021G\276\225>\005~\304\027<8\227>\362\016U\320k\356\223>\334S\002\372.\271\222>\030K\337\013\226a\221>\021bn\304\201\372\220>d\024\236\254%\330\220>B$\367\377gP\221>\021bn\304\201\372\220>\266\306\315\224\311\265\220>\355d\306\224u#\217>\ty\375|m\223\220>\ty\375|m\223\220>\266\306\315\224\311\265\220>\266\306\315\224\311\265\220>\347\210V\320\257\013\221>\030K\337\013\226a\221>B$\367\377gP\221>\\+-e\021q\220>\266\306\315\224\311\265\220>k\375\016\3649?\221>3R\025q?\202\220>\340\237\345\210\233\244\220>\310\327\221/\020 \215>^j\017q/\r\214>\224x{;\202N\212>A\027\366|\031\001\217>O\351\327\013B\317\217>\205\004EY\343_\220>\\+-e\021q\220>\340\237\345\210\233\244\220>\266\306\315\224\311\265\220>3R\025q?\202\220>\021bn\304\201\372\220>\225\326&\350\013.\221>\315\201 k\006\353\221>\253\221y\276Hc\222>I\rhG|\267\221>d\024\236\254%\330\220>\\+-e\021q\220>\\+-e\021q\220>\215\355\265\240\367\306\220>\257\335\\M\265N\220>3R\025q?\202\220>\215\355\265\240\367\306\220>3R\025q?\202\220>\ty\375|m\223\220>\340\237\345\210\233\244\220>\340\237\345\210\233\244\220>\ty\375|m\223\220>\021bn\304\201\372\220>s\346\177;N\246\221>\315\201 k\006\353\221>\r\026\2135\025\017\223>\024\377\373|)v\223>\3115=\334\231\377\223>\030\234\2115\321\361\225>\rg5_P\237\227>\010\033R\320\343\263\231>9\335\332\013\312\t\232>\246\347\352\202R\230\235>\365M7\334\211\212\237>d\024\236\254%\330\240>-`\300\232\034\241\243>_\031eG\364|\247>\237\376y;>1\255>\ty\375|m\223\260>\357q\307\027\304r\261> 4PS\252\310\261>\313\333\256#P\365\262>-`\300\232\034\241\263>v\203\r\364\365!\264>\217\344\321\021\351L\264>\t\312\247\246\250#\265>\234\020BY[%\266>G\270\240)\001R\267>\301\235v\276\300(\270>T\344\020qs*\271>\266h\"\350?\326\271>a\020\201\270\345\002\273>$\031\244\246~Z\274>n<\361\377W\333\274>b\007\235)\327\210\276>\223\311%e\275\336\276>&\020\300\027p\340\277>D\312hG\036F\300>u\214\361\202\004\234\300>\001\275\323\021~\261\300>2\177\\Md\007\301>\215\355\265\240\367\306\300>u\214\361\202\004\234\300>\246Nz\276\352\361\300> 4PS\252\310\301> 4PS\252\310\301>{\242\251\246=\210\301>\224\003n\3040\263\301>{\242\251\246=\210\301>2\177\\Md\007\301>\327\020\003\372\320G\301>2\177\\Md\007\301>u\214\361\202\004\234\300>\351[\017\364\212\206\300>\270\231\206\270\2440\300>&\020\300\027p\340\277>\335\354r\276\226_\277>\254*\352\202\260\t\277>\r\257\373\371|\265\277>&\020\300\027p\340\277>u\214\361\202\004\234\300>\007\323\2135\267\235\301>{\242\251\246=\210\301>cA\345\210J]\301>\001\275\323\021~\261\300>\351[\017\364\212\206\300>\305\305\366\377\026\t\302>\352R+e|\014\304>R\355\364\377\201\244\305>\273\207\276\232\207<\307>M\316XM:>\310>\257Rj\304\006\352\310>\377\213oA\031W\312>\244\035\026\356\205\227\312>\355@cG_\030\313>\2523\316\021\277\203\313>\325\337\236)l\355\312>\2523\316\021\277\203\313>\222\322\t\364\313X\313>g&9\334\036\357\313>\230\350\301\027\005E\314>U\333,\342d\260\314>U\333,\342d\260\314>n<\361\377W\333\314>C\220 \350\252q\315>C\220 \350\252q\315>1E\024\356\3602\316>\377\213oA\031W\312>\017\340_\312\341\017\306>\352R+e|\014\304>\016\351CY\360\211\302>2\177\\Md\007\301>&\020\300\027p\340\277>\206\235\265\035K\006\275>\027\3553_\014\202\272>\251<\262\240\315\375\267>\375\224S\320\'\321\266>\t\312\247\246\250#\265>\007\323\2135\267\235\261>]\304\235)y\027\255>\\\315\201\270\207\221\251>?\317/\342\354\352\246><2\242)Eo\244>\272c[Mq1\243>\2220\265\240U8\242>\357q\307\027\304r\241>\330\266tA\207=\240>9.\2055\005\232\236>\227\025\t\364)\312\234>v%bGlB\235>1E\024\356\3602\236>S5\273\232\256\272\235>S5\273\232\256\272\235>\204\367C\326\224\020\236>\020UmA3\253\236>9.\2055\005\232\236>&\020\300\027p\340\237>m\243\200;\3604\240>\371\000\252\246\216\317\240>\371\000\252\246\216\317\240>\000\352\032\356\2426\241>\207\373`\312\324\345\243>\247E\226/\334w\244>\021\263\030\356\274\212\245>\211\241\322\021\213\333\242>\257\335\\M\265N\240>+i\244)+\033\240>\036\'O\320[y\237>\234\277\227/ \225\241>\023Y\2125s\200\244>\274Zw\276b\267\246>PG\203\270\313\256\246>\373\356\341\210q\333\247>i\371\361\377\371i\253>\2378\302\232\261\005\260>Q\366\330\216\220\036\262>v\203\r\364\365!\264>\234\020BY[%\266>;\203LS\200\377\270>n<\361\377W\333\274>u\214\361\202\004\234\300>\344<sAC \303>\352R+e|\014\304>}\231\305\027/\016\305>R\355\364\377\201\244\305>kN\271\035u\317\305>\034\014\320\021T\350\307>\266h\"\350?\326\311>H\257\274\232\362\327\312>\350!\307\224\027\262\315>\345P3bn\020\320>cA\345\210J]\321>\263z\352\005]\312\322>\266\205\306\227y@\323>v\203\r\364\365!\324>\t\312\247\246\250#\325>=\227\014t\253\357\325>G\270\240)\001R\327>M\316XM:>\330>pP\261 \203\313\331>\360K?\331{\216\333>\326\326\272\232]s\336>N\365\\\215\211 \340>iW\235\254\203I\342>O\342\030ne.\345>{\205\005\367\003\036\350>\262]FV#`\351>H\257\274\232\362\327\352>\200\207\375\371\021\032\354>\3567\177\270P\236\356>\255*\352\202\260\t\357>q\201\025\361\347%\360>\215\355\265\240\367\306\360>\372\234\273]/M\361>\251YVP\007h\361>\304\305\366\377\026\t\362>\010\323\2135\267\235\361>\251YVP\007h\361>J\340 kW2\361>!>\260\343\277@\360>\177\267\345\310ov\360>h\035UM\020u\357>\255*\352\202\260\t\357>\025\331s>\341\221\355>\373l\323\216\321\360\354>Y\346\010t\201&\355>\270_>Y1\\\355>\373l\323\216\321\360\354>\"\016\310\024b\344\353>\262]FV#`\351>pP\261 \203\313\351>pP\261 \203\313\351>\021\327{;\323\225\351>\213\274Q\320\222l\352>d\033]J\002y\353>\373l\323\216\321\360\354>\025\331s>\341\221\355>\255*\352\202\260\t\357>\324\313\336\010A\375\355>\232\363\235\251!\273\354>-C\034\353\3426\352>\035\014\320\021T\350\347>@\265,%\354W\341>\223\311%e\275\336\336>||!h\365\243\333>\212\3055_\241\346\326>B\266\250&\363U\323>G\325D\331:\274\320>\254*\352\202\260\t\317>+i\244)+\033\320>T\001\265 \255\224\322>\013\336g\307\323\023\322>\310\263.\342\371\024\331>\272j\032\353M\322\335>\3577\177\270P\236\336>\320\372J\326\227[\340>\215\355\265\240\367\306\340>+_D\231\025\243\341>Q\366\330\216\220\036\342>\267\217&(\217\270\341> 4PS\252\310\341>&J\010w\343\264\342>\222\231\323\261\277\366\340>\206\235\265\035K\006\335>\311\307\356\002%\005\326>\031\036\230/q\334\320>\377\213oA\031W\312>\225\372\2115\"9\305>\016\351CY\360\211\302>\320\372J\326\227[\300>\267_>Y1\\\275>_\031eG\364|\267>kN\271\035u\317\265>kN\271\035u\317\265>b\007\235)\327\210\276>\t\312\247\246\250#\305>\037\372\007\3646\364\316>pmU\320\2745\323>3vx\276U\215\324>d8\001\372;\343\324>\315\322\312\224A{\326>\254G\2162\352s\330> \027\254\243p^\330>\004\253\013\364`\275\327>\034\014\320\021T\350\327>\026\366\027\356\032\374\326>\361h\343\210\265\370\324>\352R+e|\014\324>\344<sAC \323>\202\270a\312vt\322>\355]\007\367\230\202\324>\266h\"\350?\326\331>\235\007^\312L\253\331>!\016\310\024b\344\333>E\244\340\010\326a\332>lE\325\216fU\331>\340\024\363\377\354?\331>\365j\333\213\303\364\330>\301\235v\276\300(\330>\276\222\232,\244\262\327>\264q\006wNP\326>\337\035\327\216\373\271\325>\333\022\373\374\336C\325>\316\346\212\265lk\323>\220\370\2212\024=\321>#?,\345\306>\322>*U\344\010\000+\323>pmU\320\2745\323>\3401\227\257&\252\322>\305\305\366\377\026\t\322>\251YVP\007h\321>\323\005\'h\264\321\320>/t\200\273G\221\320>\031\344O\320\375\007\316>+/\\\312\267F\315>\274~\332\013y\302\312>f/\035k-i\310>;\203LS\200\377\270>\024\377\373|)v\263>v_\252\246\337\026\260>\331O\345\005\357\343\254>\263\302\260\240\211\340\252>\275Q\223/T=\252>u\324\267\0351\262\250>G\270\240)\001R\247>\030\234\2115\321\361\245>)\024\335\013\260\265\245>\030K\337\013\226a\241>\320\036\256#\256f\224>\002\220\2145Y,\220>\005~\304\027<8\207>\223\311%e\275\336~>\216\366\207\003+\202t>Tf(\001\201tp>6m\213\231\331\263k>\205U\357\202\036\360d>\004u\362\264\010}c>\255I\241\367@\216a>\010H\220\026\233\331]>$+Z\230\300\217\\>1\353\227a\202\347U>\007\345A\'\371\322Q>\377\246\367\225\216GN>\215\230\334V\241\242M>\243\371\262\240o\214F>f~\204\302\025=E>\223\243\177ET\027C>Z\361\355\233\013\374I>7\3136Fc\223R>t\302\023X\312;a>\345!\331\300\362pv>PG\203\270\313\256\206>\240\255\317\021\003\241\230>\220\333\355\202\332\322\247>\300\246ZM\317\242\264>\254*\352\202\260\t\277>_\031eG\364|\307>\304\213\256\240\2434\317>\254d2\342#\336\321>\217\344\321\021\351L\324>D\255\304\227\344\333\326>\033\370\017\361(\370\332>f\022y\273\363\376\336><\252P\223\317\341\340>{\242\251\246=\210\341>\022\376\177{\"x\341>\357q\307\027\304r\341>\372\234\273]/M\341>\314\345\016\264em\341>\035)t\301\215R\341>\246Nz\276\352\361\340>\310\263.\342\371\024\331>\262@\242\246\351\365\317>L\327<\334H\270\304>0N\370|\377\254\272>J\246\330\013\344]\256>\353%\344\210W\207\243>\300\356 \350\373\270\234>2\243\277\232z\022\225>I\rhG|\267\221>\330\266tA\207=\220>H\257\274\232\362\327\212>P\230-\342\006?\213>\310\327\221/\020 \215>\275$U\351\234\027v>\375\247\227\357K\303\341>_\031eG\364|\347>(A$\350\324:\346>\r\325\2038\305\231\345>\r\325\2038\305\231\345>\312\321N\223:}\344>O\342\030ne.\345>A\254H\226\335\335\344>\374\2357_6K\343>\025\t\\\r?\356\341>\311\3322\"I\367\340>\273\244bJ\301\246\340>\362B[Jm\024\337>G\233\374y\307\347\335>\261I\2065\370o\334>\261I\2065\370o\334>\310\327\221/\020 \215\276I\rhG|\267\201\2762\243\277\232z\022\205\276\215>`\3122W\205\276\340\360\217\262\3264\205\276+\272NSf\253\204\276\034\350l\304=\335\203\276\244\250\010w4\374\201\276\205\004EY\343_\200\276*\\\243\246\334\313}\276L\037\014\r\343-y\276|\264V\002\022^u\276\006-\032\356\000\250r\276\270\242a\261EKp\276\361\324\025\007fym\276\257[E\275\247\004i\276\236\310i\222SPe\276\205\004EY\343_`\2769.\2055\005\232^\276o\364\0309P\006\\\2761\353\227a\202\347U\276\351@~\t\2506P\276(J\377\340uUF\276\212\273=\310\215\035A\276\326\240\241[\0053J\276\225\326&\350\013.Q\276\335/\226\026\253Nb\2763R\025q?\202p\276sdh\253@\\z\276\234\277\227/ \225\201\276#\321\335\013RD\204\276\234\020BY[%\206\276g\002\326\216\010\344\207\276\0339\027\356xm\210\276\375\224S\320\'\321\206\276:\2140\342\216y\205\276+\272NSf\253\204\276\024\377\373|)v\203\276B$\367\377gP\201\276G\000g\304-h\177\276G\000g\304-h\177\276\300\356 \350\373\270|\276\360\313C\2442\276y\276\242J]\312\252\034{\276X\201\236)\033\246{\276fS\200\270Ct|\276\223\311%e\275\336~\276\234\277\227/ \225\201\276`\310\272\035\271\354\202\276\3115=\334\231\377\203\276\340\360\217\262\3264\205\276\330\007\037k\302\315\204\276\3115=\334\231\377\203\276v\203\r\364\365!\204\276\024\377\373|)v\203\276\263z\352\005]\312\202\276Q\366\330\216\220\036\202\276\357q\307\027\304r\201\2763R\025q?\202\200\276\355d\306\224u#\177\276\204\367C\326\224\020~\276\374\345\375\371ba{\276\370l\334$?Py\276\271\264\005w\254\301w\276\275$U\351\234\027v\276~l~;\n\211t\276W\'\"\235\254Zs\276\006-\032\356\000\250r\276\274\033\203\206i\\r\276\274\033\203\206i\\r\276\305\274\033\007v\356q\276\234\277\227/ \225q\276\306tC@n\031q\276\033\337\232a\n\"p\276\377\246\367\225\216Gn\276\240\332\rX\272\306l\276\020(/\373{\205j\276O\217[\177\323\203g\276ir%\001\3719f\276\034\350l\304=\335c\276\376C\251\246\354@b\2760\215\354\264\370\007_\276\361\203k\335*\351X\276^\020\223\344\300\301S\276e\3601\311\241mP\276u\324\267\0351\262H\276\342\0316(\r#1\276\342\0316(\r#1>q\231m\342\223M5>\0377\271Y\335\222+><\250\325\324v\030/>\036\375d\240)\375\017>0\244\356d\310\177C\276\216\366\207\003+\202T\276\277\213\322\370Y\262`\276\202\345\237\020.\232f\276\022\351(\227\247km\276\245`0\260,\'q\276\0320E\213E\262t\276Vx\314\306\347\352w\276\310\316\277\314\334dy\276*\\\243\246\334\313}\276:;\206\270S\351\200\276\330\007\037k\302\315\204\276o\353F\326\034K\210\276A\306KS\336p\212\276\262\034?Y\323\352\213\276n<\361\377W\333\214\276\033\212\301\027\264\375\214\276v%bGlB\215\276\310\327\221/\020 \215\276\004\317nAw\310\213\276\"s2_\310d\215\276}\016\323\216\200\251\215\2761E\024\356\3602\216\276\233\262\226\254\321E\217\276\223\311%e\275\336\216\276+i\244)+\033\220\276+i\244)+\033\220\276+i\244)+\033\220\276\205\004EY\343_\220\276\3756\250#\236\361\217\276\330\266tA\207=\220\276\\+-e\021q\220\276\215\355\265\240\367\306\220\276\215\355\265\240\367\306\220\276\205\004EY\343_\220\276O\351\327\013B\317\217\2761E\024\356\3602\216\276\014\270\337\210\213/\214\276A\306KS\336p\212\276o\353F\326\034K\210\276\350\331\000\372\352\233\205\276g\261+e\315S\203\276\367Z8_\330\331\201\276\205\004EY\343_\200\2769.\2055\005\232~\276\264\214\216\313\303@z\276\'\222\327\247}*w\276+\272NSf\253t\276\363\352\350\354\347\203s\276\367Z8_\330\331q\276\226\216N!\004Yp\276\207g\223H\205fl\276^a=\016\374Qh\276\305\r\3060\261~f\276\"\031\266\322Y\031e\276(J\377\340uUf\276I^\022q\267Gf\276\240\211c.\1776h\276x\225\261\271\\\230k\276!\273\n&\3209n\276\201\207\364c\244\272o\276\333\"\225\223\\\377o\276\'\354S4\354uo\276\006\330@\244\252\203o\276\010H\220\026\233\331m\276\014\270\337\210\213/l\276\315\377\010\333\370\240j\276H\257\274\232\362\327j\276\003\027G\010\177\235l\276X\201\236)\033\246k\276\025Yx\t\230\301k\276?\016$\032\346Ek\276?\016$\032\346Ek\276\'\233\251\n\261\345j\276|\005\001,M\356i\276\235\031\024\274\216\340i\276c\222\206\034\030\216i\276\t\367\345\354_Ii\276\321oXM\351\366h\276\022\230~ml\333h\276\367\264\264\353F%j\276\224x{;\202Nj\276\264\214\216\313\303@j\276QPU\033\377ij\276\367\264\264\353F%j\276\000VMlS\267i\276\t\367\345\354_Ii\276\257[E\275\247\004i\276\270\374\335=\264\226h\276\354R\"\317\016\255g\276\232X\032 c\372f\276a\321\214\200\354\247f\276\334\200@@\346\336f\276:\2140\342\216ye\2766\034\341o\236#g\2766\034\341o\236#g\276X0\364\377\337\025g\2766\034\341o\236#g\276@\275y\360\252\265f\276\334\200@@\346\336f\276\037\251f`i\303f\276a\321\214\200\354\247f\276\312>\017?\315\272g\276g\002\326\216\010\344g\276g\002\326\216\010\344g\276\301\235v\276\300(h\276\000VMlS\267i\276\000VMlS\267i\276\337A:\334\021\305i\276\253\353\365J\267\256j\276\363DeyV\317k\276+i\244)+\033p\276:\2140\342\216yu\276\375\224S\320\'\321v\276~uP\236=Dx\276;\225\002E\3024y\276U\300\244\215\357\277x\276\223o\251\330N\223v\276\306\305\355i\251\251u\276]Xk\253\310\226t\276O>\261U\230\363r\276%\211\005EJos\276m\342ts\351\217t\2762\243\277\232z\022u\276\324\216\375\225\236\274r\2767\3136Fc\223r\276\272c[Mq1s\276\266\3529xM q\276\204L\035 \3534q\276\355d\306\224u#o\276\3503}\206Y\347m\276\267M\210g\357&m\276\030\032r\245\303\247n\276v%bGlBm\276X\201\236)\033\246k\276\363DeyV\317k\276\3230R\351\024\335k\276\263z\352\005]\312\202>\033\212\301\027\264\375|>\300\356 \350\373\270|>*\\\243\246\334\313}>\204\367C\326\224\020~>v%bGlB}>\033\212\301\027\264\375|>*\\\243\246\334\313}>\355d\306\224u#\177>\204\367C\326\224\020~>\320\300\002w$\207}>\320\300\002w$\207}>fS\200\270Ct|>H\257\274\232\362\327z>\372$\004^7{x>\251*\374\256\213\310w>\313\3666x\305\345v>\365\363\272O\033?w>9\324\010\251\226Nv>\324\227\317\370\321wv>\3378hy\336\tv>L\316a\343\247\235t>\330\007\037k\302\315t>~l~;\n\211t>\010\356\023\212,\216u>c\211\264\271\344\322u>\205U\357\202\036\360t>a\321\214\200\354\247v>\324\227\317\370\321wv>\337\222\344\005MU~>3R\025q?\202\200>\376C\251\246\354@\202>\023P\246\246d\006\210>\347*\253#&,\212>\rg5_P\237\207>g\002\326\216\010\344\207>9\335\332\013\312\t\212>2\364i\304\265\242\211>\005~\304\027<8\207>X0\364\377\337\025\207>\205U\357\202\036\360\204>\3115=\334\231\377\203>\330\266tA\207=\200>\255I\241\367@\216q>\211\026\351\036J\326g>\276~\321u\013cn>\201\207\364c\244\272o>\024\377\373|)vs>\332\277F\244\272\370s>K\026:\252\257ru>\201-x\3275ow>\242J]\312\252\034{>*\\\243\246\334\313}>\204\367C\326\224\020~>\033\212\301\027\264\375|>v%bGlB}>\377\235%3[\214z>$\332\257n\205\377w>G\246\3527\277\034w>\211\026\351\036J\326w>\"j`\374\224\251y>\305\026\230\223\3449z>9.\2055\005\232~>\3756\250#\236\361\177>2\243\277\232z\022\205>\205U\357\202\036\360\204>\243\371\262\240o\214\206>\177\237q\341@H\026?v\203\r\364\365!\204>\276\222\232,\244\262\027?\205\004EY\343_\200>\331\376:\334\263S\030?A\306KS\336pz>\356\023\034k:\223z>\363;\223\026#\024x>+\272NSf\253\204\276ir%\001\3719v\276\333wn\335\262#s\276\324\216\375\225\236\274r\276\346\320.\227\267\340q\276\305\274\033\007v\356q\276\'\354S4\354uo\276\224x{;\202Nj\276B~s\214\326\233i\2764\254\221\375\255\315h\276u\324\267\0351\262h\276\022\230~ml\333h\276\343\261\211N\002\033h\276\262\313\224/\230Zg\276\316]\264\207\202\200a\276\n\246;\303$\271T\276?\016$\032\346EK\276\032n\034%\314^C\276u\324\267\0351\262H>\221f\327u\033\330b>\265\3358\365\376\320n>\300\224\244[\215mt>Y9\306b\023\321z>3R\025q?\202\200>\234\277\227/ \225\201>\263z\352\005]\312\202>2\243\277\232z\022\205>\234\020BY[%\206>\321oXM\351\366\210>\242J]\312\252\034\213>\242J]\312\252\034\213>\005~\304\027<8\207>\r\026\2135\025\017\203>\3115=\334\231\377\203>\234\020BY[%\206>\rg5_P\237\207>g\002\326\216\010\344\207>9\335\332\013\312\t\212>*\\\243\246\334\313\215>\021bn\304\201\372\220>Q\366\330\216\220\036\222>Q\366\330\216\220\036\222>\221\212CY\237B\223>\230s\264\240\263\251\223>\320\036\256#\256f\224>\001\3416_\224\274\224>ceH\326`h\225>\246\226@Y\027\010\231>\310\327\221/\020 \235>\223\311%e\275\336\236>A\027\366|\031\001\237>G\000g\304-h\237>\352.\310\027f\001\240>9.\2055\005\232\236>[\036,\342\302!\236>\227\025\t\364)\312\234>Ec\331\013\206\354\234>\201Z\266\035\355\224\233>\237\\%\350\307\020\224>\205\246\231\254Y\200\211>\205\004EY\343_\200>Vx\314\306\347\352w>\326\361K\205@\303n>\316]\264\207\202\200a>\347T\200c\252\207D>fw\327\253\031\276\007>\025\301$\343\242\3114\276\366\005_\025\202\265>\276y\363\\f\346wB\276\240\361\017\010\212>A\276\316]\264\207\202\200A\276\201\032\245G\201\213A\276\020\206\332\247\005eA\276$B\\H\220\007A\276\251\302O\325\200\300>\276\262\310@\031\023\261\362\2759\376\335\350\032\252@>\031\311\307{\210\027Z>v\203\r\364\365!d>9\335\332\013\312\tj>\270\242a\261EKp>\177$\246t\002\264s>\253\342#\350\203\363v>\262\034?Y\323\352{>\337\222\344\005MU~>\234\277\227/ \225\201>\301L\314\224\205\230\203>\215>`\3122W\205>\034\350l\304=\335\203>PG\203\270\313\256\206>\271\264\005w\254\301\207>+\013\371|\241;\211>A\306KS\336p\212>\356\023\034k:\223\212>\356\023\034k:\223\212>\355d\306\224u#\217>\002\220\2145Y,\220>\223\311%e\275\336\216>}\016\323\216\200\251\215>\242J]\312\252\034\213>fS\200\270Ct\214>\0339\027\356xm\210>+\272NSf\253\204>\r\026\2135\025\017\203>Y\337I\326\244\205\202>\347\210V\320\257\013\201>\234\277\227/ \225\201>B$\367\377gP\201>:;\206\270S\351\200>\215\355\265\240\367\306\200>9.\2055\005\232~>\243\233\007\364\345\254\177>+i\244)+\033\200>+i\244)+\033\200>+i\244)+\033\200>B$\367\377gP\201>\215\355\265\240\367\306\200>\340\237\345\210\233\244\200>\347\210V\320\257\013\201>3R\025q?\202\200>\357q\307\027\304r\201>\357q\307\027\304r\201>\234\277\227/ \225\201>\244\250\010w4\374\201>B$\367\377gP\201>\225\326&\350\013.\201>\225\326&\350\013.\201>\205\004EY\343_\200>+i\244)+\033\200>G\000g\304-h\177>\337\222\344\005MU~>\223\311%e\275\336~>\204\367C\326\224\020~>\337\222\344\005MU~>\243\233\007\364\345\254\177>\3756\250#\236\361\177>\243\233\007\364\345\254\177>\355d\306\224u#\177>\355d\306\224u#\177>\3756\250#\236\361\177>\223\311%e\275\336~>G\000g\304-h\177>+i\244)+\033\200>B$\367\377gP\201>B$\367\377gP\201>\347\210V\320\257\013\201>\215\355\265\240\367\306\200>\337\222\344\005MU~>\337\222\344\005MU~>\033\212\301\027\264\375|>\262\034?Y\323\352{>\300\356 \350\373\270|>\242J]\312\252\034{>\374\345\375\371ba{>X\201\236)\033\246{>\374\345\375\371ba{>X\201\236)\033\246{>\014\270\337\210\213/|>\300\356 \350\373\270|>\033\212\301\027\264\375|>\223\311%e\275\336~>\337\222\344\005MU~>\355d\306\224u#\177>\330\266tA\207=\200>\347\210V\320\257\013\201>3R\025q?\202\200>\357q\307\027\304r\201>\357q\307\027\304r\201>\340\237\345\210\233\244\200>\225\326&\350\013.\201>\340\237\345\210\233\244\200>\355d\306\224u#\177>\223\311%e\275\336~>\204\367C\326\224\020~>\337\222\344\005MU~>\204\367C\326\224\020~>9.\2055\005\232~>G\000g\304-h\177>\223\311%e\275\336~>3R\025q?\202\200>B$\367\377gP\201>\215\355\265\240\367\306\200>B$\367\377gP\201>\367Z8_\330\331\201>I\rhG|\267\201>\024\377\373|)v\203>\r\026\2135\025\017\203>\r\026\2135\025\017\203>\006-\032\356\000\250\202>\006-\032\356\000\250\202>Y\337I\326\244\205\202>\253\221y\276Hc\202>\253\221y\276Hc\202>Q\366\330\216\220\036\202>g\261+e\315S\203>\224\'\321\021G\276\205>\226dy\341\177\375\265=\031\337\304Afc\272=\021\352-\201\231\227\301=bY7MV$\302=x\000\262\251\354I\311=\271\2412\347\367\335\321=\023\006\323s\2016\333=\357\310\031n\tV\337=6\2659\200\205G\342=\253\357NK.\204\343=(\221\250\335/\275\350=T5\246\252\000\232\350=\330!\237\021s0\350=\312\375\ro\035\246\356=T\303\370\243ti\355=(\003V\344\273\355\363=\310\341h|5\007\365=\347\250~\243j\301\375=.\225\236\265\346\262\000>\345E0\264\310\272\001>\247_\001\346\336\271\002>\177\004\250\201\243?\001>\216\3754\032\'\001\002>\364\367\023P\222\024\000>\263+\217\010\265\267\376=\216\3754\032\'\001\362=q\'\300\333\007\035\352=(\003V\344\273\355\343=\262\310@\031\023\261\342=bY7MV$\342=\336l>\346\343\215\342=\327\223L\030\377`\343=\364\205fI\006\344\344=\364\205fI\006\344\344=\374^X\027\353\020\344=Z\200E\177q\367\342=\253\357NK.\204\343= *d\026\327\300\344=\004\306\234\336C\r\350=/j\232\253\024\352\347=\004\306\234\336C\r\350=T5\246\252\000\232\350=\311o\273u\251\326\351=\200\331\243w\321v\350=\225\326&\350\013.\341= \270\266\017K\220\331=jN\316\r#\360\332=\366\241\013<\356\202\336=F\021\025\010\253\017\337=\234\257\030\266\360Z\340=\345E0\264\310\272\341=Z\200E\177q\367\322=i2)\033;Q\321=\300z$\265\334\n\321=\031\303\037O~\304\320=p\013\033\351\037~\320=\262\310@\031\023\261\322=\216\213\207\023\233\320\326=\273\275\327\331\337|\333=\300z$\265\334\n\341=\0038J\345\317=\343=\206$CLB\324\342= *d\026\327\300\344=\317\272ZJ\0324\344=\317\272ZJ\0324\344=S\247S\261\214\312\343=E\365o\025\303p\345=\254}\241D\242S\350=T5\246\252\000\232\350=\235\313\275\250\330\371\351=\226dy\341\177\375\365=>c\'D\230\253\370=\253\304JA\\\273\372=q\'\300\333\007\035\372=\330hH\016-\230\372=\032&n> \313\374=>8#:\306\342\377=i2)\033;Q\001>pR\304\345\331\345\002>S\247S\261\214\312\003>\374\245\001\024\245x\006>\\UAu\237.\n>7\321\336rm\346\013>Xq\365\317\217*\020>\326L\243\033E\371\020>gj\202h\023\354\020>^\311\351\347\006Z\021>\025\301$\343\242\311\024>\2504\375\333\014\361\031>\247\030X\351$R >\361\203k\335*\351(>\350\r\327f\360\0372>\372\335Za}\0236>\314\270_\336>98>Q{Y%\3212C>\211\026\351\036J\326G>l3\037\235$ I>\204\367C\326\224\020N>S\256\000\310\210IQ>\251{\246\330\306XL>\262\034?Y\323\352K>\361\203k\335*\351H>\037\251f`i\303F>.*\236\305V\001C>*f\244\323]\364?>v\033a\032\353\031;>\221\376*\234\020\3209>q\'\300\333\007\035:>\255oG\027\252U=>\032n\034%\314^C>\037\251f`i\303F>QPU\033\377iJ>-\314\362\030\315!L>{V\253U\210~N>i\024zToZO>\247\030X\351$RP>+i\244)+\033P>i\024zToZO>\351@~\t\2506P>i\024zToZO>\377\246\367\225\216GN>\204\367C\326\224\020N>\240\332\rX\272\306L>\262\034?Y\323\352K>\204\367C\326\224\020N>\010H\220\026\233\331M>r\265\022\325{\354N>\366\005_\025\202\265N>r\265\022\325{\354N>\026\010\316\337\\1G>\372$\004^7{H>\350\342\322\\\036WI>\326\240\241[\0053J>H\257\274\232\362\327J>H\257\274\232\362\327J>\2279u\327\2554M>\033\212\301\027\264\375L>\240\332\rX\272\306L>\326\240\241[\0053J>\337A:\334\021\305I>Z\361\355\233\013\374I>\326\240\241[\0053J>u\324\267\0351\262H>1\353\227a\202\347E>\374\020\002\0045*D>\032n\034%\314^C>\234\213\301\302\032\021E>\312\367eB\023SE>\rg5_P\237G>u\324\267\0351\262H>u\324\267\0351\262H>\004\306\234\336C\rH>\221\267\201\237VhG>\372$\004^7{H>\361\203k\335*\351H>c\222\206\034\030\216I>\251{\246\330\306XL>\251{\246\330\306XL>\215\303\340`sk&>\303\211td\276\327#>\225\035\320\344\305\225#>\'\003V\344\273\355#>\025\301$\343\242\311$>h\370\324a\207\273%>\004\306\234\336C\r(>Dtr_Us\'>\247\355S\337R\211\'>\247\355S\337R\211\'>r\340\026\337M\265\'>W\375L](\377(>\314\270_\336>9(>\350\233)`d\357&>\226dy\341\177\375%>\236\005\022b\214\217%>\261GCc\245\263$>\036b\275c\257[$>\303\211td\276\327#>z:\006c\240\337$>\236\005\022b\214\217%>\303\320\035ax?&>Dtr_Us\'>;\323\331\336H\341\'>\337\372\220\337W]\'>\325Y\370^K\313\'>\026Ow\334\026\231)>\004\rF\333\375t*>\337A:\334\021\305)>\2504\375\333\014\361)>:\032\203\333\002I*>\026Ow\334\026\231)>\303\027\307]2\247(>22A^<O(>22A^<O(>22A^<O(>\225\253\"\3369e(>\371\243\006\250\311}\n>L\316a\343\247\235\004>\305Q\033\027\346<\004>\305Q\033\027\346<\004>\034\232\026\261\207\366\003>\006\310\227J\037\010\004>\310\341h|5\007\005>t)\273G\343\027\006>\204\"H\340f\331\006>6C\214y\371\026\007>2l\225\027\360\344\003>\302\010w\256P\332\005>\377\247\374\177\200s\002>\311\266drc>\374=\226\362\313\332\363\314\372=\210\371>Bp\013\372=\200\331\243w\321v\370=\354\036\"\202\255\347\360=\003\361\240\350\025\326\360=Z\200E\177q\367\362=Z\200E\177q\367\362=iy\322\027\365\270\363=\346\214\331\260\202\"\364=\320\001\004G\324\233\366=\004\306\234\336C\r\370=>c\'D\230\253\370=(\221\250\335/\275\370=\031\230\033E\254\373\367=F<\031\022}\330\367=\201 Mt\213\336\372=\273\275\327\331\337|\373=\004\306\234\336C\r\370==\034~G\336C\366=\030QrH\362\223\365=6\374\342|?\257\364=[\307\356{+_\365=\263\017\352\025\315\030\365=\021\352-\201\231\227\221\2756C\214y\371\026\327=\031\337\304Afc\332=\271\2412\347\367\335\341=\236Y\020\242L\311\336=\271\2412\347\367\335\341=M\352\006\326\217<\336=\273\275\327\331\337|\333=\236Y\020\242L\311\336=\236Y\020\242L\311\336=[\234\352qY\226\334=q\'\300\333\007\035\332=[\234\352qY\226\334=S\247S\261\214\312\323=\310S\026\203\3017\320=>8#:\306\342\317=\0038J\345\317=\323=\n\021<\263\264j\322=\300z$\265\334\n\321==\034~G\336C\326=E\365o\025\303p\325=\254\013\364=\026#\315=\207\262\225E\266\243\307=jN\316\r#\360\312=\226dy\341\177\375\305=E\365o\025\303p\305=6C\214y\371\026\307=\375z\375\t\323\257\315=\235=k\257d*\325=\023\006\323s\2016\333=\005T\357\327\267\334\334=F\021\025\010\253\017\337=E\365o\025\303p\345=\366\023\271Bz\263\351=[\016\230x\345\306\347= *d\026\327\300\344=\n\021<\263\264j\342=\366\241\013<\356\202\336=jN\316\r#\360\332=\345E0\264\310\272\341=\021\352-\201\231\227\341=6\2659\200\205G\342=E\365o\025\303p\345=\375\354\252\020_\340\350=i2)\033;Q\341=p\013\033\351\037~\340=i2)\033;Q\341=\327\223L\030\377`\343=p\013\033\351\037~\340=q\231m\342\223M\345=T5\246\252\000\232\350=b\347\211F\312\363\346=/j\232\253\024\352\347=\207\262\225E\266\243\347=(\221\250\335/\275\350=/\370\354\244\210\271\354=\326L\243\033E\371\360=\354\036\"\202\255\347\360=\003\361\240\350\025\326\360==\216+Njt\361=\031\303\037O~\304\360=\n\312\222\266\372\002\360=\210@\350>*s\354=(\221\250\335/\275\350=\336l>\346\343\215\342=q\'\300\333\007\035\332=\226dy\341\177\375\325=x\000\262\251\354I\331=\364\205fI\006\344\324=\262\310@\031\023\261\322=i2)\033;Q\321=\200\331\243w\321v\330=\311o\273u\251\326\311=\014-\341\245\234\t\314=\262\310@\031\023\261\322=\356\254t{!\267\325=\374^X\027\353\020\324=\374^X\027\353\020\324=S\247S\261\214\312\323=\364\205fI\006\344\324=\330!\237\021s0\330=jN\316\r#\360\332=\300z$\265\334\n\341=\364\205fI\006\344\344=\254\013\364=\026#\355=Dg\035\034O\241\360=T\303\370\243ti\355=\356\254t{!\267\345==\216+Njt\341=\271\2412\347\367\335\321=\310S\026\203\3017\320=6C\214y\371\026\327= \270\266\017K\220\331=\321H\255C\216\003\331=S\247S\261\214\312\323=\023\006\323s\2016\333=\014-\341\245\234\t\334=\264\344\345\013\373O\334=\321H\255C\216\003\331=\346\323\202\255<\212\326=\302\226\311\247\304\251\332=\375z\375\t\323\257\335=cu\334?>\303\333=\264\344\345\013\373O\334=\311o\273u\251\326\331=\023\006\323s\2016\333=\264\344\345\013\373O\334=\330!\237\021s0\330=\031\337\304Afc\332=\023\006\323s\2016\333=(\221\250\335/\275\330=[\234\352qY\226\334=\311o\273u\251\326\331=\244\026]}IW\324=\023\006\323s\2016\333=M\352\006\326\217<\336=\014-\341\245\234\t\334=cu\334?>\303\333=\005T\357\327\267\334\334=jN\316\r#\360\332=\226dy\341\177\375\325=jN\316\r#\360\332=\023\006\323s\2016\333=\207\262\225E\266\243\327=x\000\262\251\354I\331=\330!\237\021s0\330=x\000\262\251\354I\331=M\352\006\326\217<\336=\2452\002p1\366\335=E\365o\025\303p\345=E\365o\025\303p\345=.\334G\262\240\032\343=E\365o\025\303p\345=\356\254t{!\267\345=E\365o\025\303p\345=Z\200E\177q\367\362=\337\317\214\325\205\224\376=\310\232\277\177{\237\002>\226dy\341\177\375\005>\330hH\016-\230\n>j\334 \007\227\277\017>\272\2412\347\367\335\021>\337l>\346\343\215\022>^\311\351\347\006Z\021>\025z{\346\350a\022>\337A:\334\021\305\031>(\330Q\332\351$\033>\004\233\230\324qD\037>\273\275\327\331\337|\033>\255R\235:\320\212\017>F<\031\022}\330\007>\223b~u\244\002\n>\210\371>Bp\013\n>b\240\340I\020\214\004>\257\177\234\260}N\004>\310(\022y\357n\007>W\305\363\017Pd\t>\202\224\365\346\362\t\022>\003\177\363\341\211\245\025>\337\372\220\337W]\027>\361<\302\340p\201\026>^\020\223\344\300\301\023>\025z{\346\350a\022>\236\022g\245\222a\014>\337\372\220\337W]\007>b\347\211F\312\363\006>P\245XE\261\317\007>[\016\230x\345\306\007>\006\201\356Me\240\001>\225\326&\350\013.\001>\326L\243\033E\371\000>\216\3754\032\'\001\002>\367\207a\265\341\336\000>\255R\235:\320\212\377=\n\021<\263\264j\002>\366\023\271Bz\263\t>RzT;\337\006\017>F\021\025\010\253\017\017>\2452\002p1\366\r>M\010\266\234[3\020>\347\250~\243j\301\r>,h\237?9\357\013>U|O\247\272\001\013>\324\330\372\250\335\315\t>\272v.\335%\025\t>\022\277)w\307\316\010>W\305\363\017Pd\t>\346\032,\252\366\361\010>\222\033\325x\352\232\007>t)\273G\343\027\006>\021x\200z\rg\006>{\002\255\025\310D\005>P^\257H\367g\005>\240\315\270\024\264\364\005>\2536\370G\350\353\005>\003\177\363\341\211\245\005>\336\263\347\342\235\365\004>+\223\243I\013\270\004>L\316a\343\247\235\004>\346\214\331\260\202\"\004>b\240\340I\020\214\004>\317\272ZJ\0324\004>b\240\340I\020\214\004>\302\010w\256P\332\005>\240\315\270\024\264\364\005>\356\254t{!\267\005>(J\377\340uU\006>t)\273G\343\027\006>$\272\261{&\213\005>\247\246\252\342\230!\005>2l\225\027\360\344\003>:E\207\345\324\021\003>\314\343c\350\020\002\001>\336%\225\351)&\000>\262\201\227\034YI\000>\\\343\223n\023\376\376=\227\200\036\324g\234\377=\303$\034\2418y\377=\2452\002p1\366\375=/\370\354\244\210\271\374=\302\335r\244~\021\375=\375z\375\t\323\257\375=\023M|p;\236\375=y\216\004\243`\031\376=\330\366\232\007\241g\377=k\225w\n\335W\375=\244\353Xsw\216\373=\311o\273u\251\326\371=\337\372\220\337W]\367=(J\377\340uU\366=\2536\370G\350\353\365=xr_\260xz\364=\213\3739\256K\006\006>pR\304\345\331\345\002>\2751\200LG\250\002>\304\nr\032,\325\001>\271\2412\347\367\335\001>\310S\026\203\3017\000>\263+\217\010\265\267\376=\337\317\214\325\205\224\376=\200g\366pEF\375=\375z\375\t\323\257\375=rni\330\301\204\374=\014-\341\245\234\t\374=\236Y\020\242L\311\376=\023M|p;\236\375=\330!\237\021s0\310=\207\262\225E\266\243\307=\0038J\345\317=\303=\273\275\327\331\337|\273=\021\352-\201\231\227\301=\262\310@\031\023\261\302=x\000\262\251\354I\271=\330!\237\021s0\270=\273\275\327\331\337|\273=[\234\352qY\226\274=\300z$\265\334\n\301=>8#:\306\342\277=bY7MV$\302=E\365o\025\303p\305=\226dy\341\177\375\305=[\234\352qY\226\314=\244\026]}IW\324=\2452\002p1\366\335=\0038J\345\317=\343=\177KQ~]\247\343= *d\026\327\300\344=\310\341h|5\007\345=\235=k\257d*\345=S\247S\261\214\312\343=\021\352-\201\231\227\341=\375z\375\t\323\257\335=6C\214y\371\026\327=(\221\250\335/\275\330=S\247S\261\214\312\323=\374^X\027\353\020\324=\014-\341\245\234\t\334=>8#:\306\342\337=\227\200\036\324g\234\337=M\352\006\326\217<\336=\354\036\"\202\255\347\340=\354\036\"\202\255\347\340=\225\326&\350\013.\341=\364\367\023P\222\024\340=\345E0\264\310\272\341=\234\257\030\266\360Z\340=\336l>\346\343\215\342=\311o\273u\251\326\351=\330\257\361\n\347\377\354=\264\344\345\013\373O\354= \270\266\017K\220\351=q\'\300\333\007\035\352=\340\210\343\330\313,\354=\340\210\343\330\313,\354=\264\344\345\013\373O\354=/\370\354\244\210\271\354=\"F\t\t\277_\356=\364\367\023P\222\024\360=\003\361\240\350\025\326\360=\373\027\257\0321\251\361=\364\367\023P\222\024\360=\375z\375\t\323\257\355=/\370\354\244\210\271\354=\346\323\202\255<\212\346=Z\200E\177q\367\342=\206$CLB\324\342=\031\303\037O~\304\340=\310S\026\203\3017\340=\n\021<\263\264j\342=\206$CLB\324\342=\0038J\345\317=\343=\374^X\027\353\020\344=\244\026]}IW\344=\317\272ZJ\0324\344=\317\272ZJ\0324\344=\327\223L\030\377`\343=\374^X\027\353\020\344=\177KQ~]\247\343=\263V\223\022\207\200\347=(\221\250\335/\275\350=\217\031\332\014\017\240\353=cu\334?>\303\353=7\321\336rm\346\353=\023\006\323s\2016\353=>\252\320@R\023\353=\031\337\304Afc\352=\n\237\216\254(:\347=\235=k\257d*\345=b\347\211F\312\363\346=\317\272ZJ\0324\344=.\334G\262\240\032\343=Z\200E\177q\367\342==\216+Njt\341=>8#:\306\342\337=F\021\025\010\253\017\337=\236Y\020\242L\311\336=\234\257\030\266\360Z\340=\345E0\264\310\272\341=\216\3754\032\'\001\342=\n\021<\263\264j\342=\n\021<\263\264j\342=\262\310@\031\023\261\342=\n\021<\263\264j\342=i2)\033;Q\341=[\234\352qY\226\334=\253\357NK.\204\323=i2)\033;Q\321=\310S\026\203\3017\320=[\234\352qY\226\314=jN\316\r#\360\312=\031\337\304Afc\312=\236Y\020\242L\311\316=\031\303\037O~\304\320=\021\352-\201\231\227\321=\244\026]}IW\324=\356\254t{!\267\325=Z\200E\177q\367\322=\0038J\345\317=\323="
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\021\327{;\323\225\351>\035\014\320\021T\350\347>_\031eG\364|\347>\3463\217\2624\246\346>O\342\030ne.\345>\312\321N\223:}\344>eBa\212Q[\343>\335&\273\035\n4\342>\354f\353\205\247\374\340>\026\023\274\235Tf\340>\000\203\213\262\n\335\335>\216\307-b\257\342\332>\232\374\201805\331>\306\274\022q\010\217\325>T\001\265 \255\224\322>\327\020\003\372\320G\321>D\312hG\036F\320>\232\337\335\210\366\312\317>E\301\204\270\017\314\323>\213\274Q\320\222l\332>\363\206\003:\366`\340>\016\351CY\360\211\342>\325\374B\331\245W\344>(A$\350\324:\346>\206\272Y\315\204p\346>\206\272Y\315\204p\346>_\031eG\364|\347>_\031eG\364|\347>(A$\350\324:\346>\377\250\023\361R\301\343>~\243%\250D\206\343>T\001\265 \255\224\342>\210\316\031\356\257`\343>A\254H\226\335\335\344>\3463\217\2624\246\346>\035\014\320\021T\350\347>\276\222\232,\244\262\347>\001\240/bDG\347>\311\307\356\002%\005\346>\352R+e|\014\344>\3401\227\257&\252\342>\3577\177\270P\236\336>\315\322\312\224A{\326>tR\251#\221\307\315>:\2140\342\216y\305>iW\235\254\203I\302>\215\355\265\240\367\306\300>\305\305\366\377\026\t\302>3vx\276U\215\304>+i\244)+\033\320>\362_\377\371\246~\330>k1\025n;e\334>\3577\177\270P\236\336>\326\326\272\232]s\336>$I\214u\334\266\340>\224\003n\3040\263\341>\357q\307\027\304r\341>\363\206\003:\366`\340>\237\376y;>1\335>g&9\334\036\357\333>uoM\323\3121\327>cA\345\210J]\321>\303\224\222/\262\256\313>\202\270a\312vt\322>vfiD\274\267\332>0N\370|\377\254\332>E\244\340\010\326a\332>\007\266\347\205}3\330>P\274\220/\035J\337>\304\213\256\240\2434\337>\203\302\301Z\214\354\340>\205\303=\\\223\352\342>O\342\030ne.\345>D\255\304\227\344\333\346>\001\240/bDG\347>\227\361\245\246\023\277\350>pP\261 \203\313\351>\3525\207\265B\242\352>\3525\207\265B\242\352>{\205\005\367\003\036\350>^\"I\326\002\367\343>\242&\372|\224\021\347>_\031eG\364|\347>O\342\030ne.\345>\275\245\336K\310\244\342>#?,\345\306>\342>\267\217&(\217\270\341>\242\tV\315Z\247\335>1E\024\356\3602\336>\255n\222r9V\340>\257o\016t@T\342>\255[NS\025d\345>\3463\217\2624\246\346>\035\014\320\021T\350\347>\366j\333\213\303\364\350>\262]FV#`\351>pP\261 \203\313\351>\3525\207\265B\242\352>-C\034\353\3426\352>H\257\274\232\362\327\352>-C\034\353\3426\352>\316\311\346\0053\001\352>\316\311\346\0053\001\352>pP\261 \203\313\351>\021\327{;\323\225\351>\331\376:\334\263S\350>\242&\372|\224\021\347>\206\272Y\315\204p\346>\r\325\2038\305\231\345>\311\307\356\002%\005\346>\311\307\356\002%\005\346>\3463\217\2624\246\346>\3463\217\2624\246\346>\3463\217\2624\246\346>\242&\372|\224\021\347>\242&\372|\224\021\347>D\255\304\227\344\333\346>\311\307\356\002%\005\346>\206\272Y\315\204p\346>\311\307\356\002%\005\346>{\205\005\367\003\036\350>D\255\304\227\344\333\346>kN\271\035u\317\345>D\255\304\227\344\333\346>_\031eG\364|\347>\001\240/bDG\347>\276\222\232,\244\262\347>\r\325\2038\305\231\345>\206\272Y\315\204p\346>\3463\217\2624\246\346>D\255\304\227\344\333\346>D\255\304\227\344\333\346>{\205\005\367\003\036\350>\206\272Y\315\204p\346>\r\325\2038\305\231\345>\255[NS\025d\345>\255[NS\025d\345>\3463\217\2624\246\346>\206\272Y\315\204p\346>\311\307\356\002%\005\346>\r\325\2038\305\231\345>\255[NS\025d\345>\207\304\271]\232\350\344>\024\377\373|)v\343>\037*\360\302\224P\343>*U\344\010\000+\343>\267\217&(\217\270\341>\017\363\243\351\005\002\341>\366\221\337\313\022\327\340>\333%?\034\0036\340>tR\251#\221\307\335>\210\261u>v\366\331>&-d\307\251J\331>\365j\333\213\303\364\330>B\231\004w\271\353\331>\345\026\353\002\373;\335>P\274\220/\035J\337>\276\257>\334\335\034\341>\300\260\272\335\344\032\343>;\226\220r\244\361\343>\300\260\272\335\344\032\343>\031\0248\237[d\342>\325\374B\331\245W\344>\206\272Y\315\204p\346>\311\307\356\002%\005\346>D\255\304\227\344\333\346>\206\272Y\315\204p\346>\001\240/bDG\347>8xp\301c\211\350>8xp\301c\211\350>D\255\304\227\344\333\346>8xp\301c\211\350>\366j\333\213\303\364\350>T\344\020qs*\351>\021\327{;\323\225\351>\316\311\346\0053\001\352>-C\034\353\3426\352>pP\261 \203\313\351>\316\311\346\0053\001\352>\366j\333\213\303\364\350>\227\361\245\246\023\277\350>\227\361\245\246\023\277\350>\331\376:\334\263S\350>\001\240/bDG\347>\3463\217\2624\246\346>(A$\350\324:\346>O\342\030ne.\345>d8\001\372;\343\344>3vx\276U\215\344>v\203\r\364\365!\344>\361rC\031\313p\343>b7\205\3704\345\342>\310\320\322\2213\177\342>\233#\206x\177\027\341>\017\363\243\351\005\002\341><\252P\223\317\341\340>\276\257>\334\335\034\341>ml\331\316\2657\341>[!\315\324\373\370\341>b7\205\3704\345\342>^\"I\326\002\367\343>\311\307\356\002%\005\346>\311\307\356\002%\005\346>D\255\304\227\344\333\346>\035\014\320\021T\350\347>\331\376:\334\263S\350>\366j\333\213\303\364\350>\262]FV#`\351>\021\327{;\323\225\351>pP\261 \203\313\351>pP\261 \203\313\351>\021\327{;\323\225\351>pP\261 \203\313\351>\3525\207\265B\242\352>d\033]J\002y\353>\247(\362\177\242\r\353>\247(\362\177\242\r\353>\213\274Q\320\222l\352>_\031eG\364|\347>\276\222\232,\244\262\347>_\031eG\364|\347>\206\272Y\315\204p\346>O\342\030ne.\345>&@\250\346\315<\344>\350Q\257cu\016\342>\275\245\336K\310\244\342>\354f\353\205\247\374\340>L\327<\334H\270\344>D\255\304\227\344\333\346>{\205\005\367\003\036\350>\331\376:\334\263S\350>8xp\301c\211\350>\227\361\245\246\023\277\350>{\205\005\367\003\036\350>{\205\005\367\003\036\350>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\331\376:\334\263S\350>{\205\005\367\003\036\350>\035\014\320\021T\350\347>\276\222\232,\244\262\347>\276\222\232,\244\262\347>_\031eG\364|\347>\001\240/bDG\347>\242&\372|\224\021\347>D\255\304\227\344\333\346>\3463\217\2624\246\346>(A$\350\324:\346>(A$\350\324:\346>kN\271\035u\317\345>\r\325\2038\305\231\345>\255[NS\025d\345>\247E\226/\334w\344>\341;\367?<\"\341>{haG\312\263\336>g&9\334\036\357\333>\000\203\213\262\n\335\335>b\007\235)\327\210\336>+/\\\312\267F\335>\026\331s>\341\221\335>\237\376y;>1\335>\332\376:\334\263S\330>\276\222\232,\244\262\327>\273\207\276\232\207<\327>\023\353;\\\376\205\326>=\227\014t\253\357\325>\234\020BY[%\326>:o\2142U\017\334>\305\317V\220,\201\340>x\227\315\024!\022\341>[!\315\324\373\370\341>mby>\240\277\342>\377\250\023\361R\301\343>\373\223\327\316 \323\344>kN\271\035u\317\345>(A$\350\324:\346>\206\272Y\315\204p\346>\242&\372|\224\021\347>D\255\304\227\344\333\346>\366j\333\213\303\364\350>T\344\020qs*\351>-C\034\353\3426\352>\366j\333\213\303\364\350>\262]FV#`\351>T\344\020qs*\351>pP\261 \203\313\351>\247(\362\177\242\r\353>\303\224\222/\262\256\353>\337\0003\337\301O\354>\373l\323\216\321\360\354>\270_>Y1\\\355>\232\363\235\251!\273\354>\"\016\310\024b\344\353>\337\0003\337\301O\354>\303\224\222/\262\256\353>d\033]J\002y\353>\006\242\'eRC\353>\247(\362\177\242\r\353>-C\034\353\3426\352>\262]FV#`\351>\021\327{;\323\225\351>\213\274Q\320\222l\352>H\257\274\232\362\327\352>Y\346\010t\201&\355>\324\313\336\010A\375\355>tR\251#\221\307\355>tR\251#\221\307\355>\270_>Y1\\\355>\262]FV#`\351>\206\272Y\315\204p\346>3vx\276U\215\344>P\354x\376z\246\343>\021\364\037\353\014\000\343>_,\251f\030o\342>\212\342\331\016\333P\340>\211\250\221\257g|\335>\333%?\034\0036\340>\001\275\323\021~\261\340>\305\317V\220,\201\340>\322\373\306\327\236Y\342>O\342\030ne.\345>\242&\372|\224\021\347>\311\307\356\002%\005\346>)K\204x\352\262\344>-`\300\232\034\241\343>\326\006\243i\273\317\342>\031\0248\237[d\342>\202\270a\312vt\342>T\001\265 \255\224\342>0k\234,9\027\344>\331\376:\334\263S\350>\021\327{;\323\225\351>\316\311\346\0053\001\352>\366j\333\213\303\364\350>\276\222\232,\244\262\347>\021\327{;\323\225\351>H\257\274\232\362\327\352>\316\311\346\0053\001\352>pP\261 \203\313\351>\247(\362\177\242\r\353>=zh\304q\205\354>\303\224\222/\262\256\353>H\257\274\232\362\327\352>\303\224\222/\262\256\353>\021\327{;\323\225\351>\3525\207\265B\242\352>H\257\274\232\362\327\352>\3525\207\265B\242\352>\3525\207\265B\242\352>\262]FV#`\351>-C\034\353\3426\352>\3525\207\265B\242\352>pP\261 \203\313\351>pP\261 \203\313\351>T\344\020qs*\351>\316\311\346\0053\001\352>-C\034\353\3426\352>pP\261 \203\313\351>\227\361\245\246\023\277\350>\366j\333\213\303\364\350>_\031eG\364|\347>\213\274Q\320\222l\352>-C\034\353\3426\352>{\205\005\367\003\036\350>\021\327{;\323\225\351>\366j\333\213\303\364\350>\366j\333\213\303\364\350>8xp\301c\211\350>{\205\005\367\003\036\350>\331\376:\334\263S\350>\035\014\320\021T\350\347>\035\014\320\021T\350\347>8xp\301c\211\350>D\255\304\227\344\333\346>\276\222\232,\244\262\347>\276\222\232,\244\262\347>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\242&\372|\224\021\347>\242&\372|\224\021\347>\265{f\007d\310\344>O\342\030ne.\345>kN\271\035u\317\345>\311\307\356\002%\005\346>\r\325\2038\305\231\345>\r\325\2038\305\231\345>kN\271\035u\317\345>\255[NS\025d\345>\r\325\2038\305\231\345>\r\325\2038\305\231\345>\311\307\356\002%\005\346>kN\271\035u\317\345>kN\271\035u\317\345>(A$\350\324:\346>\206\272Y\315\204p\346>(A$\350\324:\346>\206\272Y\315\204p\346>D\255\304\227\344\333\346>D\255\304\227\344\333\346>\255[NS\025d\345>\330\007\037k\302\315\344>\206\272Y\315\204p\346>\255[NS\025d\345>\242&\372|\224\021\347>\206\272Y\315\204p\346>\035\014\320\021T\350\347>8xp\301c\211\350>\262]FV#`\351>\366j\333\213\303\364\350>\262]FV#`\351>\021\327{;\323\225\351>pP\261 \203\313\351>\262]FV#`\351>\366j\333\213\303\364\350>\366j\333\213\303\364\350>8xp\301c\211\350>\276\222\232,\244\262\347>\242&\372|\224\021\347>_\031eG\364|\347>\242&\372|\224\021\347>_\031eG\364|\347>8xp\301c\211\350>\366j\333\213\303\364\350>T\344\020qs*\351>\262]FV#`\351>\227\361\245\246\023\277\350>\227\361\245\246\023\277\350>{\205\005\367\003\036\350>\374\2357_6K\263>\372l\323\216\321\360\314>\364V\033k\230\004\314>s\300\367\374\005\302\313>\364V\033k\230\004\314>U\333,\342d\260\314>\342\013\017q\336\305\314>\022\316\227\254\304\033\315>\206\235\265\035K\006\315>\261I\2065\370o\314>=zh\304q\205\314>$\031\244\246~Z\314>\261I\2065\370o\314>\342\013\017q\336\305\314>\326\326\272\232]s\316>\237\376y;>1\315>\206\235\265\035K\006\315>=zh\304q\205\314>n<\361\377W\333\314>6d\260\2408\231\313>O\305t\276+\304\313>\364V\033k\230\004\314>\237\376y;>1\315>\245\0242_w\035\316>\3577\177\270P\236\316>\326\326\272\232]s\316>\320\300\002w$\207\315>=zh\304q\205\314>\206\235\265\035K\006\315>b\007\235)\327\210\316>&\020\300\027p\340\317>\376\261\367\177a;\320>r\201\025\361\347%\320>\212\342\331\016\333P\320>\354f\353\205\247\374\320> 4PS\252\310\321>\202\270a\312vt\322>\241/\336\013\243\213\323>I\314`J,B\324>I\314`J,B\324>L\327<\334H\270\324>a-%h\037m\324>y\216\351\205\022\230\324>\306\274\022q\010\217\325>\342(\263 \0300\326>\001\240/bDG\327>xz)e\347\247\327>B\231\004w\271\353\331>\261I\2065\370o\334>C\220 \350\252q\335>8[\314\021*\037\337>\301\200\322\016\207\276\336>\254*\352\202\260\t\337>\r\257\373\371|\265\337>u\214\361\202\004\234\340>cA\345\210J]\341>{\242\251\246=\210\341>\350Q\257cu\016\342>\266\205\306\227y@\343>\006\277\313\024\214\255\344>\255[NS\025d\345>\311\307\356\002%\005\346>\r\325\2038\305\231\345>\206\272Y\315\204p\346>\255[NS\025d\345>\263z\352\005]\312\342>qw\265`\322\255\341>\365M7\334\211\212\337>\314\265&\345\007\021\335>\274~\332\013y\302\332>W\357\354\002\220\240\331>.W\334\013\016\'\327>!+l\304\233N\325>\320\335\246&^\361\326>\374\2357_6K\323>E\301\204\270\017\314\323>\347GO\323_\226\323>\335\354r\276\226_\317>\311\252JS\353\232\314>\215\263mA\204\362\315>\r\257\373\371|\265\317>\351[\017\364\212\206\320>\001\275\323\021~\261\320>\r\257\373\371|\265\317>\362|\243\251\340\350\321>\351[\017\364\212\206\320>\223\311%e\275\336\316>&\020\300\027p\340\317>x\227\315\024!\022\321>~\255\2058Z\376\321>8\225\024q\235\363\321>\310\320\322\2213\177\322>\266\205\306\227y@\323>:\2140\342\216y\325>7\201TPr\003\325>\241/\336\013\243\213\323>pmU\320\2745\323>\3401\227\257&\252\322>\300\246ZM\317\242\324>\036 \2202\177\330\324>\244:\272\235\277\001\324>\322\361fG\211\341\323>\274\233~\273\262,\324>\361h\343\210\265\370\324>\203\257};h\372\325>\254d2\342#\336\321>\276\257>\334\335\034\301>\202\270a\312vt\262>\213\230\356\202|a\246>\000;\305\027\336\306\245>@~\205\270\261Z\242>\265\271\314\021{f\236>\001\3416_\224\274\224>\350\342\322\\\036Wy>\266\306\315\224\311\265\220\276#\321\335\013RD\224\276+i\244)+\033\220\276<\240\360\002\272i\322>N\353\374\374s\250\321>\262@\242\246\351\365\317>\206\235\265\035K\006\315>\350!\307\224\027\262\315>\000\203\213\262\n\335\315>{haG\312\263\316>i\035UM\020u\317>\\+-e\021q\320>D\312hG\036F\320>+i\244)+\033\320>\245\0242_w\035\316>\r\257\373\371|\265\317>\r\257\373\371|\265\317>\351[\017\364\212\206\320>8[\314\021*\037\317>\3577\177\270P\236\316>i\035UM\020u\317>J\246\330\013\344]\316>\261I\2065\370o\314>\370u\267\035\340j\311>xz)e\347\247\307>iW\235\254\203I\302>\276\257>\334\335\034\301>\024\377\373|)v\303>\320\372J\326\227[\300>\234\020BY[%\266>\357q\307\027\304r\261>\215\355\265\240\367\306\260>\316x<\334\367p\245>\351@~\t\2506`>s\346\177;N\246\241\276\024\377\373|)v\263\276\\+-e\021q\300\276\247E\226/\334w\304\276qdqA\256\273\306\2760N\370|\377\254\312\276=zh\304q\205\314\276\201~\031k\003\240\317\276\354f\353\205\247\374\320\276\227\016JVM)\322\276\007\323\2135\267\235\321\276\022\316\227\254\304\033\315\276\017\340_\312\341\017\306\276\031\344O\320\375\007\276\276\001\275\323\021~\261\300\276\031\036\230/q\334\300\276\031\344O\320\375\007\276\276\205\246\231\254Y\200\271\276\031\344O\320\375\007\276\276\347*\253#&,\272\276E\301\204\270\017\314\263\276g\002\326\216\010\344\227\276Y\337I\326\244\205\222>fS\200\270Ct\234>\204\367C\326\224\020\236>\333\365VM\245\331\253>!+l\304\233N\265>\347*\253#&,\272>\335\354r\276\226_\277>\220\333\355\202\332\322\267>\341r\236\254v\037\260>\344<sAC \263>H\257\274\232\362\327\272>pmU\320\2745\303>\254d2\342#\336\301>\224\003n\3040\263\301>{\242\251\246=\210\301> 4PS\252\310\301>\031\036\230/q\334\300>\351[\017\364\212\206\300>\237\376y;>1\275>\2523\316\021\277\203\273>\205\246\231\254Y\200\271>#\"\2105\215\324\270>\234\020BY[%\266>\024\377\373|)v\263>:\2140\342\216y\265>\232\031&\350i\237\262>\232\031&\350i\237\262>\276\257>\334\335\034\261> 4PS\252\310\261>\330\007\037k\302\315\264>\3453\217\2624\246\266>\235\007^\312L\253\271>\235\007^\312L\253\271>\254*\352\202\260\t\277>\254*\352\202\260\t\277>\223\311%e\275\336\276>{\242\251\246=\210\301>{\242\251\246=\210\301>\215\355\265\240\367\306\300>\254*\352\202\260\t\277>\2523\316\021\277\203\273>G\270\240)\001R\267>\200\207\375\371\021\032\314>\342\013\017q\336\305\314>\014\270\337\210\213/\314>6d\260\2408\231\313>\311\252JS\353\232\314>yqE\326\330-\313>\315\322\312\224A{\306>\303\224\222/\262\256\273>\247E\226/\334w\264>\021\263\030\356\274\212\245>\362_\377\371\246~\250\276\365M7\334\211\212\277\276pmU\320\2745\303\276\332\376:\334\263S\310\276\215\263mA\204\362\315\276\271\220\242)\226\266\323\276\235\007^\312L\253\331\2765m\224/G\023\330\276E\301\204\270\017\314\323\276\335&\273\035\n4\322\276\000\203\213\262\n\335\315\276 4PS\252\310\301\276D\312hG\036F\300\276\235\007^\312L\253\271\276\037\205\372|\345X\226\276\t\312\247\246\250#\225\276PG\203\270\313\256\206\276:;\206\270S\351\240>9\335\332\013\312\t\252>\217\344\321\021\351L\264>\306\230\257#\362\203\241>\017\274\374|\313\004\242>\264q\006wNP\266>\313\333\256#P\365\302>\367~\233\254\356\344\305>\264q\006wNP\306>)8@Y\306\300\311>\274~\332\013y\302\312>\303\224\222/\262\256\313>g&9\334\036\357\313>1E\024\356\3602\316>\372l\323\216\321\360\314>0N\370|\377\254\312>B\231\004w\271\353\311>\316\311\346\0053\001\312>\377\213oA\031W\312>\027\3553_\014\202\312>a\020\201\270\345\002\313>H\257\274\232\362\327\312>\355@cG_\030\313>H\257\274\232\362\327\312>H\257\274\232\362\327\312>\244\035\026\356\205\227\312>\244\035\026\356\205\227\312>yqE\326\330-\313>\021\327{;\323\225\311>T\344\020qs*\311>\301\235v\276\300(\310>M\316XM:>\310>\266h\"\350?\326\311>L\327<\334H\270\304\276\326\262WMGh\252\276+\013\371|\241;\211>\327\251s\2768\356\215>\353%\344\210W\207\223>\221\212CY\237B\223>~l~;\n\211\224>\204\367C\326\224\020\236>b\007\235)\327\210\236>P\230-\342\006?\213>^j\017q/\r\214>\253\221y\276Hc\202>>\005R\267\262\212w\276:;\206\270S\351\220\2767\357\242)\347\375\222\276\275\000\351\005\031\255\225\276\353\3078\334\315\247\234\276\'\277\025\3564P\253\276 4PS\252\310\261\2761E\024\356\3602\256\276\3453\217\2624\246\266\2761E\024\356\3602\276\276\031\344O\320\375\007\276\276\237\376y;>1\275\276=zh\304q\205\274\276H\257\274\232\362\327\272\276kN\271\035u\317\265\276\246Nz\276\352\361\260\276\232\031&\350i\237\262\276\246Nz\276\352\361\260\276\352.\310\027f\001\260\276\337A:\334\021\305\251\276\263z\352\005]\312\242\276\205\246\231\254Y\200\231\276\306tC@n\031q>\337A:\334\021\305\231>\246\226@Y\027\010\251>\321oXM\351\366\250>\217\344\321\021\351L\244>-\250\2065I\267\253>\365\242\020&\340\256b>\375\224S\320\'\321\226\276H\257\274\232\362\327\232>!+l\304\233N\245>\364\264\306\027\"\344\242>\236e\tw\326\212\260>yqE\326\330-\273>\327\020\003\372\320G\301>\016\351CY\360\211\302>Q\366\330\216\220\036\302>\304\213\256\240\2434\277>\222\322\t\364\313X\273>\332\376:\334\263S\270>\3453\217\2624\246\266>R\355\364\377\201\244\265>kN\271\035u\317\265>-`\300\232\034\241\263>\357q\307\027\304r\261>\300\246ZM\317\242\264>\220\333\355\202\332\322\267>#\"\2105\215\324\270>R\355\364\377\201\244\265>\202\270a\312vt\262>V\212\202\270) \250>\024\377\373|)v\243>\247i\002\023`\342t>#\"\2105\215\324\210\276\367Z8_\330\331\221\276\337\222\344\005MU\216\276\376C\251\246\354@\202\276\263z\352\005]\312r\276\366\253\342\210\023j\206>\320\036\256#\256f\224>\253\221y\276Hc\242>`\310\272\035\271\354\222>\013p\031\356^\031\244\276.W\334\013\016\'\267\276{\242\251\246=\210\301\276\300\246ZM\317\242\304\276\034\014\320\021T\350\307\276a\020\201\270\345\002\313\276Z\372\310\224\254\026\312\276)8@Y\306\300\311\276)8@Y\306\300\311\276Y\003\255#\273\220\306\276\276\257>\334\335\034\261\276\010H\220\026\233\331m>\371\000\252\246\216\317\240>\375\224S\320\'\321\246>\327X\311\224\375]\251>a\020\201\270\345\002\253>\373?\214\262\254k\254>\266h\"\350?\326\251>\037\326\244\246 \351\252>a\020\201\270\345\002\253>\352v\216\262\222\027\250>\023Y\2125s\200\244>\007\323\2135\267\235\241>q\210\324\216\304\306\232>\330\007\037k\302\315\204>n<\361\377W\333\214>\234\277\227/ \225\241>g\261+e\315S\243>\275Q\223/T=\232>z \233\254\235\235\226>\225\035\320\344\305\225C\276>\330\023q\373d\223\276{\242\251\246=\210\321>\007\323\2135\267\235\321>r\201\025\361\347%\320>\037\372\007\3646\364\316>\350!\307\224\027\262\315>\200\207\375\371\021\032\314>6d\260\2408\231\313>yqE\326\330-\313>\213\274Q\320\222l\312>\347*\253#&,\312>B\231\004w\271\353\311>\316\311\346\0053\001\312>\340\024\363\377\354?\311>\026\366\027\356\032\374\306>kN\271\035u\317\305>d8\001\372;\343\304>\300\246ZM\317\242\304>\217\344\321\021\351L\304>\241/\336\013\243\213\303>-`\300\232\034\241\303>E\301\204\270\017\314\303>v\203\r\364\365!\304>L\327<\334H\270\304>\247E\226/\334w\304>\002\264\357\202o7\304>3vx\276U\215\304>\024\377\373|)v\303>Q\366\330\216\220\036\302>J\340 kW2\301>cA\345\210J]\301>&J\010w\343\264\302>\t\312\247\246\250#\305>!+l\304\233N\305>R\355\364\377\201\244\305>\017\340_\312\341\017\306>\367~\233\254\356\344\305>\375\224S\320\'\321\306>\273\207\276\232\207<\307>\017\340_\312\341\017\306>\017\340_\312\341\017\306>\024\377\373|)v\303>$\031\244\246~Z\274>a\020\201\270\345\002\273>H\257\274\232\362\327\272>\335\354r\276\226_\277>\271\220\242)\226\266\303>\337\035\327\216\373\271\305>\264q\006wNP\306>)8@Y\306\300\311>Z\372\310\224\254\026\312>\004\253\013\364`\275\307>\220\333\355\202\332\322\307>\205\246\231\254Y\200\311>T\344\020qs*\311>\027\3553_\014\202\312>O\305t\276+\304\313>\342\013\017q\336\305\314>b\007\235)\327\210\316>i\035UM\020u\317>P\274\220/\035J\317>\031\344O\320\375\007\316>\007\231C\326C\311\316>\365M7\334\211\212\317>\007\231C\326C\311\316>b\007\235)\327\210\316>\335\354r\276\226_\317>\254*\352\202\260\t\317>\031\344O\320\375\007\316>\031\344O\320\375\007\316>\007\231C\326C\311\316>1E\024\356\3602\316>\350!\307\224\027\262\315>\206\235\265\035K\006\315>\\\361\344\005\236\234\315>\200\207\375\371\021\032\314>0N\370|\377\254\312>\242&\372|\224\021\307>-`\300\232\034\241\303>\305\305\366\377\026\t\302>&\020\300\027p\340\277>1E\024\356\3602\276>\335\354r\276\226_\277>\276\257>\334\335\034\301>u\214\361\202\004\234\300>\276\257>\334\335\034\301>\246Nz\276\352\361\300>iW\235\254\203I\302>\254d2\342#\336\301>\202\270a\312vt\302>\247E\226/\334w\304>\002\264\357\202o7\304>\271\220\242)\226\266\303>^\"I\326\002\367\303>^\"I\326\002\367\303>E\301\204\270\017\314\303>v\203\r\364\365!\304>\217\344\321\021\351L\304>L\327<\334H\270\304>\225\372\2115\"9\305>:\2140\342\216y\305>\306\274\022q\010\217\305>\361h\343\210\265\370\304>\337\035\327\216\373\271\305>kN\271\035u\317\305>\367~\233\254\356\344\305>\367~\233\254\356\344\305>!+l\304\233N\305>\234\020BY[%\306>\367~\233\254\356\344\305>\234\020BY[%\306>(A$\350\324:\306>\315\322\312\224A{\306>\017\340_\312\341\017\306>(A$\350\324:\306>\234\020BY[%\306>\203\257};h\372\305>(A$\350\324:\306>\256[NS\025d\305>\256[NS\025d\305>\t\312\247\246\250#\305>!+l\304\233N\305>!+l\304\233N\305>:\2140\342\216y\305>R\355\364\377\201\244\305>.W\334\013\016\'\307>\247E\226/\334w\304>\305\305\366\377\026\t\302>U\333,\342d\260\274>J\246\330\013\344]\276>\000\203\213\262\n\335\275>\2523\316\021\277\203\273>T\344\020qs*\271>T\344\020qs*\271>\361h\343\210\265\370\264>\340\237\345\210\233\244\260>\256\320[\312f\377\255>\3408VM\003K\255>\242J]\312\252\034\253>E\301\204\270\017\314\263>\266h\"\350?\326\271>\305\305\366\377\026\t\302>\203\257};h\372\305>\017\340_\312\341\017\306>\361h\343\210\265\370\304>\3453\217\2624\246\306>\205\246\231\254Y\200\311>\274~\332\013y\302\312>\200\207\375\371\021\032\314>\320\300\002w$\207\315>\325\337\236)l\355\312>$\031\244\246~Z\314>\347*\253#&,\312>)8@Y\306\300\311>\347*\253#&,\312>\235\007^\312L\253\311>\377\213oA\031W\312>\370u\267\035\340j\311>~\220\341\210 \224\310>\323\350\202\270zg\307>\264q\006wNP\306>\203\257};h\372\305>\306\274\022q\010\217\305>!+l\304\233N\305>\306\274\022q\010\217\305>\024\377\373|)v\303>\322\361fG\211\341\303>\374\2357_6K\303>\366\207\177;\375^\302>\215\355\265\240\367\306\300>J\340 kW2\301> 4PS\252\310\301>\320\372J\326\227[\300>{haG\312\263\276>\237\376y;>1\275>\\+-e\021q\300>\223\311%e\275\336\276>\030\n\330\016F\354\363>\204\271\335\313}r\364>\324\374B\331\245W\364>\324\374B\331\245W\364>hM=\034n\321\363>\204\271\335\313}r\364>A\254H\226\335\335\364>\324\374B\331\245W\364>\324\374B\331\245W\364>\240%~{\215\023\365>\3422\023\261-\250\364>O\342\030ne.\365>O\342\030ne.\365>4vx\276U\215\364>O\342\030ne.\365>\204\271\335\313}r\364>\3422\023\261-\250\364>\361h\343\210\265\370\364>]\030\351E\355~\365>\273\221\036+\235\264\365>\273\221\036+\235\264\365>4vx\276U\215\364>\030\n\330\016F\354\363>v\203\r\364\365!\364>\204\271\335\313}r\364>\030\n\330\016F\354\363>\307\306r\001\036\007\364>hM=\034n\321\363>&@\250\346\315<\364>\324\374B\331\245W\364>&@\250\346\315<\364>\030\n\330\016F\354\363>[\027mD\346\200\363>v\203\r\364\365!\364>\253Z\322Q\016f\363>\253Z\322Q\016f\363>\271\220\242)\226\266\363>1u\374\274N\217\362>\030\n\330\016F\354\363>hM=\034n\321\363>v\203\r\364\365!\364>\030\n\330\016F\354\363>[\027mD\346\200\363>M\341\234l^0\363>\374\2357_6K\363>\235$\002z\206\025\363>?\253\314\224\326\337\362>\217\3561\242\376\304\362>1u\374\274N\217\362>\217\3561\242\376\304\362>\357gg\207\256\372\362>?\253\314\224\326\337\362>\357gg\207\256\372\362>\235$\002z\206\025\363>\235$\002z\206\025\363>?\253\314\224\326\337\362>?\253\314\224\326\337\362>?\253\314\224\326\337\362>\202\270a\312vt\362>\235$\002z\206\025\363>/t\200\273G\221\360>#?,\345\306>\362>\266\217&(\217\270\361>t\202\221\362\356#\362>\010\323\2135\267\235\361>\354f\353\205\247\374\360>\304\305\366\377\026\t\362>\304\305\366\377\026\t\362>\354f\353\205\247\374\360>\026\t\\\r?\356\361>fL\301\032g\323\361>?\253\314\224\326\337\362>\235$\002z\206\025\363>\217\3561\242\376\304\362>1u\374\274N\217\362>\251YVP\007h\361>\177\267\345\310ov\360>q\201\025\361\347%\360>&\020\300\027p\340\357>\3360\033\256\037\254\360>J\340 kW2\361>\255*\352\202\260\t\357>q\201\025\361\347%\360>\3360\033\256\037\254\360>tR\251#\221\307\355>M\261\264\235\000\324\356>\255*\352\202\260\t\357>\215\355\265\240\367\306\360>\304\305\366\377\026\t\362>\304\305\366\377\026\t\362>fL\301\032g\323\361>\304\305\366\377\026\t\362>\026\t\\\r?\356\361>\010\323\2135\267\235\361>\304\305\366\377\026\t\362>\266\217&(\217\270\361>\026\t\\\r?\356\361>\266\217&(\217\270\361>1u\374\274N\217\362>\322\373\306\327\236Y\362>\3411\227\257&\252\362>\233#\206x\177\027\361>#?,\345\306>\362>t\202\221\362\356#\362>fL\301\032g\323\361>\251YVP\007h\361>\233#\206x\177\027\361>X\026\361B\337\202\361>\266\217&(\217\270\361>J\340 kW2\361>/t\200\273G\221\360>\354f\353\205\247\374\360>\233#\206x\177\027\361>\354f\353\205\247\374\360>\354f\353\205\247\374\360>/t\200\273G\221\360>=\252P\223\317\341\360>\233#\206x\177\027\361>\233#\206x\177\027\361>\372\234\273]/M\361>\372\234\273]/M\361>J\340 kW2\361>fL\301\032g\323\361>\304\305\366\377\026\t\362>\354f\353\205\247\374\360>J\340 kW2\361>\026\t\\\r?\356\361>#?,\345\306>\362>#?,\345\306>\362>\322\373\306\327\236Y\362>#?,\345\306>\362>\304\305\366\377\026\t\362>\266\217&(\217\270\361>X\026\361B\337\202\361>\010\323\2135\267\235\361>fL\301\032g\323\361>\266\217&(\217\270\361>\266\217&(\217\270\361>#?,\345\306>\362>\266\217&(\217\270\361>fL\301\032g\323\361>\266\217&(\217\270\361>\026\t\\\r?\356\361>\354f\353\205\247\374\360>\354f\353\205\247\374\360>=\252P\223\317\341\360>\215\355\265\240\367\306\360>q\201\025\361\347%\360>H\257\274\232\362\327\352>\3525\207\265B\242\352>\247(\362\177\242\r\353>d\033]J\002y\353>\337\0003\337\301O\354>\255*\352\202\260\t\357>h\035UM\020u\357>M\261\264\235\000\324\356>M\261\264\235\000\324\356>\n\244\037h`?\357>h\035UM\020u\357>\n\244\037h`?\357>\354f\353\205\247\374\360>X\026\361B\337\202\361>\251YVP\007h\361>\320\372J\326\227[\360>!>\260\343\277@\360>\n\244\037h`?\357>\324\313\336\010A\375\355>\025\331s>\341\221\355>2E\024\356\3602\356>M\261\264\235\000\324\356>=zh\304q\205\354>\354f\353\205\247\374\360>X\026\361B\337\202\361>\304\305\366\377\026\t\362>?\253\314\224\326\337\362>\253Z\322Q\016f\363>\307\306r\001\036\007\364>v\203\r\364\365!\364>\235$\002z\206\025\363>\307\306r\001\036\007\364>\271\220\242)\226\266\363>v\203\r\364\365!\364>\204\271\335\313}r\364>&@\250\346\315<\364>4vx\276U\215\364>4vx\276U\215\364>\3422\023\261-\250\364>4vx\276U\215\364>\361h\343\210\265\370\364>v\203\r\364\365!\364>\324\374B\331\245W\364>&@\250\346\315<\364>\n\324\0077\276\233\363>M\341\234l^0\363>\3411\227\257&\252\362>\026\t\\\r?\356\361>\266\217&(\217\270\361>\372\234\273]/M\361>\233#\206x\177\027\361>\354f\353\205\247\374\360>/t\200\273G\221\360>\324\313\336\010A\375\355>\324\313\336\010A\375\355>{\205\005\367\003\036\350>-C\034\353\3426\352>\316\311\346\0053\001\352>\262]FV#`\351>\366j\333\213\303\364\350>\331\376:\334\263S\350>\366j\333\213\303\364\350>T\344\020qs*\351>{\205\005\367\003\036\350>\276\222\232,\244\262\347>kN\271\035u\317\345>\r\325\2038\305\231\345>\315\334*%W\363\344>\325\374B\331\245W\344>)K\204x\352\262\344>a-%h\037m\344>\244:\272\235\277\001\344>&@\250\346\315<\344>a-%h\037m\344>^\"I\326\002\367\343>^\"I\326\002\367\343>0k\234,9\027\344>8xp\301c\211\350>\"\016\310\024b\344\353>\3567\177\270P\236\356>\177\267\345\310ov\360>=\252P\223\317\341\360>\233#\206x\177\027\361>X\026\361B\337\202\361>\026\t\\\r?\356\361>\202\270a\312vt\362>\217\3561\242\376\304\362>\217\3561\242\376\304\362>\217\3561\242\376\304\362>\303\224\222/\262\256\353>\357gg\207\256\372\362>#?,\345\306>\362>M\341\234l^0\363>1u\374\274N\217\362>t\202\221\362\356#\362>1u\374\274N\217\362>\202\270a\312vt\362>\202\270a\312vt\362>\026\t\\\r?\356\361>t\202\221\362\356#\362>t\202\221\362\356#\362>t\202\221\362\356#\362>\010\323\2135\267\235\361>\010\323\2135\267\235\361>\251YVP\007h\361>fL\301\032g\323\361>\026\t\\\r?\356\361>\304\305\366\377\026\t\362>#?,\345\306>\362>fL\301\032g\323\361>\266\217&(\217\270\361>\251YVP\007h\361>\177\267\345\310ov\360>\177\267\345\310ov\360>\302\304z\376\017\013\360>q\201\025\361\347%\360>\320\372J\326\227[\360>&\020\300\027p\340\357>!>\260\343\277@\360>!>\260\343\277@\360>\177\267\345\310ov\360>/t\200\273G\221\360>\177\267\345\310ov\360>\320\372J\326\227[\360>\320\372J\326\227[\360>q\201\025\361\347%\360>\320\372J\326\227[\360>\177\267\345\310ov\360>/t\200\273G\221\360>\3360\033\256\037\254\360>\3360\033\256\037\254\360>/t\200\273G\221\360>/t\200\273G\221\360>\3360\033\256\037\254\360>/t\200\273G\221\360>\215\355\265\240\367\306\360>\3360\033\256\037\254\360>\215\355\265\240\367\306\360>=\252P\223\317\341\360>=\252P\223\317\341\360>\215\355\265\240\367\306\360>\3360\033\256\037\254\360>=\252P\223\317\341\360>=\252P\223\317\341\360>=\252P\223\317\341\360>\215\355\265\240\367\306\360>\215\355\265\240\367\306\360>\3360\033\256\037\254\360>\215\355\265\240\367\306\360>\320\372J\326\227[\360>/t\200\273G\221\360>\177\267\345\310ov\360>\302\304z\376\017\013\360>&\020\300\027p\340\357>\232\363\235\251!\273\354>O\342\030ne.\345>\247(\362\177\242\r\353>\215\355\265\240\367\306\360>\345P3bn\020\340>\300\246ZM\317\242\324>\031\001\364\1777r\327>\245\0242_w\035\316>\\\361\344\005\236\234\315>+i\244)+\033\320>\007\323\2135\267\235\321>\357q\307\027\304r\321>\257o\016t@T\322>?\253\314\224\326\337\322>}\231\305\027/\016\325>\256[NS\025d\325>@\242\350\005\310e\326>\017\340_\312\341\017\326>\323\350\202\270zg\327>\023\353;\\\376\205\326>\323\350\202\270zg\327>\332\376:\334\263S\330>\335\t\027n\320\311\330>\244\035\026\356\205\227\332>)8@Y\306\300\331>yqE\326\330-\333>\306\237n\301\316$\334>\264Tb\307\024\346\334>\302\304z\376\017\013\340>T\307l\3019\300\337>\307\226\2122\300\252\337>l(1\337,\353\337>{haG\312\263\336>\301\200\322\016\207\276\336>_\374\300\227\272\022\336>\326\326\272\232]s\336>\260yn\004V\314\340>Q\366\330\216\220\036\342>8\213\264\340\207{\343>\300\246ZM\317\242\344>kN\271\035u\317\345>\001\240/bDG\347>_\031eG\364|\347>\331\376:\334\263S\350>\021\327{;\323\225\351>pP\261 \203\313\351>\366j\333\213\303\364\350>\331\376:\334\263S\350>\276\222\232,\244\262\347>D\255\304\227\344\333\346>(A$\350\324:\346>kN\271\035u\317\345>\255[NS\025d\345>d8\001\372;\343\344>u\214\361\202\004\234\340>\255n\222r9V\340>\177\267\345\310ov\340>!>\260\343\277@\340>\331\341\226,z\351\336>\304\213\256\240\2434\337>\2575\306\024\315\177\337>+/\\\312\267F\335>\t\255\003\367n\271\333>\245\0242_w\035\336>!>\260\343\277@\340>~\255\2058Z\376\341>I\314`J,B\344>\r\325\2038\305\231\345>\255[NS\025d\345>oc\365?\247\275\344>\263z\352\005]\312\342>\253Z\322Q\016f\343>_,\251f\030o\342>\301\272\032n\372\222\341>~s=\331\346)\337>\314\265&\345\007\021\335>\326\363^J\227\335\327>%6HV\270\304\325>=\227\014t\253\357\325>Y\003\255#\273\220\326>\321\324\302\227Ow\332>D\255\304\227\344\333\346>{\205\005\367\003\036\350>\356gg\207\256\372\342>I\326\300\332A\272\342>pmU\320\2745\343>\r\325\2038\305\231\345>{\205\005\367\003\036\350>\276\222\232,\244\262\347>\206\272Y\315\204p\346>\r\325\2038\305\231\345>\257e\256\343*\334\343>{\242\251\246=\210\341>~\255\2058Z\376\341>[!\315\324\373\370\341>iW\235\254\203I\342>5\2128\337\200}\341>!>\260\343\277@\340>\r\325\2038\305\231\345>(A$\350\324:\346>(A$\350\324:\346>\242&\372|\224\021\347>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\035\014\320\021T\350\347>\331\376:\334\263S\350>\035\014\320\021T\350\347>{\205\005\367\003\036\350>\035\014\320\021T\350\347>\331\376:\334\263S\350>8xp\301c\211\350>\366j\333\213\303\364\350>\262]FV#`\351>pP\261 \203\313\351>\021\327{;\323\225\351>\021\327{;\323\225\351>\021\327{;\323\225\351>\316\311\346\0053\001\352>\316\311\346\0053\001\352>y\204\211\365\374\037\366>\r\325\2038\305\231\365>\361h\343\210\265\370\364>v\203\r\364\365!\364>\271\220\242)\226\266\363>\217\3561\242\376\304\362>\217\3561\242\376\304\362>\322\373\306\327\236Y\362>t\202\221\362\356#\362>\266\217&(\217\270\361>\026\t\\\r?\356\361>\304\305\366\377\026\t\362>\217\3561\242\376\304\362>\374\2357_6K\363>\253Z\322Q\016f\363>M\341\234l^0\363>\235$\002z\206\025\363>\357gg\207\256\372\362>M\341\234l^0\363>\374\2357_6K\363>\235$\002z\206\025\363>\010\323\2135\267\235\361>1u\374\274N\217\362>\322\373\306\327\236Y\362>#?,\345\306>\362>\026\t\\\r?\356\361>1u\374\274N\217\362>\266\217&(\217\270\361>\322\373\306\327\236Y\362>\322\373\306\327\236Y\362>1u\374\274N\217\362>\217\3561\242\376\304\362>\235$\002z\206\025\363>[\027mD\346\200\363>[\027mD\346\200\363>\n\324\0077\276\233\363>hM=\034n\321\363>hM=\034n\321\363>\030\n\330\016F\354\363>\030\n\330\016F\354\363>\030\n\330\016F\354\363>\374\2357_6K\363>\235$\002z\206\025\363>\3411\227\257&\252\362>\217\3561\242\376\304\362>fL\301\032g\323\361>\304\305\366\377\026\t\362>\026\t\\\r?\356\361>\304\305\366\377\026\t\362>\304\305\366\377\026\t\362>\202\270a\312vt\362>\202\270a\312vt\362>?\253\314\224\326\337\362>\235$\002z\206\025\363>\253Z\322Q\016f\363>\374\2357_6K\363>\374\2357_6K\363>\253Z\322Q\016f\363>\n\324\0077\276\233\363>\n\324\0077\276\233\363>hM=\034n\321\363>\271\220\242)\226\266\363>[\027mD\346\200\363>M\341\234l^0\363>\357gg\207\256\372\362>M\341\234l^0\363>[\027mD\346\200\363>\374\2357_6K\363>\235$\002z\206\025\363>\217\3561\242\376\304\362>{haG\312\263\276>\327\361\004g\225>\031??\223X\255\247\261\030?+B\240\351\3338\030?4j\276J>v\027?o\\k\224\232\342\026?\177\237q\341@H\026?6w\364\277\\\213\026?\262i\000\312:w\026?\327\375\276\332\254U\026?o\\k\224\232\342\026?f4M38\245\027?\035\014\320\021T\350\027?O\326^\372M\027\030?\260\\\312T\034b\027?\213\310\013D\252\203\027?\325\360\210e\216@\027?\307\272\270\215\006\360\026?\3463\217\2624\246\026?\013\310M\303\246\204\026?\224\360)\245\014\301\026?\336\030\247\306\360}\026?qi\241\t\271\367\025?*NZ]\363O\025?\265v6?Y\214\025?\220\342w.\347\255\025?\230\n\226\217I\353\024?-[\220\322\021e\024?K\324f\367?\033\024?C\271~\013\374\362\023?\206\306\023A\234\207\023?\014\341=\254\334\260\022?jZs\221\214\346\022?\014\341=\254\334\260\022?\376\252m\324T`\022?V\t\273\315\300m\022?\314\340\336\353Z1\022?\221\373g\027\035\332\021?_1\331.#\253\021?}\252\257SQa\021?%LbZ\345S\021?\016\356s!\373\305\021?\221\373g\027\035\332\021?\322\373\306\327\236Y\022?\032\027\016\204d\001\023?\214\341\373,\340\257\023?\316\341Z\355a/\024?K\324f\367?\033\024?F\306\264\200\032\010\023?\302\270\300\212\370\363\022?\345?I&L\275\023?\345?I&L\275\023?\257h\204\3103y\024?\361h\343\210\265\370\024??\237\022!\277\310\025?[\013\263\320\316i\026?0\\\014\324\030c\026?\271\204\350\265~\237\026?\224\360)\245\014\301\026?\234\013\022\221P\351\026?\325\360\210e\216@\027?\315\325\240yJ\030\027?\224\360)\245\014\301\026?\3463\217\2624\246\026?y\204\211\365\374\037\026?$3rq\257\'\025?8\204*5{\240\025?d3\32111\247\025?\247@fg\321;\025?\267\203l\264w\241\024?R\357N\343\203C\024?\257h\204\3103y\024?{\221\277j\0335\025?\005\272\233L\201q\025?\247@fg\321;\025?\332\n\365O\313j\025?\361h\343\210\265\370\024?\334\027+\305\351\177\024?\233\027\314\004h\000\024?a2U0*\251\023?=\236\226\037\270\312\023?T\374\204X\242X\023?\336$a:\010\225\023?\300\253\212\025\332\336\023?\214\341\373,\340\257\023?\374\2357_6K\023?\024\374%\230 \331\022?\217\3561\242\376\304\022?\202\270a\312vt\022?\376\252m\324T`\022?\231\026P\003a\002\022?\314\340\336\353Z1\022?B\270\002\n\365\364\021?\034$D\371\202\026\022?\331\026\257\303\342\201\022?\331\026\257\303\342\201\022?\221\373g\027\035\332\021?\363\201\323q\353$\021?\215\355\265\240\367\306\020?T\010?\314\271o\020?T\010?\314\271o\020?\356s!\373\305\021\020?\367Rg\244\224\306\016?\003\2117|\034\027\017?\255*\352\202\260\t\017?\271`\272Z8Z\017?\2350\274\355\235,\020?v\217\307g\r9\021?\231\026P\003a\002\022?V\t\273\315\300m\022??\253\314\224\326\337\022?\245?\352e\312=\023?\300\253\212\025\332\336\023?K\324f\367?\033\024?-[\220\322\021e\024?\334\027+\305\351\177\024?_%\037\273\013\224\024?\267\203l\264w\241\024?\026\375\241\231\'\327\024?\026\375\241\231\'\327\024?\026\375\241\231\'\327\024?*NZ]\363O\025?\005\272\233L\201q\025?]\030\351E\355~\025?\361h\343\210\265\370\024?\212\324\305\267\301\232\024?\203\255#Xf[\027?\201\240\355\342GF\030?\272x.Bg\210\031?g\201C\226o\367\036?\246\006\266$\351\225 ?\371X,\013G\014\"?\235H\344F\207C#?\362h1\030&\312#?\372-\300\2229\003$?H\375*\375\332\263$?HE\357\226\334\017%?\206\245\271\3113%%?\013\366\217 \275*%?\275@\365\201w\001%?+\024+\233 \207$?O\3677\361\240\234\"?\277\000\266\024t\241 ?\027\2252{i\"\035?1\201\353\"6l\034?\356\330\361\'v\251\033?}\206\201\370\n\034\032?\355v]\302\030\306\032?\377\200b\277\202\217\034?\\\324\re\277&\037?\\  \343z\251\"?\023\300Nc\333\237$?\014\227\321\237h\344$?Q\253\277\220\233\002%?\037\t\226K,\356$?7\003\226;\267\371$?\030\345HP\304n$?o\2217\235\275c#?_G&$\365E\"?7\273P!\240\300 ?x&\336Hs@\037?\3071 \350Y*\036?>w,\375\036\321!?wFV\334\212\215!?G\001\024\266\256\267\036?<\326\037pC\335\036?\177+y?\345\315\036?\346\221\242B3W\037?\016&\310\177\266\022 ?\377\317J\"G\257 ?p\223\337\0170\324 ?x\315\307\217\332\277 ?\005\262b\256\310\214 ?\334u\tc\030k ?\371)\274;\2329 ?#F\266\220\323\031 ?\336Am\315\266\320\036?\177\223\352^\316<\036?\316\317\366\260c\230\035?x\345\243Z~\277\034?\036\347\301\323\347G\034?\010+\302\013*\303\033?\224+\207\331u\266\032?-C\034\353\3426\032?\2515(\365\300\"\032?\227\361\245\246\023\277\030?\306\013c\267A\200\033?\317[\230,\276\006\034?\031Q\361\267\361\262\034?\177\312\221\313\010:\035?\247\237&\351P<\035?\240\2338\344_\376\034?\225\213\301[\321\372\034?\232\007\302\253k\010\034?\324\332naa\261\033?\264\301\003\257\010\221\033?k\005{\203\227/\033?\020\266!\304j3\033?1\324\274>\316\217\032?`\021.\252fR\032?vk\231\014\307\363\031?\215\311\207E\261\201\031?xx\317\201\345\010\031?\356O\363\237\177\314\030?]\014/\322\325g\030?\362i_\212\274\366\026?vwS\200\336\n\027?\037\031\006\207r\375\026?\017\326\3779\314\227\027?\222\343\363/\356\253\027?\264j|\313Au\030?\3474\013\264;\244\030?\233\377W\0359\322\031?\0042\260\230U\373\033?\217\212\251;\351Y\035?2a>\235NY\035?\004\340\213n>\'\035?\257@\323\226cG\035?ZU\323N\375\036\035?\266\365\243F\300\237\034?\230f\200,\300N\034?\324\276D\262\003\213\034?\326H\214J\\Z\034?)\301>\341\274\235\034?\316\210\337\010\343\213\034?\206\t\252\023\276a\034?\376\311\323J\005;\034?\322\032-NO4\034?\340$c;3O\033?\216.\362\217\027\002\033?\0308\316\335\026{\033?qi\324\372]\003\033?\013\006\201\334\030\027\033?!Eo\201\234\341\032?\0369\346\375\376\033\033?\315\333\260${\257\032?R\327\332\373T\025\032?\023\302\252G\010\371\032?/\3103\2730\312\032?4\304\033\023\016/\033?_\327\260X#\270\032?\250bo\321\345\247\032?\317\016\244\312\261n\034?\3063z\313[\311\034?\300\317 T\225\365\034?\236k\033#2\334\033?Xetz\275\177\034?\003~\367\010\341C\034?\346\270\331s\'E\034?\265\362\315a\267\002\034?u\251\375\025\263\327\033?U\217\345q\331g\034?\024>\017y\301c\034?\333\\\033{\r\371\033?\013\320\206a_i\033?\212k\332\227\374\347\032?t)\026\016p\200\032?\365\342\274\346\362r\032?2?\004C\300\233\032?\322\357?U,N\032?K\274\362\017\021\355\031?\355\254W=\322s\032?\205\354\003cY=\033?\316\304\266=(\305\032?\3533-\322@\003\034?(\220t.\016,\034?5\365\345\305\274\240\033?g\020\354\346LT\033?t\362n\2415\203\033?F E:\217\314\033?\227~\'\005\224\210\033?\236\203\302\373\005\026\033?7!\034\317Ay\032?\233\377W\0359\322\031?\321\326\034{Q\026\031?\3474\013\264;\244\030?\006\256\341\330iZ\030?\240\031\304\007v\374\027?+B\240\351\3338\030?\006\256\341\330iZ\030?V\361F\346\221?\030?V\361F\346\221?\030?\274\205d\267\205\235\030?\321\326\034{Q\026\031?1R{S\211\231\032?\256\306\310H\254{\032?\225\344o1\365\251\031?\325\344\316\361v)\032?\n\003\253\367\017z\032?b\314?\365m\223\032?<\350\266\235\346\177\032?\325\344\316\361v)\032?U\371\260t\304u\032?\356\260\332\023\\`\032?\331\n(Apv\032?\250\373\252\243}\210\032?\341\224\332\0070\227\032?\341\022\231\034\353\240\032?P\231\332\323\207\216\032?\214\'\231\324\204x\032?\2641\256l\252\344\037?\323\372N\330\355\317\037?\020\376\345]l\217\033?\372x\215\002\351\007\032?K\274\362\017\021\355\031?8xp\301c\211\030?{\205\005\367\003\036\030?\267w\262@`\212\027?\001\240/bDG\027?\030\376\035\233.\325\026?\034\030\212\205k\377\024?\026\375\241\231\'\327\024?jZs\221\214\346\022?\006\306U\300\230\210\022?\213\340\177+\331\261\021?\241>nd\303?\021?&\020\300\027p\340\017?Y\346\010t\201&\r?\261DVm\3553\r?\024\330\367<\332\223\013?\247(\362\177\242\r\013?\361Po\241\206\312\n?;y\354\302j\207\n?\334\377\266\335\272Q\n?4^\004\327&_\n?\225\330\265\275\335\222\014?\265^\302W*^\013?4^\004\327&_\n?D\225P\260\265\255\014?\226\3311\277\344\220\016?M\355V\340uG\020?;\235\032\036\261\314\021?M\341\234l^0\023?\210\307\217B\243\205\025?4j\276J>v\027?V\361F\346\221?\030?\374\205\303w\007\035\031?\000Z\370\234\351\225\032?\"\374\375\365\0316\033?\231o3\313Tw\033?\222\030t\252\313\025\035?F\315s\036\367\250\035?\247\260C\026\030\233\036?\251h\031\232\314\'$?\227\212\256\207\006\224#?u\n1\030\325\202$?\331\250`\352m\207$?\032\217\357\336\223\177$?\376E\204\n\004\275$?\014\216l\220D\215$?\017\177xV\005|$?\243\270x\262z\013$?4\001\037\271\276\332$?\350\210\327P\305\350$?\037\275N\333\240\245$?@PC[\233\264#?p\324\031\376$U#?\217\'\264rP>$?8\245\204\254\343\002$?\217f\023\375-C$?\261>\222P\002\264 ?\250$\t\307\316\t!?\241UhK\026*!?\226\347\221\244C^!?\267^\\u\340F!?\035\253\265\254\322H!?\265VV\310\314m!?\202~2\010\244\253!?\355A\\\307%\177!?T\336\177E-\266!?\361\037\361|\035p!?\252xV\344m+!?E\217\214\223\312- ?\275<?\272H\t ?\340\3071\217\205\263\036?\232g\374-\307L\036?\"\"\273&2\340\035?\255\"\200\364}\323\034?\372\323\227\2749\020\035?\3725,\"\227\363\035?\230\306\272\256\033\223\036?\375\270\351\016\343\347\037?\272.C\266\010\231\037?*<\366 \365\270\036?\013\337I\253$)\036?#\332\366\2140\204\035?\216#\345\r\201:\035?(Zz\263T~\034?;\366\375\345\244A\033?\300\223\026.\253\260\031?\313\310j\004,\003\030?\010\273\027N\210o\027?\356[\255\023\227\343\025?\005\272\233L\201q\025?d3\32111\247\025?\322\357\014d\207B\025?\354Z1\022\220\345\023?[\027mD\346\200\023?\365\202Os\362\"\023?]$\243\271\004\226\022?\253Z\322Q\016f\023?\273\221\036+\235\264\025?:\205\2466\202\236\027?\254B^j\3377\031?\302\306\t\324\341o\033?uW\331\353\233\003\035?,\260\360\303{\355\035?\230\372\2136M\363\034?\235\373\243V5\224\034?\255Pt\302#\250\034?\r\361\257\350Mz\034?\351\3362\303 \222\034?\364T\301\207\226e\035?\r\003z\007\226(\035?:!\353\336\307\'\035?\006\267\307h\243\216\034?B\371>\371\0240\034?\337\317h,\023\336\033?\376k\302\2731D\033?D\241\n$\315\304\031?\215\311\207E\261\201\031?\374\205\303w\007\035\031?8xp\301c\211\030?#\'\270\375\227\020\030?\313\310j\004,\003\030?#\'\270\375\227\020\030?\376\222\371\354%2\030?\341\031#\310\367{\030?[\377\370\\\267R\031?\345\'\325>\035\217\031?jB\377\251]\270\030?\301\255\346\371\0068\032?\376\377\315\305\276\350\033?\236G\353\306\300\334\034?\345\377\360\033\250Q\035?\014\376I?\213\354\035?K\340U]\'\370\035?\'\031s\266\004\t\037?\2177\330\037Q6\037?l\253\037\274\3620\037?\244Ay;\234\242\036?HQ\336\374\303\354\036?\2501\330\017\334A\037?\300`%\211\237\253\037?\253\016\300\323R\343\037?J\211\001k\005\350\037?\365\313\365\360D\224\037?]\327\343I\310\303\037?!\024\330\277\222{\037?pS\272\3660t\037?y\364f\244C\177\037?\374\243I\013\222\234\036?\355\030\177$\352\332\036?\346/\016\335\325s\036?$\370I/\026\370\035?+\030b\343d\\\035?\331Sh\334x\320\034?\"\022K\353\353\320\033?\\\252\315]\035\220\034?\016\007\375\335\037\025\035?\372\322\352\312\270\300\035?oQ\221\003\251&\036?\313_\177\344fP\036?J?\024\336{>\036?\324iJ\243\343\031\035?>M!\350L\000\034?\344\006{\307\264,\033?\324\215z\377T\031\034?\250[\345%\331\314\034?\n\346\323V1\004\034?\206WKgKI\033?\313\0238t\333\007\036?\3731\302\350\255\022 ?\344L\260\213\344# ?\212\177\230\267\374\035 ?\317J\256\360\233\263\037?\362*\264q\231\332\037?\246^\037\354\000\307\037?r\363N\204[\336\037?F*\330\273IP\037?\3330\264\201\016\317\037?\326i\031\263i\310\037?F\306\351r\352\315\037?\256\373H\303\211\345\037?e\366N\014\226\330\037?.F%\301\220\337\037?\353n\212\006\252\370\037?>\263\0032d\n ?\212k\r\211\241\363\037?@\345~\330\351?\037??\341\373\001`S\037?\351\322xO\t{\037?\t\350`+\330\256\037?\3244\314)1j\037?\361\245\234\241KG\037?\256g=\271\374@\037?\323GC:\372g\037?W\300~4\016\210\037?\210\000\306\204\257\347\037?s\007\332\262\266\010 ?iB\375\2502\376 ?\334Y\024\246\212\n\036?\224\360)\245\014\301\026?\362i_\212\274\366\026?\362i_\212\274\366\026?\030\376\035\233.\325\026?\307\272\270\215\006\360\026?vwS\200\336\n\027?4j\276J>v\027?\267w\262@`\212\027?\374\205\303w\007\035\031?D\241\n$\315\304\031?*7\223gEq\032?\007]9\260Y\204\033?\210\346\365\270S`\037?c\371 \357H\001!?%>\315\202\266\300!?s\312U\214\360\177\"?\037`\352=N\376\"?\210\026\336\207\261\274#?\006\244NW\257\326$?\2126Z\035\037~%?\242\'\247n\025a&?\206\314#\354\314\036\'?\366av|\237\235(?\307,\275.\252\342)?\333\251\017\335\031\221+?\254\005\332C\031\257+?r^\025\0108\r,?yU\033\'{\007,?\360T\244\350\237\345+?\207\026\222\371k\245,?\250=\222\203\363X,?\312?Q\336i`+?U&F\340Y\314)?p\273w\244_\372%?N(\002\244O\016#?I\330\032\276CY!?\360\004[\"\240\215\037?HXh\250\320\307\034?\26039@&\325\033?\014\013\261\244#S\032?\030\362c\'\027\276\031?{\205\005\367\003\036\030?\323\343R\360o+\030?\001\240/bDG\027?\334\013qQ\322h\027?M\325\342\370F\031\026?\354Z1\022\220\345\023?\324\374B\331\245W\024?\2422\264\360\253(\024?\230\n\226\217I\353\024?\3422\023\261-\250\024?$3rq\257\'\025?8\204*5{\240\025?qi\241\t\271\367\025?qi\241\t\271\367\025?\301\237\320\241\302\307\026?\362i_\212\274\366\026?\001\240/bDG\027?\343&Y=\026\221\027?B\240\216\"\306\306\027?\352AA)Z\271\027?\010\273\027N\210o\027?\213\310\013D\252\203\027?\305\255\202\030\350\332\027?\372\204Gv\000\037\027?_\031eG\364|\027?\2464\254\363\271$\030?\2464\254\363\271$\030?\201\240\355\342GF\030?\035\014\320\021T\350\027?#\'\270\375\227\020\030?V\361F\346\221?\030?f4M38\245\027?R\343\224ol,\027?y\204\211\365\374\037\026?\24430\362\262&\026?\201\254\247V_]\025?R\357N\343\203C\024?\2422\264\360\253(\024?a2U0*\251\023?\264\202\360\262p\243\022?z\235y\3362L\022?\204\305\227?\225\211\021?hY\367\217\205\350\020?\320\372J\326\227[\020?\311\337b\352S3\020?\262E\322n\3641\017?\255*\352\202\260\t\017?\035\364[*%\272\r?tR\251#\221\307\r?\306\225\0161\271\254\r?\235\364\031\253(\271\016?\033\363\337(\036\274\013?\361Po\241\206\312\n?\300\223\026.\253\260\t?[\377\370\\\267R\t?\004\241\253cKE\t?pP\261 \203\313\t?\037\rL\023[\346\t?\037\rL\023[\346\t?\374\205\303w\007\035\t?\325\344\316\361v)\n?-C\034\353\3426\n?\213\274Q\320\222l\n?\343\032\237\311\376y\n?\240\r\n\224^\345\n?\377\206?y\016\033\013?\377\206?y\016\033\013?\325\344\316\361v)\n?4^\004\327&_\n?\370kW\215\312\362\n?\334\377\266\335\272Q\n?\222\3279\274\326\224\n?\366j\333\213\303\364\010?\341\031#\310\367{\010?mO5\037|\315\007?pP\261 \203\313\t?pP\261 \203\313\t?\316\311\346\0053\001\n?vk\231\014\307\363\t?pP\261 \203\313\t?h5\3114?\243\t?\262]FV#`\t?\030\362c\'\027\276\t?\307\256\376\031\357\330\t?\343\032\237\311\376y\n?H\257\274\232\362\327\n?\204\241i\344ND\n?\272x.Bg\210\t?T\344\020qs*\t?\374\205\303w\007\035\t?\262]FV#`\t?F\256@\231\353\331\010?\366j\333\213\303\364\010?\374\205\303w\007\035\t?\3474\013\264;\244\010?\217\326\275\272\317\226\010?\3474\013\264;\244\010?\217\326\275\272\317\226\010?\341\031#\310\367{\010?\341\031#\310\367{\010?\366j\333\213\303\364\010?\374\205\303w\007\035\t?pP\261 \203\313\t?\307\256\376\031\357\330\t?}\206\201\370\n\034\n?V\345\214rz(\013?xl\025\016\316\361\013?\007\243\243fYA\r?\020\276\213R\235i\r?\262E\322n\3641\017?\032#\310\367{\030\020?\253f\214\305%}\020?\204\305\227?\225\211\021?\302\270\300\212\370\363\022?\026\375\241\231\'\327\024?\24430\362\262&\026?\030\376\035\233.\325\026?R\343\224ol,\027?\313\310j\004,\003\030?\256O\224\337\375L\030??\223X\255\247\261\030?r]\347\225\241\340\030?\262]FV#`\031?\225\344o1\365\251\031?vk\231\014\307\363\031?\220\005.\212|i\032?2V\376)\023\206\032?\330\204c\177\241\223\032?\177\325\236M\237\001\033?\017\021]n5\215\033?\270\002\332\273\336\264\033?\323S\375\255\021\177\034?.\n\033\233\246\232\034?/?h$\337\370\034?>fD\302\'8\035?\000\320\177\024\027u\035?\275v\243n\353\227\035?9\232y+x\365\035?\344^\257\234\374\227\035?\364P>\261\014y\035?G\204\002\223t\375\035?\226\006y\233\t\026\037?y*a\037\375,\037?^\363\r\371%\352\036?\031\222+\246\3463\037?HQ\336\374\303\354\036??\222\336\254\313m\036?\336\\\352\212\223\247\036?2\221[^|{\036?\312&\257\204\244\005\036?w\021>E\"\365\035?\036\370\336\000\257\246\035?\262\377g\270\364t\035?\332\237\257L\004\031\035?\212\255\301wr\270\034?\357\326\227Dt\n\035?\351\2508Hg\344\034?\377\313\374=\215\210\035?\272\376%\365\332v\036?\274\006,\242\356O\036?\252]\016\031a\032\036?\372\037\337,\305X\035?7G\331\377Y#\035?]\n\010\340x\324\036?\246\237\361\366\200v ?*\353\227\205\377?!?\034$D\371\202\026\"?\313\246a\232\027\227\"?O\355%\360\373\365\"?\336\312\204\362M\271#?\345c+\363L\353#?(\356\321K\':$?>\206\357F\344\220$?\337\014\272a4[$?ayl\330\252\265$?\t\000\242!b\321$?\'\316$\306?\'%?[\007~\211\265N%?E\205\255\203\312\222%?Z\245\233\224\347\231%?\343:\313\316\320\257%?\324\234\211\327_\360%?8\017\321/\344\355%?\321.\036_\364u&?\3731Ci\303\357#?P\252\221\036\005\326!?Aq\353at\350 ?z\211\206\314bP ?\020\322~dme\037?\326=\177\310\305\222\036?\314d\257\254q\214\035?\3532\200\340\277\263\034?\367\032\340T4n\033?\216\303\252\213%\366\032?\2515(\365\300\"\032?\264j|\313Au\030?=\222\334\253\240\263\026?\220\342w.\347\255\025?\212\324\305\267\301\232\024?6\203\2563t\242\023?\200\253+UX_\023?qu[}\320\016\023?jZs\221\214\346\022?V\t\273\315\300m\022?\367\217\205\350\0208\022?\266\217&(\217\270\021?\361t\235\374\314\017\022?\255g\010\307,{\022?+Z\024\321\ng\022?\3411\227\257&\252\022?\302\270\300\212\370\363\022?\327\tyN\304l\023?\336$a:\010\225\023?}\236\365\3379J\024?f@\007\247O\274\024?\255[NS\025d\025?\265v6?Y\214\025?\311\307\356\002%\005\026?tj\035\013\300\365\027?\331\376:\334\263S\030?\321\326\034{Q\026\031?\025\361\347%\020\300\027?\206\272Y\315\204p\026?\271\204\350\265~\237\026?a&\233\274\022\222\026?\240\031\304\007v\374\027?vk\231\014\307\363\031?\300X\354\352\346\306\032?\222\3279\274\326\224\032?\276o\346\3219\261\032?\351`t\256e\210\034?*w d\271\242\035?d\302\256t\336\311\036?\211\033CB\214\276\037?*\310b\252\177a ?H\027zH!^!?A\r\257\211\244\224\"?\031u\037\0238\370#?\022\"\343\3108\203%?\021O*\245]\010&?\344\205eM\333\250&?\306w\326,\237\376&?\334\303\254\267\320\014\'?\013\317X\357\310<(?_[L\'jM)?\314\253\223cM\215)?\270\255-</\025+?D\342D\022\302E,?\337|\227\020{\272-?\305\366\365\244\225@/?\315\205\212\244\357\313/?\n\026\274%\217`0?\212\341,\035Z\0011?\275\242\257\256wp1?\233=\257\374\"62?\330\242[h\024\2662?(\306\023\360T\2103?\243g\001z\344\2064?\345n\022\256@\'6?\304\305)\361\273\0247?>\004\210\224\374\0169?\212\350\353\2726\242;?\021,\251;\230\022>?\210\307\234l\245\005??]\266z\2472\'@?\275\333\304\342\232\257@?B\314\210\177\226\266A?7t\246\025N\356A?R\332U\'\353`B?FB\005\316\354\317B?\264Nd\377\2377C?R\221=T\260LC?\\\021\336\031\313\306C?\276\323\215E\r\205C?YiC\337\214\203C?2\223\250\027|\232C?gZj\326|\tC?\363\304\"o\201PC?\212\036\213|}\376B?\233\257F\001\230\356B?\230\263gd\312fB?\236\027\301\333\220:B?dh\235:T(B?\364>\254<#?B?0x\027v\270 B?\210#Y\3210\306A?b\306A-\371\344@?7\220\320\304\253\024A?\214\316\265\014\221\003A?p\307\304{H\327@?\032\242G\342\236\024A?\"\353\205\017\340\205A?\316\251\205\016\221\005B?\356~\010\266\271MB?\366\316=+6\324B?\355\313U\320\r}B?|\261\377S\324\rB?\241\211M\267.-A?4\210\017\354\370/@?\031j\354\311\376\244:?{\030\013W\310\3338?M\260\254\362\01437?\226\245\335\265r\2314?i\342C\247\354\2262?\2624\200O]\r1?[Y!3\267E0?l\250bt\212\2370?\225\200&/#\3261?\001(t\316\267T1?\314\016\373\201\316K5?\357Q\364\3129\3246?$\026\233\320\320\2616?\265x\270\352(q7?\236\213\240\340K\2517?6D)\342\363\0218?\273\274d\334\00728?V\223\216\017\006\3407?P\354R7\330\0328?\251;\005\257L\2568?\204\305\3120:\2256?\016\007Ile,4?\2174\033\330\350\2440?\tW\252\205>\312+?1u/\256\363\232\'?~\356\277&O\177$?\200\027 K\313\272\"?\004\2552\346\275P!?\t\306\361\336y+ ?\343I\017\231\253L\034?\\\307\244\376\373\005\033?\036\234\'U\335N\033?\343\246>D..!?\225\20500\213\206%?{5\2740\004\306+?J\310`\365\342\354/?\327xt\031\272\2660?\261\032\t<I\0351?V\225\016\272\252\n2?\235\341\037\031\037$3?\033\224\306\356V$3?\010|\336\212M\3662?\231\262\272rI\0273?I\201m\023\332\2612?Fr\265\362\353\2671?K\010\206\016\342L1?\302\3548Z\342\2740?\233\345\323\337\"b0?\007\246\235\021\332\2571?\010v\001\321\301j4?\210\315l\374.\0214?\303&\220\344\202\3134?\377\272\204WS\3303?\216\306%\267\273A3?oWa\223223?!\016\024\243\247\3732?\002\321\306#N\2552?\356\242\352\202\272{2?\001\206,\245C\2641?Z\036\367\357\362[1?:\236\307\0172\0341?\213\271n\301\207O0?/\237\242\246:=/?\001\323\307N\010\2650?\236\232\257\270V\2001?\\\030h\305\327\2411?\242\344\221\034\td1?\267y\3312\275\0351?sE\214K\023\2760?\014\227\367f\013p0?\265\243\361q\221n0?K\\\272\216\340b/?Z\031\374\031\270\345.?\377%\331\205Gd-?\255\213\236\005\350\221+?W\362\300\346m\203\"?/N+n\244\270\037?\004\345\2736Ic\034?G_\362S\335\242\032?\345\'\325>\035\217\031?\327\361\004g\225>\031?\331\376:\334\263S\030?4j\276J>v\027?\215\325A\271\310\230\026?[\013\263\320\316i\026?\354Z1\022\220\345\023?\331\346\306\364\204%\016?B\224\324\256\256\257\n?=\222\334\253\240\263\006?\3411\227\257&\252\002?\201\210y\373\030\030\376>\247(\362\177\242\r\373>\366j\333\213\303\364\370>]\030\351E\355~\365>O\342\030ne.\365>\255[NS\025d\365>\324\374B\331\245W\364>O\342\030ne.\365>M\341\234l^0\363>\233#\206x\177\027\361>q\201\025\361\347%\360>/t\200\273G\221\360>\255*\352\202\260\t\357>2E\024\356\3602\356>\337\0003\337\301O\354>\233#\206x\177\027\361>\217\3561\242\376\304\362>mO5\037|\315\367>\202\270a\312vt\002?\021\327{;\323\225\t?\3411\227\257&\252\022?D\241\n$\315\304\031?\365\360\235Lg\035!?(FT\260\337v%?\333\316\236\233\233\016+?<\365\321t9\317/?1{\331v\332\0321?d\367\306\013Gb2?\304a\272\'G\2653?\337\261\211\340@\3075?\344v#\204+\3067?\345\311\034h\221/9?\"\303{%\310\2749?\245\222\026;\325\2629?\256\nX\233\224\2749?\343\037\317\221\t\2669?\367 \275\016\300\3719?\302O.#{\3309?\277p:\013si9?\322\232\271\234\037:5?G\200\361\021\323\2630?&t{o*W*?4\022\212u\366\n%?\250\315\351\306|\277\037?\233\377W\0359\322\031?\271\204\350\265~\237\026?\271\220\242)\226\266\023?\367\217\205\350\0208\022?3\20222m\244\021?q\201\025\361\347%\020?M\355V\340uG\020?\n\340\301\252\325\262\020?\336\030\247\306\360}\006?i\rd\221\264\2109?\034\0172\240I(>?\305\236\032\210\225l=?O\014\214f\254\320<?!\263>\333&\271<?+\241\2062\376\304;?\322\245z\220p\352;?\205\266\t\350\237\217;?\350\346\302\030\366S:?\\X\317\372\250G9?\316;\021ny\1778?\364?\240\0030=8?~\276#\3466:7?\207\232S\217U\3066?\177e\233\327\265\0266?\031\205\217N~\0076?\307\226\2122\300\252\357\276\223\371\r4\033;\343\276\213\274Q\320\222l\352\276\200\207\375\371\021\032\354\276Y\346\010t\201&\355\2762E\024\356\3602\356\276M\261\264\235\000\324\356\276\324\313\336\010A\375\355\276\373l\323\216\321\360\354\276\303\224\222/\262\256\353\276pP\261 \203\313\351\276\035\014\320\021T\350\347\276\3463\217\2624\246\346\276\r\325\2038\305\231\345\276\3432\023\261-\250\344\276hM=\034n\321\343\276b7\205\3704\345\342\276\236.b\n\234\215\341\276\220\370\2212\024=\341\276x\227\315\024!\022\341\276gV!\253|K\340\276\037\372\007\3646\364\336\276\323\313\336\010A\375\335\276_\374\300\227\272\022\336\276\226\324\001\367\331T\337\276\351[\017\364\212\206\340\276\266\205\306\227y@\343\276\001\240/bDG\347\276\"\016\310\024b\344\353\276\307\226\2122\300\252\357\276\3360\033\256\037\254\360\276\215\355\265\240\367\306\360\276=\252P\223\317\341\360\276!>\260\343\277@\360\276Y\346\010t\201&\355\276\247(\362\177\242\r\353\276\213\274Q\320\222l\352\2768xp\301c\211\350\276\255[NS\025d\345\276\024\377\373|)v\343\276\322\361fG\211\341\343\276I\326\300\332A\272\342\276ml\331\316\2657\341\276[!\315\324\373\370\341\276\016\351CY\360\211\342\276mby>\240\277\342\276>\241l\004\301g\344\276\035\014\320\021T\350\347\276-C\034\353\3426\352\276\373l\323\216\321\360\354\276\302\304z\376\017\013\360\276\320\372J\326\227[\360\276/t\200\273G\221\360\276\233#\206x\177\027\361\276J\340 kW2\361\276\372\234\273]/M\361\276\251YVP\007h\361\276\372\234\273]/M\361\276\372\234\273]/M\361\276J\340 kW2\361\276J\340 kW2\361\276\215\355\265\240\367\306\360\276\177\267\345\310ov\360\276!>\260\343\277@\360\276\302\304z\376\017\013\360\276h\035UM\020u\357\276M\261\264\235\000\324\356\276\217\276I\323\240h\356\276\217\276I\323\240h\356\276\217\276I\323\240h\356\2762E\024\356\3602\356\2762E\024\356\3602\356\276tR\251#\221\307\355\276tR\251#\221\307\355\276\270_>Y1\\\355\276\232\363\235\251!\273\354\276=zh\304q\205\354\276\"\016\310\024b\344\353\276d\033]J\002y\353\276\006\242\'eRC\353\276\3525\207\265B\242\352\276\021\327{;\323\225\351\276\227\361\245\246\023\277\350\276{\205\005\367\003\036\350\276\035\014\320\021T\350\347\276\242&\372|\224\021\347\276kN\271\035u\317\345\276\337\'7\037\0212\344\276\377\250\023\361R\301\343\276\231\017\306WT\'\344\276\370\210\373<\004]\344\276O\342\030ne.\345\276\001\240/bDG\347\276\227\361\245\246\023\277\350\276-C\034\353\3426\352\276d\033]J\002y\353\276Y\346\010t\201&\355\2762E\024\356\3602\356\276&\020\300\027p\340\357\276\177\267\345\310ov\360\276=\252P\223\317\341\360\276\026\t\\\r?\356\361\276[\027mD\346\200\363\276R\343\224ol,\367\276a\032\341H\373z\371\276-C\034\353\3426\372\276\006\242\'eRC\373\276rQ-\"\212\311\373\276rQ-\"\212\311\373\276\303\224\222/\262\256\373\276\"\016\310\024b\344\373\276-C\034\353\3426\372\276.D\230\354\3514\374\276\"\016\310\024b\344\373\276.D\230\354\3514\374\276\3556\003\267I\240\374\276\"\016\310\024b\344\373\276\232\363\235\251!\273\374\276.D\230\354\3514\374\276\"\016\310\024b\344\373\276.D\230\354\3514\374\276H\257\274\232\362\327\372\276V\345\214rz(\373\276\370kW\215\312\362\372\276H\257\274\232\362\327\372\276H\257\274\232\362\327\372\276\231\362!\250\032\275\372\276;y\354\302j\207\372\276}\206\201\370\n\034\372\276\244\'v~\233\017\371\276+B\240\351\3338\370\276\362i_\212\274\366\366\276\377\236\263`=I\365\276\n\324\0077\276\233\363\276\202\270a\312vt\362\276\251YVP\007h\361\276\3360\033\256\037\254\360\276\025\331s>\341\221\355\276\006\242\'eRC\353\276\366j\333\213\303\364\350\276{\205\005\367\003\036\350\276D\255\304\227\344\333\346\276\255[NS\025d\345\276\304\273\226o\001\221\343\276 4PS\252\310\341\276\276\257>\334\335\034\341\276!>\260\343\277@\340\276\230\030\252\346b\241\340\276\365M7\334\211\212\337\276\3360\033\256\037\254\340\276\232\031&\350i\237\342\276S\367T\220\227\034\344\276)K\204x\352\262\344\276\247E\226/\334w\344\276\"5\314T\261\306\343\276\347GO\323_\226\343\276\366\207\177;\375^\342\276cA\345\210J]\341\276\273\244bJ\301\246\340\276\323\005\'h\264\321\340\2768\225\024q\235\363\341\276\251YVP\007h\341\276N\353\374\374s\250\341\276\254d2\342#\336\341\276\272\232\002\272\253.\342\276\317\360\352E\202\343\341\276U\013\025\261\302\014\341\276$I\214u\334\266\340\276\255n\222r9V\340\276\2378\302\232\261\005\340\276\037\372\007\3646\364\336\276w]\205\265\255=\336\276i\035UM\020u\337\276\362B[Jm\024\337\276\034\357+b\032~\336\276\326\326\272\232]s\336\276\375w\257 \356f\335\276U\333,\342d\260\334\2766d\260\2408\231\333\276\321\324\302\227Ow\332\276W\357\354\002\220\240\331\276\354IG\326m\222\327\276nY\225\257\221E\326\276\261f*\3451\332\325\276\264q\006wNP\326\276\225\372\2115\"9\325\276\273\207\276\232\207<\327\276\034\014\320\021T\350\327\276 \027\254\243p^\330\276i:\371\374I\337\330\276#\"\2105\215\324\330\276\021\327{;\323\225\331\276\343\037\317\221\t\266\331\276\240\022:\\i!\332\276\014\270\337\210\213/\334\276\267_>Y1\\\335\276~s=\331\346)\337\276r\201\025\361\347%\340\2765\2128\337\200}\341\276\000\263s\201h9\342\276w\215m\204\013\232\342\276\271\220\242)\226\266\343\276\361h\343\210\265\370\344\276\035\014\320\021T\350\347\276\303\224\222/\262\256\353\276\200\207\375\371\021\032\354\276Y\346\010t\201&\355\276\270_>Y1\\\355\276Y\346\010t\201&\355\276\"\016\310\024b\344\353\276\303\224\222/\262\256\353\276H\257\274\232\362\327\352\276\366j\333\213\303\364\350\276-C\034\353\3426\352\276H\257\274\232\362\327\352\276\006\242\'eRC\353\276\227\361\245\246\023\277\350\276\227\361\245\246\023\277\350\276\316\311\346\0053\001\352\276{\205\005\367\003\036\350\276T\344\020qs*\351\276\001\240/bDG\347\276D\255\304\227\344\333\346\276\3463\217\2624\246\346\276\276\222\232,\244\262\347\276\276\222\232,\244\262\347\276\001\240/bDG\347\276_\031eG\364|\347\276\001\240/bDG\347\2760N\370|\377\254\272\2768[\314\021*\037\317\276+i\244)+\033\320\276\245\0242_w\035\316\276\320\300\002w$\207\315\276\3577\177\270P\236\316\276\345P3bn\020\320\276\037\372\007\3646\364\316\276\222\322\t\364\313X\313\276n<\361\377W\333\314\276U\333,\342d\260\314\276{haG\312\263\316\276\273\244bJ\301\246\320\276~\255\2058Z\376\321\276sx1b\331\253\323\276\330\007\037k\302\315\324\276R\355\364\377\201\244\325\276\311\307\356\002%\005\326\276qdqA\256\273\326\276\237\033\036\353w\233\326\276\206\272Y\315\204p\326\276c$A\331\020\363\327\2762b\270\235*\235\327\276\323\350\202\270zg\327\276D\255\304\227\344\333\326\276\315\322\312\224A{\326\276\001\240/bDG\327\276+L\000z\361\260\326\276\\\016\211\265\327\006\327\276!+l\304\233N\325\276\325\374B\331\245W\324\276-`\300\232\034\241\323\276fL\301\032g\323\321\276\224\003n\3040\263\321\276\330\007\037k\302\315\324\276\006\277\313\024\214\255\324\276W\014\221\262\311\n\323\276\033\025\264\240bb\324\276\375\224S\320\'\321\326\276\254G\2162\352s\330\276lE\325\216fU\331\276\374\200\223\257\374\340\331\276\232\374\201805\331\276\257Rj\304\006\352\330\276\034\014\320\021T\350\327\276\036 \2202\177\330\324\276\344<sAC \323\276\037\372\007\3646\364\316\276\320\300\002w$\207\315\276\205\246\231\254Y\200\311\276\375\224S\320\'\321\306\276\202\270a\312vt\302\2761E\024\356\3602\276\276\031\036\230/q\334\300\276qdqA\256\273\306\276\303\224\222/\262\256\313\276\227\016JVM)\322\276\300\246ZM\317\242\324\276\264q\006wNP\326\276=\227\014t\253\357\325\276\274\233~\273\262,\324\276\257o\016t@T\322\276\022\316\227\254\304\033\315\276\377\213oA\031W\312\276\361\0279_zh\260\2768\225\024q\235\363\261\276\r\026\2135\025\017\223\276Y\234\260K\364\374p?\303\224\222/\262\256\273\276?\366\243v\371\265q?\274~\332\013y\302\312\276F{u\273\202`r?\323\005\'h\264\321\320\276\335\354r\276\226_\317\276\031\036\230/q\334\320\276\354f\353\205\247\374\360\276\247(\362\177\242\r\353\276\331\376:\334\263S\350\276{\205\005\367\003\036\350\276\035\014\320\021T\350\347\276\276\222\232,\244\262\347\276D\255\304\227\344\333\346\276\r\325\2038\305\231\345\276O\342\030ne.\345\276\252Pr\301\370\355\344\276\315\334*%W\363\344\276O\342\030ne.\345\276)K\204x\352\262\344\276\300\246ZM\317\242\344\276\241/\336\013\243\213\343\276\310\320\322\2213\177\342\276\211\330y~\305\330\341\276\372\234\273]/M\341\276\304\213\256\240\2434\337\276yqE\326\330-\333\276\\\016\211\265\327\006\327\276\274\233~\273\262,\324\276x\227\315\024!\022\321\276\027\3553_\014\202\312\276\362_\377\371\246~\310\276\306\274\022q\010\217\305\276Q\366\330\216\220\036\302\276\320\372J\326\227[\300\2760N\370|\377\254\272\276\t\312\247\246\250#\265\276\301\235v\276\300(\270\276yqE\326\330-\313\276\316\346\212\265lk\323\276iW\235\254\203I\322\276\000\203\213\262\n\335\315\276n<\361\377W\333\314\276\335\354r\276\226_\317\276\027\3553_\014\202\312\276\206\235\265\035K\006\275\2763R\025q?\202\200\276Bu\241)\243\340\245>\006\306\212\262hN\257>\365M7\334\211\212\277>\246Nz\276\352\361\300>\335\354r\276\226_\277>\270\231\206\270\2440\300>?\253\314\224\326\337\302>\273\244bJ\301\246\320>nY\225\257\221E\326>\262]FV#`\331>\362_\377\371\246~\330>M\316XM:>\330>\205\246\231\254Y\200\331>qdqA\256\273\326>\200\244\241\251K\204\325>\021\364\037\353\014\000\323>\362|\243\251\340\350\321>+i\244)+\033\320>\2523\316\021\277\203\273>\351@~\t\2506p\276\263z\352\005]\312\262\276yqE\326\330-\273\276D\312hG\036F\300\2763vx\276U\215\304\276\n\301\303\027\232\251\310\276\266h\"\350?\326\311\276\2523\316\021\277\203\313\276\244\035\026\356\205\227\312\276\362_\377\371\246~\310\276\024\377\373|)v\303\276\217\344\321\021\351L\304\2763vx\276U\215\304\276\234\020BY[%\306\276(A$\350\324:\306\276\3453\217\2624\246\306\276\227\361\245\246\023\277\310\276\332\376:\334\263S\310\276!+l\304\233N\305\276\313\333\256#P\365\302\2762\177\\Md\007\301\276{haG\312\263\276\276a\020\201\270\345\002\273\276\234\020BY[%\266\276\215\355\265\240\367\306\260\276D\312hG\036F\260\276;\203LS\200\377\250\276\305:\004wh\244\252\276Cl\275\232\224f\251\276\n\301\303\027\232\251\270\276v\203\r\364\365!\264\276\301\235v\276\300(\270\276\332\376:\334\263S\270\276\357q\307\027\304r\261\276\327\020\003\372\320G\261\276\315\322\312\224A{\266\276A\027\366|\031\001\237\276O\351\327\013B\317\217\276\002\220\2145Y,\240\276K\004\204\270m=\245\276\202\270a\312vt\262\276\327\251s\2768\356\235\276e\\dGR\356\250\276\026\366\027\356\032\374\266\276\235\007^\312L\253\271\276.W\334\013\016\'\267\276\027\3553_\014\202\272\276\205\246\231\254Y\200\271\276\320\300\002w$\207\275\2762\177\\Md\007\301\2768\225\024q\235\363\301\276!+l\304\233N\305\2763vx\276U\215\304\276\374\2357_6K\303\276Q\366\330\216\220\036\302\276\313\333\256#P\365\302\276\350!\307\224\027\262\275\276\304\213\256\240\2434\277\276\267_>Y1\\\275\276\206\235\265\035K\006\275\2761E\024\356\3602\276\276\375\224S\320\'\321\266\276_\031eG\364|\267\276G\270\240)\001R\267\276kN\271\035u\317\265\276T\344\020qs*\271\276\222\322\t\364\313X\273\276yqE\326\330-\273\276\031\036\230/q\334\300\276J\340 kW2\301\276\344<sAC \303\276:\2140\342\216y\305\276}\231\305\027/\016\305\276kN\271\035u\317\305\276}\231\305\027/\016\305\276\374\2357_6K\303\276pmU\320\2745\303\276cA\345\210J]\301\276\335&\273\035\n4\302\276\304\213\256\240\2434\277\276\303\224\222/\262\256\273\276\237\376y;>1\275\276T\344\020qs*\271\276.W\334\013\016\'\267\276v%bGlB\255\276\316\311\346\0053\001\252\276\232\031&\350i\237\262\276\3453\217\2624\246\266\276&\020\300\027p\340\277\276\001\275\323\021~\261\300\276pmU\320\2745\303\276\361h\343\210\265\370\304\276\300\246ZM\317\242\304\276\3453\217\2624\246\306\276\375\224S\320\'\321\306\276\3453\217\2624\246\306\276\242&\372|\224\021\307\276\234\020BY[%\306\276\361h\343\210\265\370\304\276v\203\r\364\365!\304\276\202\270a\312vt\302\276u\214\361\202\004\234\300\276\270\231\206\270\2440\300\276\000\203\213\262\n\335\275\276\026\366\027\356\032\374\266\2768\225\024q\235\363\261\276\217\344\321\021\351L\264\2769.\2055\005\232\256\276}\016\323\216\200\251\255\276\t\312\247\246\250#\265\276\232\031&\350i\237\262\276kN\271\035u\317\265\276\350!\307\224\027\262\275\276\254*\352\202\260\t\277\276\246Nz\276\352\361\300\276\276\257>\334\335\034\301\276\246Nz\276\352\361\300\276\270\231\206\270\2440\300\276\335\354r\276\226_\277\276{haG\312\263\276\276\266h\"\350?\326\271\276\313\333\256#P\365\262\276-`\300\232\034\241\263\2768\225\024q\235\363\261\276L\373\237)_\303\250\276a\020\201\270\345\002\253\276\006-\032\356\000\250\202\276B$\367\377gP\201\276X0\364\377\337\025\227\276I\rhG|\267\241\276\021bn\304\201\372\240\276\026\366\027\356\032\374\246\276\234\020BY[%\246\276q\210\324\216\304\306\252\276\361\0279_zh\260\276\307}\025\243\241\324T\276\202\270a\312vt\262>\211\026\351\036J\326W>\023G\324C1KT>\215\230\334V\241\242]>@l\317\306o%b>\240\332\rX\272\306l>K\026:\252\257ru>\337\222\344\005MU~>\244\250\010w4\374\201>#\321\335\013RD\204>#\321\335\013RD\204>H\257\274\232\362\327\212>\214\217\n\364m\347\211>\321oXM\351\366\210>\345{UMa\274\216>\004\317nAw\310\213>\253\221y\276Hc\222>Y\337I\326\244\205\222>\372HpA\273\345\230>\233a\354\202\226\265\232>\343\336\307\224\271@\234>LLJS\232S\235>\037\326\244\246 \351\232>\323\014\346\005\221r\233>\246\226@Y\027\010\231>\301\235v\276\300(\230>A\027\366|\031\001\217>\327X\311\224\375]\211>`\310\272\035\271\354\202>\234\277\227/ \225\201>B$\367\377gP\201>g\261+e\315S\203>\215>`\3122W\205>X0\364\377\337\025\207>\366\253\342\210\023j\206>\375\224S\320\'\321\206>\375\224S\320\'\321\206>\253\342#\350\203\363\206>\321oXM\351\366\210>\2523\316\021\277\203\213>\272\005\260\240\347Q\214>\014\270\337\210\213/\214>fS\200\270Ct\214>}\016\323\216\200\251\215>\272\005\260\240\347Q\214>+\272NSf\253\204>\014\270\337\210\213/|>\262\034?Y\323\352{>\223\311%e\275\336~>\3756\250#\236\361\177>\225\326&\350\013.\201>\006-\032\356\000\250\202>o\232\234\254\341\272s>K\305\217\200t\342p>\247\030X\351$Rp>\205\004EY\343_p>\277\213\322\370Y\262p>\373\323Y4\374\352s>\316\2670\024\361\313y>\330\266tA\207=\200>\205U\357\202\036\360\204>g\002\326\216\010\344\207>\023P\246\246d\006\210>\224x{;\202N\212>\311\206\347\005\325\217\210>_\031eG\364|\207>I^\022q\267G\206>\375\224S\320\'\321\206>g\002\326\216\010\344\207>_\031eG\364|\207>\301\235v\276\300(\210>k\375\016\3649?\221>Q\366\330\216\220\036\222>\263z\352\005]\312\222>\202\270a\312vt\222>z\317\360\202b\r\222>\211\241\322\021\213\333\222>\\|\327\216L\001\225>\375\224S\320\'\321\226>\301\235v\276\300(\230>u\324\267\0351\262\230>\014\270\337\210\213/\234>x\302\357\377\023\276\237>\330\266tA\207=\240>\232\031&\350i\237\242>>\330\023q\373d\243>\221\212CY\237B\243>\024\377\373|)v\243>\201\t\014\364\261\004\247>\262\034?Y\323\352\253>\276\257>\334\335\034\261>T\344\020qs*\271>2\177\\Md\007\301>\322\361fG\211\341\303>:\2140\342\216y\305>\254*\352\202\260\t\317>\016\351CY\360\211\322>pmU\320\2745\323>\017\340_\312\341\017\326>\362_\377\371\246~\330>7\201TPr\003\325>L\327<\334H\270\324>mby>\240\277\322>\035)t\301\215R\321>\031\344O\320\375\007\316>\316\311\346\0053\001\312>\3453\217\2624\246\306>R\355\364\377\201\244\305>\337\035\327\216\373\271\305>\332\376:\334\263S\310>\007\231C\326C\311\316>\301\272\032n\372\222\321>^\"I\326\002\367\323>7\201TPr\003\325>\372\211w>\013[\326>\375\224S\320\'\321\326>\215\320\021\361\275\\\327>\001\240/bDG\327>\375\224S\320\'\321\326>\354IG\326m\222\327>qdqA\256\273\326>nY\225\257\221E\326>=\227\014t\253\357\325>\t\312\247\246\250#\325>\222\357\255\243\005\303\324>\203\257};h\372\325>%6HV\270\304\325>\206\272Y\315\204p\326>nY\225\257\221E\326>\264q\006wNP\326>x\227\315\024!\022\321> 4PS\252\310\321>\013\336g\307\323\023\322>T\001\265 \255\224\322>\344<sAC \323>B\266\250&\363U\323>\217\344\321\021\351L\324>v\203\r\364\365!\324>\244:\272\235\277\001\324>&J\010w\343\264\322>\016\351CY\360\211\322>mby>\240\277\322>\263z\352\005]\312\322>\305\305\366\377\026\t\322>\273\244bJ\301\246\320>\r\257\373\371|\265\317>\037\372\007\3646\364\316>\270\231\206\270\2440\320>\\+-e\021q\320>{\242\251\246=\210\321>\362|\243\251\340\350\321>\305\305\366\377\026\t\322>N\353\374\374s\250\321>\251YVP\007h\321>\362|\243\251\340\350\321>Q\366\330\216\220\036\322>mby>\240\277\322>\244:\272\235\277\001\324>\322\361fG\211\341\323>:\2140\342\216y\265>^\"I\326\002\367\263>-`\300\232\034\241\263>v\203\r\364\365!\264>\t\312\247\246\250#\265>I1\313\224\222\302\265>.W\334\013\016\'\267>.W\334\013\016\'\267>_\031eG\364|\267>G\270\240)\001R\267>_\031eG\364|\267>\362_\377\371\246~\270>xz)e\347\247\267>\026\366\027\356\032\374\266>\234\020BY[%\266>kN\271\035u\317\265>\t\312\247\246\250#\265>\330\007\037k\302\315\264>\247E\226/\334w\264>\361h\343\210\265\370\264>!+l\304\233N\265>kN\271\035u\317\265>\3453\217\2624\246\266>.W\334\013\016\'\267>\375\224S\320\'\321\266>_\031eG\364|\267>;\203LS\200\377\270>T\344\020qs*\271>#\"\2105\215\324\270>;\203LS\200\377\270>\205\246\231\254Y\200\271>lE\325\216fU\271>\301\235v\276\300(\270>\301\235v\276\300(\270>\332\376:\334\263S\270>\332\376:\334\263S\270>\301\235v\276\300(\270>I^\022q\267G\246>\253\221y\276Hc\242>\274\t\315\224\'\'\242>\274\t\315\224\'\'\242>bn,eo\342\241>8\225\024q\235\363\241>\006-\032\356\000\250\242>%wOS\010:\243>\034\350l\304=\335\243>\237\\%\350\307\020\244>\345\342\344\210\371\025\242>\374\2357_6K\243>}ub\312\030\003\241>\262\034?Y\323\352\233>H\257\274\232\362\327\232>A\306KS\336p\232>}\275(eE\031\231>\344<sAC \223>\344<sAC \223>2\243\277\232z\022\225>\205U\357\202\036\360\224>\021\263\030\356\274\212\225>\030\234\2115\321\361\225>\301\235v\276\300(\230>\0022\341\210\317L\231>\205\246\231\254Y\200\231>\010\033R\320\343\263\231>}\275(eE\031\231>\246\226@Y\027\010\231>\2523\316\021\277\203\233>\262\034?Y\323\352\233>\0022\341\210\317L\231>>)\276\2326\365\227>\334\244\254#jI\227>\'nk\304\371\277\226>.W\334\013\016\'\227>\201\t\014\364\261\004\227>X0\364\377\337\025w\276\262\034?Y\323\352[\276:\2140\342\216yU\276\204\260\232\331\332\250;>\303\211td\276\327C\276\036\033\024g\365\363A>\242\262\t\244\265$4\276\304^pZ\354\016K\276\303\027\307]2\247(\276\022\351(\227\247kM\276\216\366\207\003+\202T\276(\371T\267:\305a\276\340\237\345\210\233\244`\276\255I\241\367@\216q\276+\272NSf\253t\276\345!\331\300\362pv\276\004u\362\264\010}s\276\351\221(3\343\306t\276\212\316\020XB\001w\276\303\004\364\315}\303r\2761\232\3557GWq\276\330\007\037k\302\315t\276\264\214\216\313\303@z\276\213\327\342\272u\274z\276fS\200\270Ct|\2769.\2055\005\232~\276\3756\250#\236\361\177\276\340\237\345\210\233\244\200\276fS\200\270Ct|\276\242J]\312\252\034{\276\022\230~ml\333x\276-{H\357\221\221w\276\017\327\204\321@\365u\276\245`0\260,\'q\276|\005\001,M\356y\276ir%\001\3719v\276\234\020BY[%v\276X\201\236)\033\246{\276yD\007\220!\010w\276\030x\035RM\207u\276x;5-\356Ls\276\205U\357\202\036\360t\276\254<\240t\362>o\276\262\313\224/\230Zg\276\nU\221\231\351(p\276:;\206\270S\351p\276x\225\261\271\\\230k\276\373\323Y4\374\352c\276\323\337\247\277\331Lg\276\243\371\262\240o\214V\276\210\317?\"\220nE\276Z\361\355\233\013\374I\276\027\226 \331\320\000\034\276\276\225\323%\333\3322>-\314\362\030\315!L>\376C\251\246\354@b>\301L\314\224\205\230s>\333\310\030\007\356\263w>X0\364\377\337\025w>\0339\027\356xmx>\t\367\345\354_Iy>L\037\014\r\343-y>I^\022q\267Gv>3\375;\'\351]m>fS\200\270Ct\\>y\363\\f\346wR\276\276\334|\"\225Be\276ir%\001\3719V\276\324\216\375\225\236\274b\276dA\334\362\334\375d\2769.\2055\005\232n\276\221\267\201\237Vhg\276l3\037\235$ y\276\311\206\347\005\325\217x\276\254\232K!|\036v\276\233\007p\366\'jr\276\332\277F\244\272\370s\276dA\334\362\334\375t\276\320\036\256#\256ft\276\372\0332\373\003\300t\276\324\216\375\225\236\274r\276|c\254\330\326\315p\276\025Yx\t\230\301k\276\031\311\307{\210\027Z\276\026\267#\266!\241b>\215\230\334V\241\242m>\001\264\370\030\335\226`>\251\302O\325\200\300>\276\262\034?Y\323\352[\276\357q\307\027\304rq\276\242\360\340=<\321r\276*\\\243\246\334\313m\276a\"7\252\'8k\276g\002\326\216\010\344g\276\2279u\327\2554m\276\221f\327u\033\330b\276^\020\223\344\300\301c\276\266\3529xM a\276O>\261U\230\363b\276u\324\267\0351\262h\276\004u\362\264\010}c\276\301\235v\276\300(X\276\205U\357\202\036\360T\276\333\"\225\223\\\377O\276\236w\277h\030\300P\276\314*\r\345\312i3\276U(Qg\372\307!>1\300\223W\260\036=\2760]Eh\016\030!>l3\037\235$ 9>Q\354\001Bk7\n\276\221\267\201\237VhW>\262\034?Y\323\352K>\217\031\332\014\017\240\353\275\215\230\334V\241\242]>\273l-\260\244\354f>k!{\327\275\251a>\2135\216g\377\233a>\001\005\243B\030\'e>.*\236\305V\001c>:\2140\342\216yU>\r\026\2135\025\017c>pR\304\345\331\345b>+\013\371|\241;Y>fS\200\270Ct\\>]\262\34777\342\\>k!{\327\275\251a>+\272NSf\253d>\271\2533\024y\006d>\233\007p\366\'jr>\001\264\370\030\335\226p>\310\316\277\314\334di>\314P\263\00441o>\223\036\377\256\023\003r>\270\242a\261EKp>I\rhG|\267\201>\024\241P\320\237\226\214>(\035\301\232\276/\222>\247E\226/\334w\224>L\373\237)_\303\230>\217,\230\254\025c\234>+i\244)+\033\240>m\243\200;\3604\240>b\007\235)\327\210\236>\265\271\314\021{f\236>\226\315BY\375\263\244>\006$6_\362-\246>\336\233\310\224[\317\252>\005~\304\027<8\247>\352v\216\262\222\027\230>3R\025q?\202\220>\340\360\217\262\3264\225>\334\244\254#jI\227>P\230-\342\006?\213>\0339\027\356xm\210>\321oXM\351\366\210>2\364i\304\265\242\211>\262\313\224/\230Z\227>\306\230\257#\362\203\241>\231j\320\021\245/\247>o\353F\326\034K\250>1\375MS\304\034\246>\t\312\247\246\250#\245>I\rhG|\267\241>\314t\037\350\267\233\237>\233\262\226\254\321E\237>r\331~\270\377V\237>\345{UMa\274\236>u\324\267\0351\262\230>_\031eG\364|\227>X0\364\377\337\025\227>\301\235v\276\300(\230>\230\304^\312\3569\230>\314#u\276|\013\233>UB\274\035\375\t\240>\247E\226/\334w\244>\355\034\000\372H\r\247>\rg5_P\237\247>\260%#\350\341d\250>\337A:\334\021\305\251>\326\262WMGh\252>0N\370|\377\254\252>j\237cG\260_\252>\020\004\303\027\370\032\252>Cl\275\232\224f\251>lE\325\216fU\251>lE\325\216fU\251>\277\367\004w\n3\251>\362_\377\371\246~\250>\351\320\034k\334!\251>\020\004\303\027\370\032\252>6@MS\"\216\247>\231j\320\021\245/\247>\253\342#\350\203\363\246>PG\203\270\313\256\246>\335J\036k ?\246>\030\234\2115\321\361\245>\264q\006wNP\246>\3453\217\2624\246\246>\355\034\000\372H\r\247>\312,YM\213\205\247>G\270\240)\001R\247>\365\005qA]t\247>\332\376:\334\263S\250>\240\255\317\021\003\241\250>\362_\377\371\246~\250>\327X\311\224\375]\251>\351\320\034k\334!\251>Cl\275\232\224f\251>\327X\311\224\375]\251>\240\255\317\021\003\241\250>V\212\202\270) \250>\271\264\005w\254\301\247>\334\244\254#jI\247>\334\244\254#jI\247>\223\201_\312\220\310\246>\304C\350\005w\036\247>\243\371\262\240o\214\246>\330\007\037k\302\315\244>\362\016U\320k\356\243>\242\002\227/~\006\243>\211\241\322\021\213\333\242>\244\250\010w4\374\241>/\0062\342\322\226\242>\211\241\322\021\213\333\242>iW\235\254\203I\242>\272c[Mq1\243>\024\377\373|)v\243>\355\313U\320\r}\242>\2220\265\240U8\242>@~\205\270\261Z\242>@~\205\270\261Z\242>+\013\371|\241;\251>\342\226\001\372\214*\244>\023Y\2125s\200\244>-`\300\232\034\241\243>\217\344\321\021\351L\244>\274\t\315\224\'\'\242>\347\210V\320\257\013\241>*\3032\342t%\241>D\312hG\036F\240>\246Nz\276\352\361\240>\314t\037\350\267\233\237>\026>\336\210G\022\237>*\3032\342t%\241>\330\266tA\207=\240>\347\210V\320\257\013\221>\340\237\345\210\233\244\220>*\\\243\246\334\313\215>u\324\267\0351\262\210>\014\270\337\210\213/\214>\320\300\002w$\207\215>PG\203\270\313\256\206>\234\020BY[%\206>\271\264\005w\254\301\207>\311\206\347\005\325\217\210>P\230-\342\006?\213>\224x{;\202N\212>\272\005\260\240\347Q\214>\337\222\344\005MU\216>G\000g\304-h\217>\244\250\010w4\374\221>\021\263\030\356\274\212\225>\233a\354\202\226\265\232>\345{UMa\274\236>\304\213\256\240\2434\237>\3756\250#\236\361\237>+i\244)+\033\240>\352.\310\027f\001\240>\223\311%e\275\336\236>n<\361\377W\333\234>c\266\362\377\233\370\231>\366\253\342\210\023j\226>\262\313\224/\230Z\227>~l~;\n\211\224>+\272NSf\253\224>\327X\311\224\375]\231>\374\345\375\371ba\233>yqE\326\330-\233>\305:\004wh\244\232>=zh\304q\205\234>\217,\230\254\025c\234>\272\005\260\240\347Q\234>\242J]\312\252\034\233>\310\327\221/\020 \235>\014\270\337\210\213/\234>\256\320[\312f\377\235>I\rhG|\267\241>\364\264\306\027\"\344\242>\334S\002\372.\271\242>8\225\024q\235\363\241>\376C\251\246\354@\242>OPgG\332(\243>\221\212CY\237B\243>%wOS\010:\243>\353%\344\210W\207\243>v\203\r\364\365!\244>\032B\373|\207\347\244>\316x<\334\367p\245>\305\351YM-\024\246>K\004\204\270m=\245>\237\\%\350\307\020\244>\006-\032\356\000\250\242>\033\361PSLW\240>\337\222\344\005MU\236>}\016\323\216\200\251\235>\374\345\375\371ba\233>A\306KS\336p\232>\300\356 \350\373\270\234>\310\327\221/\020 \235>\361\260\251#\342\016\235>\327\251s\2768\356\235>1E\024\356\3602\236>\327\251s\2768\356\235>\246\347\352\202R\230\235>\300\356 \350\373\270\234>\310\327\221/\020 \235>Ec\331\013\206\354\234>A\027\366|\031\001\237>G\000g\304-h\237>D\312hG\036F\240>\365M7\334\211\212\237>\036\'O\320[y\237>\337\222\344\005MU\236>\327\251s\2768\356\235>\361\260\251#\342\016\235>\010\033R\320\343\263\231>\023P\246\246d\006\230>\230\304^\312\3569\230>:\2140\342\216y\225>v\203\r\364\365!\224>o\232\234\254\341\272\223>\202\270a\312vt\222>\ty\375|m\223\220>+i\244)+\033\220>G\000g\304-h\217>\330\266tA\207=\220>\276\257>\334\335\034\221>k\375\016\3649?\221>\357q\307\027\304r\221>\030K\337\013\226a\221>\357q\307\027\304r\221>\030K\337\013\226a\221>\030K\337\013\226a\221>\330\266tA\207=\220>\024\241P\320\237\226\214>\004\317nAw\310\213>^j\017q/\r\214>H\257\274\232\362\327\212>A\306KS\336p\212>A\306KS\336p\212>\310\327\221/\020 \215>\345{UMa\274\216>\365M7\334\211\212\217>k\375\016\3649?\221>\367Z8_\330\331\221>\ty\375|m\223\220>\ty\375|m\223\220>"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content: "\276\334|\"\225Be>\351\221(3\343\306d>\001\005\243B\030\'e>\247i\002\023`\342d>\332\277F\244\272\370c>\271\2533\024y\006d>y\363\\f\346wb>\327\376L\010\217\022a>\366\005_\025\202\265^>fS\200\270Ct\\>\rg5_P\237W>.*\236\305V\001S>S\256\000\310\210IQ>QPU\033\377iJ>\312\367eB\023SE>\252\331Q\205P8C>!\225d\006grB>\365\242\020&\340\256B>\221\267\201\237VhG>S\256\000\310\210IQ>(J\377\340uUV>\235\031\024\274\216\340Y>\377\246\367\225\216G^>\255I\241\367@\216a>b\200\342V\261\027b>pR\304\345\331\345b>\023G\324C1Kd>\001\005\243B\030\'e>\271\2533\024y\006d>\225\326&\350\013.a>\255I\241\367@\216a>\276~\321u\013c^>\307\037j\366\027\365]>\366\005_\025\202\265^>B\317\035\266\021,^>\355d\306\224u#_>{V\253U\210~^>\204\367C\326\224\020^>\005\207\226zo\363Z>\037\251f`i\303V>\001\005\243B\030\'U>e\3601\311\241mP>1\353\227a\202\347E>$\344\260\233\006(:>\231\312\307&\357*2>\026\335\311\325\212h.>\215Q3Z\347:+>`,8\327\250`->*f\244\323]\364/>v\033a\032\353\031;>\254\232K!|\036F>c\222\206\034\030\216I>\326\240\241[\0053J>\350\342\322\\\036WI>\022\351(\227\247kM>\020\206\332\247\005eQ>g\261+e\315SS>\320\036\256#\256fT>\332\277F\244\272\370S>C-\311b\233\013U>\337A:\334\021\305Y>r\023\276\201\005\314U>\251{\246\330\306XL>\326\240\241[\0053J>\225\326&\350\013.Q>e\3601\311\241mP>\333\"\225\223\\\377O>\rg5_P\237G>\247\030X\351$RP>\020\206\332\247\005eQ>\320\036\256#\256fT>\356\302qA\377\002V>O\217[\177\323\203W>\337A:\334\021\305Y>4\254\221\375\255\315X>H\257\274\232\362\327Z>fS\200\270Ct\\>9.\2055\005\232^>\204\367C\326\224\020^>\2279u\327\2554]>\037\251f`i\303V>\2279u\327\2554]>\320\300\002w$\207]>\273\275\327\331\337|[>\304^pZ\354\016[>\010H\220\026\233\331]>\nU\221\231\351(`>\276~\321u\013c^>\001\264\370\030\335\226`>b\200\342V\261\027b>\327\376L\010\217\022a>pR\304\345\331\345b>=\374\177T\177\317c>\260\n\233\223ltd>C-\311b\233\013e>\205U\357\202\036\360d>\276\334|\"\225Be>\273l-\260\244\354f>-{H\357\221\221g>\372$\004^7{h>p\243n\017\025vg>\334\200@@\346\336f>\221\267\201\237Vhg>\rg5_P\237g>X0\364\377\337\025g>\216\366\207\003+\202d>\305\274\033\007v\356a>1\232\3557GWa>\031\'s(\022\367`>@l\317\306o%b>y\363\\f\346wb>\301L\314\224\205\230c>^\020\223\344\300\301c>\301L\314\224\205\230c>=\374\177T\177\317c>\354\001x\245\323\034c>\376C\251\246\354@b>S\256\000\310\210Ia>\357q\307\027\304ra>\031\'s(\022\367`>\004u\362\264\010}c>\031\'s(\022\367`>\366\005_\025\202\265^>i\024zToZ_>\276~\321u\013c^>fS\200\270Ct\\>]\262\34777\342\\>l3\037\235$ Y>H\257\274\232\362\327Z>\273\275\327\331\337|[>6m\213\231\331\263[>\374\345\375\371ba[>fS\200\270Ct\\>x\225\261\271\\\230[>6m\213\231\331\263[>\353\243\314\370I=\\>-\314\362\030\315!\\>\377\246\367\225\216G^>{V\253U\210~^>\355d\306\224u#_>M}\267\271l\r`>\205\004EY\343_`>\225\326&\350\013.a>\036K\273\263\337\343_>\340\237\345\210\233\244`>\225\326&\350\013.a>\277\213\322\370Y\262`>\001\264\370\030\335\226`>\370\022`\230\320\004a>t\302\023X\312;a>\031\'s(\022\367`>{V\253U\210~^>\010H\220\026\233\331]>\351@~\t\2506`>{V\253U\210~^>\240\332\rX\272\306\\>\326\240\241[\0053Z>\257[E\275\247\004Y>\337A:\334\021\305Y>\211\026\351\036J\326W>\n\246;\303$\271T>\340\237\345\210\233\244P>7\3136Fc\223R>:\2140\342\216yU>^\020\223\344\300\301S>\216\366\207\003+\202T>\376C\251\246\354@R>\263z\352\005]\312R>pR\304\345\331\345R>\252\331Q\205P8S>\316]\264\207\202\200Q>\343`\337$\307\212S>\230\227 \2047\024T>\252\331Q\205P8S>\202\224\365\346\362\tR>\305\274\033\007v\356Q>I\rhG|\267Q>I\rhG|\267Q>\274\033\203\206i\\R>\252\331Q\205P8S>g\261+e\315SS>%\211\005EJoS>\230\227 \2047\024T>\216\366\207\003+\202T>\216\366\207\003+\202T>\367c\n\302\013\225U>r\023\276\201\005\314U>a\321\214\200\354\247V>\334\200@@\346\336V>\243\371\262\240o\214V>\254\232K!|\036V>\356\302qA\377\002V>\356\302qA\377\002V>\307}\025\243\241\324T>\307}\025\243\241\324T>\307}\025\243\241\324T>\307}\025\243\241\324T>\023G\324C1KT>\307}\025\243\241\324T>L\316a\343\247\235T>\034\350l\304=\335S>\216\366\207\003+\202T>\332\277F\244\272\370S>\007\345A\'\371\322Q>\\O\231H\225\333P>S\256\000\310\210IQ>pR\304\345\331\345R>L\316a\343\247\235T>\307}\025\243\241\324T>\205U\357\202\036\360T>:\2140\342\216yU>\211\026\351\036J\326W>\273\275\327\331\337|[>+i\244)+\033`>`s\341\323b\310_>\205\004EY\343_`>\036K\273\263\337\343_>Kp\2666\036\276]>+i\244)+\033P>\251{\246\330\306XL>\033\212\301\027\264\375L>\031\'s(\022\367P>@l\317\306o%R>\316]\264\207\202\200Q>\031\'s(\022\367P>\n\246;\303$\271T>^\020\223\344\300\301S>L\316a\343\247\235T>\315\377\010\333\370\240Z>\001\005\243B\030\'U>\367c\n\302\013\225U>:\2140\342\216yU>\243\371\262\240o\214V>\037\251f`i\303V>\323\337\247\277\331LW>~uP\236=DX>F\356\302\376\306\361W>=M*~\272_X>\026\010\316\337\\1W>\334\200@@\346\336V>\232X\032 c\372V>\037\251f`i\303V>O\217[\177\323\203W>\243\371\262\240o\214V>1\353\227a\202\347U>r\023\276\201\005\314U>\367c\n\302\013\225U>|\264V\002\022^U>\023G\324C1KT>\343`\337$\307\212S>pR\304\345\331\345R>\376C\251\246\354@R>@l\317\306o%R>\316]\264\207\202\200Q>\361\203k\335*\351H>\232\021q#\251\222D>\2135\216g\377\233A>|m\255\005X\366B>\365\242\020&\340\256B>\005k\361\207\207TA>\361\256o\347\374\261A>\325\204\374h\035\224@>\277#&\037O\2527>\277#&\037O\2527>?\200\321 rv6>:\2140\342\216y5>\203\333\236\343\254q4>L\316a\343\247\2354>z\310X\\\024\2579>\222\\\326H\232\257@>\274\033\203\206i\\B>\n\246;\303$\271D>\232X\032 c\372F>\273\275\327\331\337|K>\247\030X\351$RP>.*\236\305V\001S>\320\036\256#\256fT>\367c\n\302\013\225U>(J\377\340uUV>\232X\032 c\372V>\337A:\334\021\305Y>\005\207\226zo\363Z>Kp\2666\036\276]>]\262\34777\342\\>\357q\307\027\304ra>\365\242\020&\340\256b>g\261+e\315Sc>\001\005\243B\030\'e>\334\200@@\346\336f>\004\306\234\336C\rh>\213\327\342\272u\274j>\311\217\271h\010Kl>\030\032r\245\303\247n>\337\222\344\005MUn>K\305\217\200t\342p>\347\210V\320\257\013q>\020\206\332\247\005eq>(\371T\267:\305q>b\200\342V\261\027r>\000\374\320\337\344kq>*\261|\3602\360p>K\305\217\200t\342p>C\334\0369`{p>\355d\306\224u#o>[B\230\305F\214n>~\306\372\307x\324l>\231\251\304I\236\212k>\'\233\251\n\261\345j>9\335\332\013\312\tj>\260\n\233\223ltd>\205\004EY\343_`>\304^pZ\354\016[>\312>\017?\315\272W>\276\334|\"\225BU>g\261+e\315SS>\022\351(\227\247kM>\026\010\316\337\\1G>\273\275\327\331\337|K>\033\212\301\027\264\375L>\022\351(\227\247kM>\276\334|\"\225BU>\353\243\314\370I=\\>1\232\3557GWa>\036K\273\263\337\343_>\2016J:i*[>\221\267\201\237VhW>\n\246;\303$\271T>\034\350l\304=\335S>\332\277F\244\272\370S>\n\246;\303$\271T>\353\243\314\370I=\\>\320\036\256#\256fd>\273l-\260\244\354f>\343\261\211N\002\033h>\0066\354P4cf>\213\2068\221:,f>\275-\'L\320\322i>x\225\261\271\\\230k>c\222\206\034\030\216i>\232X\032 c\372f>=M*~\272_h>\000VMlS\267i>\0339\027\356xmh>\356\302qA\377\002f>6\034\341o\236#g>\354\001x\245\323\034c>\023G\324C1Kd>4[\347\323r=d>Uo\372c\264/d>v\203\r\364\365!d>\376C\251\246\354@b>g\261+e\315Sc>^\020\223\344\300\301c>y\363\\f\346wb>b\200\342V\261\027b>\225\326&\350\013.a>I\rhG|\267a>1\232\3557GWa>\327\376L\010\217\022a>\247\030X\351$R`>\310,kyfD`>6m\213\231\331\263[>\366\005_\025\202\265^>0\215\354\264\370\007_>o\364\0309P\006\\>{V\253U\210~^>\320\300\002w$\207]>T\021O\267*P]>\342\0024x=\253\\>?\016$\032\346E[>\005\207\226zo\363Z>\"j`\374\224\251Y>\"j`\374\224\251Y>\326\240\241[\0053Z>F\356\302\376\306\361W>\350\342\322\\\036WY>l3\037\235$ Y>\337A:\334\021\305Y>c\222\206\034\030\216Y>\270\374\335=\264\226X>u\324\267\0351\262X>\265;\344\241\210\260U>a\321\214\200\354\247V>X0\364\377\337\025W>\211\026\351\036J\326W>\221\267\201\237VhW>\221\267\201\237VhW>F\356\302\376\306\361W>\037\251f`i\303V>\221\267\201\237VhW>X0\364\377\337\025W>\323\337\247\277\331LW>\026\010\316\337\\1W>\026\010\316\337\\1W>\rg5_P\237W>\312>\017?\315\272W>\301\235v\276\300(X>\235\031\024\274\216\340Y>o\364\0309P\006\\>\2279u\327\2554]>\353\243\314\370I=\\>\374\345\375\371ba[>0\215\354\264\370\007_>\320\300\002w$\207]>\"j`\374\224\251Y>\257[E\275\247\004Y>]\262\34777\342\\>\010H\220\026\233\331]>\022\351(\227\247k]>\2279u\327\2554]>\204\367C\326\224\020^>T\021O\267*P]>\215\230\334V\241\242]>Kp\2666\036\276]>\262\034?Y\323\352[>\213\327\342\272u\274Z>4\254\221\375\255\315X>\312>\017?\315\272W>\031\311\307{\210\027Z>\"j`\374\224\251Y>~uP\236=DX>\312>\017?\315\272W>u\324\267\0351\262X>\235\031\024\274\216\340Y>\337A:\334\021\305Y>\246\272\254<\233rY>\246\272\254<\233rY>\270\374\335=\264\226X>\232X\032 c\372V>P\230-\342\006?\213>fS\200\270Ct|>\242J]\312\252\034{>\275-\'L\320\322y>\213\327\342\272u\274z>\033\212\301\027\264\375|>\204\367C\326\224\020~>\337\222\344\005MU~>\204\367C\326\224\020~>9.\2055\005\232~>\204\367C\326\224\020~>\320\300\002w$\207}>v%bGlB}>\204\367C\326\224\020~>3R\025q?\202\200>\3756\250#\236\361\177>\243\233\007\364\345\254\177>3R\025q?\202\200>\215\355\265\240\367\306\200>3R\025q?\202\200>\340\237\345\210\233\244\200>\215\355\265\240\367\306\200>\234\277\227/ \225\201>\253\221y\276Hc\202>\r\026\2135\025\017\203>\272c[Mq1\203>\263z\352\005]\312\202>\253\221y\276Hc\202>\263z\352\005]\312\202>\034\350l\304=\335\203>\215>`\3122W\205>\243\371\262\240o\214\206>X0\364\377\337\025\207>\005~\304\027<8\207>\253\342#\350\203\363\206>\rg5_P\237\207>\023P\246\246d\006\210>\205\246\231\254Y\200\211>\233a\354\202\226\265\212>\374\345\375\371ba\213>fS\200\270Ct\214>n<\361\377W\333\214>\"s2_\310d\215>9.\2055\005\232\216>\243\233\007\364\345\254\217>\\+-e\021q\220>\276\257>\334\335\034\221>\006-\032\356\000\250\222>>\330\023q\373d\223>\362\016U\320k\356\223>\001\3416_\224\274\224>\215>`\3122W\225>\275\000\351\005\031\255\225>I^\022q\267G\226>\262\313\224/\230Z\227>\362_\377\371\246~\230>A\306KS\336p\232>X\201\236)\033\246\233>\353\3078\334\315\247\234>1E\024\356\3602\236>x\302\357\377\023\276\237>\"\332\301\232`\276\240>}ub\312\030\003\241>k\375\016\3649?\241>\357q\307\027\304r\241>\ty\375|m\223\240>\361\0279_zh\240>\304\213\256\240\2434\237>LLJS\232S\235>\211C\'e\001\374\233>\366\374\214\262N\372\232>+\013\371|\241;\231>u\324\267\0351\262\230>+\013\371|\241;\231>\305\351YM-\024\226>\275\000\351\005\031\255\225>ceH\326`h\225>\202\270a\312vt\222>d\024\236\254%\330\220>\306\230\257#\362\203\221>d\024\236\254%\330\220>:;\206\270S\351\220>\\+-e\021q\220>O\351\327\013B\317\217>+i\244)+\033\220>^j\017q/\r\214>+\013\371|\241;\211>\005~\304\027<8\207>\205U\357\202\036\360\204>\301L\314\224\205\230\203>\3115=\334\231\377\203>\350\331\000\372\352\233\205>I^\022q\267G\206>Bu\241)\243\340\205>g\261+e\315S\203>B$\367\377gP\201>+i\244)+\033\200>\337\222\344\005MU~>I\rhG|\267\201>\253\221y\276Hc\202>\253\221y\276Hc\202>\205U\357\202\036\360\204>\253\342#\350\203\363\206>^j\017q/\r\214>\\+-e\021q\220>\033\212\301\027\264\375\214>\330\266tA\207=\200>m\342ts\351\217t>\356\023\034k:\223j>\273l-\260\244\354f>\332\020\361\315\365\210h>\"j`\374\224\251i>\305\274\033\007v\356q>\243\371\262\240o\214v>\247r\324u\223\235x>\264\214\216\313\303@z>\262\034?Y\323\352{>\356\302qA\377\002\226>Bu\241)\243\340\225>\356\302qA\377\002\226>\021\263\030\356\274\212\225>\215>`\3122W\225>\224\'\321\021G\276\225>\356\302qA\377\002\226>:\2140\342\216y\225>\257.\007w\360\336\224>\301L\314\224\205\230\223>Y\337I\326\244\205\222>+i\244)+\033\220>\355d\306\224u#\217>1E\024\356\3602\216>\345{UMa\274\216>\223\311%e\275\336\216>\205\004EY\343_\220>\002\220\2145Y,\220>\002\220\2145Y,\220>\3756\250#\236\361\217>\205\004EY\343_\220>\021bn\304\201\372\220>\330\266tA\207=\220>\\+-e\021q\220>\ty\375|m\223\220>\225\326&\350\013.\221>\325j\221\262\032R\222>Y\337I\326\244\205\222>Q\366\330\216\220\036\222>\376C\251\246\354@\222>(\035\301\232\276/\222>\367Z8_\330\331\221>\202\270a\312vt\222>\r\026\2135\025\017\223>g\261+e\315S\223>\221\212CY\237B\223>g\261+e\315S\223>v\203\r\364\365!\224>\247E\226/\334w\224>\257.\007w\360\336\224>\266\027x\276\004F\225>\215>`\3122W\225>\372\367\305\027\200U\224>M\252\365\377#3\224>\247E\226/\334w\224>\\|\327\216L\001\225>+\272NSf\253\224>~l~;\n\211\224>~l~;\n\211\224>\362\016U\320k\356\223>E\301\204\270\017\314\223>\r\026\2135\025\017\223>\376C\251\246\354@\222>z\317\360\202b\r\222>(\035\301\232\276/\222>s\346\177;N\246\221>B$\367\377gP\221>\306\230\257#\362\203\221>\030K\337\013\226a\221> 4PS\252\310\221>z\317\360\202b\r\222>\266\306\315\224\311\265\220>UB\274\035\375\t\220>}\016\323\216\200\251\215>\355d\306\224u#\217>\233\262\226\254\321E\217>9.\2055\005\232\216>9.\2055\005\232\216>*\\\243\246\334\313\215>\300\356 \350\373\270\214>\024\241P\320\237\226\214>fS\200\270Ct\214>\014\270\337\210\213/\214>\300\356 \350\373\270\214>^j\017q/\r\214>\300\356 \350\373\270\214>\033\212\301\027\264\375\214>\033\212\301\027\264\375\214>fS\200\270Ct\214>\033\212\301\027\264\375\214>fS\200\270Ct\214>\262\034?Y\323\352\213>H\257\274\232\362\327\212>\214\217\n\364m\347\211>+\013\371|\241;\211>\214\217\n\364m\347\211>#\"\2105\215\324\210>\023P\246\246d\006\210>\205\246\231\254Y\200\211>\356\023\034k:\223\212>\2523\316\021\277\203\213>\272\005\260\240\347Q\214>\033\212\301\027\264\375\214>\310\327\221/\020 \215>\213\340\264\035\251w\216>\356\302qA\377\002\206>\356\302qA\377\002\206>\215>`\3122W\205>\205U\357\202\036\360\204>\234\020BY[%\206>\005~\304\027<8\207>\205\246\231\254Y\200\211>\272\005\260\240\347Q\214>}\016\323\216\200\251\215>fS\200\270Ct\214>\2523\316\021\277\203\213>\004\317nAw\310\213>\272\005\260\240\347Q\214>v%bGlB\215>9.\2055\005\232\216>\243\233\007\364\345\254\217>\225\326&\350\013.\221>s\346\177;N\246\221>`\310\272\035\271\354\222>o\232\234\254\341\272\223>kN\271\035u\317\225>\201\t\014\364\261\004\227>\324\273;\334U\342\226>s7*e\2116\226>\257.\007w\360\336\224>\3115=\334\231\377\223>>\330\023q\373d\223>\211\241\322\021\213\333\222>g\261+e\315S\223>\r\026\2135\025\017\223>\356\023\034k:\223\212>\234\020BY[%\206>\350\331\000\372\352\233\205>v\203\r\364\365!\204>\006-\032\356\000\250\202>B$\367\377gP\201>\205\004EY\343_\200>\223\311%e\275\336~>\033\212\301\027\264\375|>9\335\332\013\312\tz>\311\206\347\005\325\217x>\202\345\237\020.\232v>f\371\003,\325(t>O>\261U\230\363r>\272c[Mq1s>\373\323Y4\374\352s>\341\250\267\353\316_t>\367c\n\302\013\225u>C-\311b\233\013u>\236\310i\222SPu>\372\0332\373\003\300t>\341\250\267\353\316_t>\207\r\027\274\026\033t>\234\020BY[%v>\367c\n\302\013\225u>O>\261U\230\363r>HU@\016\204\214r>\330\007\037k\302\315t>\034\350l\304=\335s>z\374.\311\0313v>\233\007p\366\'jr\276\"\031\266\322Y\031u\276K\026:\252\257ru\276=\374\177T\177\317s\276\320\036\256#\256ft\276\177$\246t\002\264s\276dA\334\362\334\375t\276\234\020BY[%v\276\262\313\224/\230Zw\276\334\200@@\346\336v\276\312>\017?\315\272w\276^a=\016\374Qx\276\315\377\010\333\370\240z\276\242J]\312\252\034{\276X\201\236)\033\246{\276\262\034?Y\323\352{\276fS\200\270Ct|\276v%bGlB}\276\337\222\344\005MU~\276\320\300\002w$\207}\276X\201\236)\033\246{\276\337A:\334\021\305y\276\235\031\024\274\216\340y\276\t\367\345\354_Iy\276\010?\276\263g\036z\276\374\345\375\371ba{\276v%bGlB}\276v%bGlB}\276\300\356 \350\373\270|\276\033\212\301\027\264\375|\276fS\200\270Ct|\276\033\212\301\027\264\375|\276\320\300\002w$\207}\276\320\300\002w$\207}\276\320\300\002w$\207}\276v%bGlB}\276\300\356 \350\373\270|\276\320\300\002w$\207}\276\204\367C\326\224\020~\276\3756\250#\236\361\177\276\340\237\345\210\233\244\200\276G\000g\304-h\177\276G\000g\304-h\177\276\337\222\344\005MU~\276\033\212\301\027\264\375|\276fJ\256U\020\271x\276ir%\001\3719v\276N\206\211\034\240\310s\276\276~\321u\013cn\276\205\246\231\254Y\200i\276(\371T\267:\305a\276\251{\246\330\306X\\\276\026\010\316\337\\1W\276\307}\025\243\241\324T\276Uo\372c\264/T\276\276\334|\"\225BU\276y\363\\f\346wR\276`s\341\323b\310O\276\376C\251\246\354@R\276\205U\357\202\036\360T\276\276\334|\"\225BU\276S\256\000\310\210IQ\2767\022\340B\035\373D\276\374\262VW\253J-\276\336%\225\351)& \276*f\244\323]\364\037>\303\245\031W\246v->`s\341\323b\310/>\352p%V\222&.>\361\203k\335*\351(>\260\216\354__\033\'>:E\207\345\324\021\023>/j\232\253\024\352\347=\004\233\230\324qD\037\276J\023\020t\206\n\013\276\004\rF\333\375t:>\026\010\316\337\\1G>\010H\220\026\233\331M>e\3601\311\241mP>\316]\264\207\202\200Q>pR\304\345\331\345R>\305\274\033\007v\356Q>\376C\251\246\354@R>\354\001x\245\323\034S>1\353\227a\202\347U>\326\240\241[\0053J>b\347\211F\312\363\006\276\334\333\353\226\242\227=\276\256\315\362\30335D\276\254\232K!|\036F\276\037\251f`i\303F\276l3\037\235$ I\276\234\213\301\302\032\021E\276\262\034?Y\323\352K\276\"\310\013\251\036\211P\276\355d\306\224u#O\276\344\303-\024i\221O\276\247\030X\351$RP\276\020\206\332\247\005eQ\2761\353\227a\202\347U\276\301\235v\276\300(X\276\2016J:i*[\276\377\246\367\225\216G^\276t\302\023X\312;a\276\351\221(3\343\306d\276O\217[\177\323\203g\276Z\361\355\233\013\374i\276\3115=\334\231\377s\276\231OH\275/?s\276\205\004EY\343_p\276\372\312\207\321\310/p\276r\265\022\325{\354n\276\010H\220\026\233\331m\276fS\200\270Ctl\276*\\\243\246\334\313m\276\030\032r\245\303\247n\276\310,kyfDp\276\245`0\260,\'q\276\367Z8_\330\331q\276\336\347\275O\243yq\276\3756\250#\236\361o\276\366\005_\025\202\265n\276\010H\220\026\233\331m\276\314P\263\00441o\276\212(\215\344\260Lo\276>_\316C!\326o\276\226\216N!\004Yp\276|c\254\330\326\315p\276I\rhG|\267q\276Y\337I\326\244\205r\276\322\326\325\\\246\221s\276]Xk\253\310\226t\27603p(\212\274v\276\355\nJ\010\007\330v\276\264\203\274h\220\205v\276\330\007\037k\302\315t\276\013^c\374\034\344s\276\271\2533\024y\006t\276\236\310i\222SPu\276[\240Cr\320ku\276\276\334|\"\225Bu\276\213\2068\221:,v\276\"\031\266\322Y\031u\27603p(\212\274v\2762\364i\304\265\242y\276\014\270\337\210\213/|\2763R\025q?\202\200\276\024\377\373|)v\203\276\253\342#\350\203\363\206\276u\324\267\0351\262\210\276\262\034?Y\323\352\213\276\272\005\260\240\347Q\214\276H\257\274\232\362\327\212\276\347*\253#&,\212\276\327X\311\224\375]\211\276+\013\371|\241;\211\276\0339\027\356xm\210\276I^\022q\267G\206\276#\321\335\013RD\204\276\034\350l\304=\335\203\276\r\026\2135\025\017\203\276\r\026\2135\025\017\203\276\006-\032\356\000\250\202\276\263z\352\005]\312\202\276\244\250\010w4\374\201\276:;\206\270S\351\200\276\205\004EY\343_\200\276\355d\306\224u#\177\276\337\222\344\005MU~\276\300\356 \350\373\270|\276v%bGlB}\276\014\270\337\210\213/|\276\010?\276\263g\036z\276\240\211c.\1776x\276#\"\2105\215\324x\276\022\230~ml\333x\276\332\020\361\315\365\210x\276}\275(eE\031y\276|\005\001,M\356y\276\014\270\337\210\213/|\276\014\270\337\210\213/|\276\262\034?Y\323\352{\276v%bGlB}\276\300\356 \350\373\270|\276*\\\243\246\334\313}\276*\\\243\246\334\313}\276\223\311%e\275\336~\276\337\222\344\005MU~\276\204\367C\326\224\020~\276\223\311%e\275\336~\276\355d\306\224u#\177\276\355d\306\224u#\177\276\223\311%e\275\336~\276\320\300\002w$\207}\276v%bGlB}\276\320\300\002w$\207}\276\355d\306\224u#\177\276\337\222\344\005MU~\276\223\311%e\275\336~\276\355d\306\224u#\177\276\355d\306\224u#\177\276\355d\306\224u#\177\276\243\233\007\364\345\254\177\276\223\311%e\275\336~\2769.\2055\005\232~\276*\\\243\246\334\313}\276\014\270\337\210\213/|\276X\201\236)\033\246{\2760<B\213\275wz\276\374\345\375\371ba{\276\242J]\312\252\034{\276\374\345\375\371ba{\276X\201\236)\033\246{\276\242J]\312\252\034{\276\300\356 \350\373\270|\276\033\212\301\027\264\375|\276v%bGlB}\276v%bGlB}\276\337\222\344\005MU~\276\204\367C\326\224\020~\276G\000g\304-h\177\276G\000g\304-h\177\276+i\244)+\033\200\276\243\233\007\364\345\254\177\276\355d\306\224u#\177\276\204\367C\326\224\020~\276v%bGlB}\276\014\270\337\210\213/|\276\224x{;\202Nz\276)S\321C\251\020z\276\214\217\n\364m\347y\276{M\331\362T\303z\276\332\020\361\315\365\210x\276\321oXM\351\366x\276\365\363\272O\033?w\276\t\367\345\354_Iy\276\262\034?Y\323\352{\276\374\345\375\371ba{\276\242J]\312\252\034{\276\204\367C\326\224\020~\276*\\\243\246\334\313}\276\337\222\344\005MU~\276\337\222\344\005MU~\276*\\\243\246\334\313}\276\242J]\312\252\034{\276\374\345\375\371ba{\276\262\034?Y\323\352{\276\3756\250#\236\361\177\276\215\355\265\240\367\306\200\2763R\025q?\202\200\276\337\222\344\005MU~\276\320\300\002w$\207}\276*\\\243\246\334\313}\276\014\270\337\210\213/|\276X\201\236)\033\246{\276\242J]\312\252\034{\276\344i\261\207\372Ew\276\316\256^\261\275\020v\276\300\224\244[\215mt\276\2418\271\004D\246s\2764[\347\323r=t\276\301L\314\224\205\230s\276Bu\241)\243\340u\276x\214\337V)\335w\276\352\232\372\225\026\202x\276\354R\"\317\016\255w\276a\321\214\200\354\247v\276\213\2068\221:,v\276r\023\276\201\005\314u\276k*M:\361du\276\256RsZtIu\276\272c[Mq1s\276\267\363\013\333\200\333t\276\247i\002\023`\342t\276m\342ts\351\217t\276pR\304\345\331\345r\276\373\323Y4\374\352s\276+\272NSf\253t\276HU@\016\204\214r\276\274\033\203\206i\\r\276?\264\247\215w\372r\276:\2140\342\216yu\276\2418\271\004D\246s\276\351\221(3\343\306d\276\375\224S\320\'\321f\276\354R\"\317\016\255g\276l3\037\235$ i\276+\013\371|\241;i\276\020(/\373{\205j\276\2016J:i*k\276\326\240\241[\0053j\276\2016J:i*k\276\240\332\rX\272\306l\276\3230R\351\024\335k\276\003\027G\010\177\235l\276fS\200\270Ctl\276\334\321\352i!ok\276\025Yx\t\230\301k\276\"j`\374\224\251i\2769\335\332\013\312\tj\276sdh\253@\\j\276o\364\0309P\006l\276~\306\372\307x\324l\276\006\330@\244\252\203o\2766m\213\231\331\263k\276\235\031\024\274\216\340i\276a\"7\252\'8k\276-\314\362\030\315!l\276\231\251\304I\236\212k\276X\201\236)\033\246k\276\253\353\365J\267\256j\276\213\327\342\272u\274j\276\213\327\342\272u\274j\276\326\240\241[\0053j\276\235\031\024\274\216\340i\276\367\264\264\353F%j\276\031\311\307{\210\027j\276\246\272\254<\233ri\276+\013\371|\241;i\276\246\272\254<\233ri\2764\254\221\375\255\315h\276\014\270\337\210\213/l\276\251{\246\330\306Xl\276\342\0024x=\253l\276\251{\246\330\306Xl\276x\225\261\271\\\230k\276H\257\274\232\362\327j\276\334\321\352i!ok\276\363DeyV\317k\276\345r\203\352-\001k\2760<B\213\275wj\276\275-\'L\320\322i\276\356\023\034k:\223j\276\253\353\365J\267\256j\2760<B\213\275wj\276QPU\033\377ij\276j\303\317*4\312j\276\315\377\010\333\370\240j\276\326\240\241[\0053j\2769\335\332\013\312\tj\276\246\272\254<\233ri\276+\013\371|\241;i\276\326\240\241[\0053j\276ir%\001\3719f\276\262\313\224/\230Zg\276\232X\032 c\372f\276\202\345\237\020.\232f\276+\272NSf\253d\276\034\350l\304=\335c\276m\342ts\351\217d\276v\203\r\364\365!d\276\007\345A\'\371\322a\276\324\216\375\225\236\274b\276\274\033\203\206i\\b\276\335/\226\026\253Nb\276\233\007p\366\'jb\276\205\004EY\343_`\276H\257\274\232\362\327Z\276\205U\357\202\036\360T\276\273\275\327\331\337|K\276:\2140\342\216yE\276\027\364\313\205Z\340B\276\231\312\307&\357*B\276%\211\005EJoC\276:E\207\345\324\0213\276`,8\327\250`-\276\304\354\302S`\336/\276^\311\351\347\006Z1\276\244\207\005\232\343[;\276\263\301\223\002\0272E\276\033\212\301\027\264\375L\276e\3601\311\241mP\276.*\236\305V\001S\276\356\302qA\377\002V\276+\013\371|\241;Y\276o\364\0309P\006\\\276\353\243\314\370I=\\\276B\317\035\266\021,^\276\'\354S4\354u_\276t\302\023X\312;a\276\007\345A\'\371\322a\276\034\350l\304=\335c\276\260\n\233\223ltd\276\202\345\237\020.\232f\2766\034\341o\236#g\276\235\031\024\274\216\340i\276\315\377\010\333\370\240j\276\345r\203\352-\001k\276\036\372\020\212\244Sk\276\345r\203\352-\001k\276X\201\236)\033\246k\276\2016J:i*k\276\264\214\216\313\303@j\276\326\240\241[\0053j\276?\016$\032\346Ek\276\2016J:i*k\276a\"7\252\'8k\276\020(/\373{\205j\276\361\203k\335*\351h\276~uP\236=Dh\276\332\020\361\315\365\210h\276\0339\027\356xmh\276U\300\244\215\357\277h\276\310\316\277\314\334di\276\0339\027\356xmh\2769\335\332\013\312\tj\276\253\353\365J\267\256j\276u\324\267\0351\262h\276\257[E\275\247\004i\276\'\233\251\n\261\345j\276\000VMlS\267i\276\251*\374\256\213\310g\276\334\200@@\346\336f\276\373\323Y4\374\352c\276\247\030X\351$R`\276\240\332\rX\272\306\\\276\235\031\024\274\216\340Y\276c\222\206\034\030\216Y\276\257[E\275\247\004Y\2764\254\221\375\255\315X\276\204\367C\326\224\020^\276\030x\035RM\207e\276L\037\014\r\343-i\276?\016$\032\346Ek\276*\\\243\246\334\313m\276\nU\221\231\351(p\276\303\257\032\204\'\237o\276\266\3529xM q\276Z\227q\017\235\260q\276\202\224\365\346\362\tr\276*\261|\3602\360p\276QPU\033\377ij\276F\356\302\376\306\361g\276\251*\374\256\213\310g\276\211\026\351\036J\326g\276\275-\'L\320\322i\276\030\032r\245\303\247n\276Kp\2666\036\276m\276\300\356 \350\373\270l\276E?m(\002\202l\276\273\275\327\331\337|k\276\334\321\352i!ok\2766m\213\231\331\263k\276Tf(\001\201tp\276C\334\0369`{p\276\333\"\225\223\\\377o\276+i\244)+\033p\276\207g\223H\205fl\276\240\211c.\1776h\276\312>\017?\315\272g\276yD\007\220!\010g\276\365\363\272O\033?g\276\321oXM\351\366h\276X0\364\377\337\025g\276Tf(\001\201tp\276iiS\236\305~r\2764[\347\323r=t\276z\374.\311\0313v\276x\214\337V)\335w\276\236\321;\365\206\013y\276\000VMlS\267y\276\021\340V4t\260y\276\262\034?Y\323\352{\276\262\034?Y\323\352{\276\223\311%e\275\336~\276G\000g\304-h\177\276\205\004EY\343_\200\276I\rhG|\267\201\276\244\250\010w4\374\201\276\376C\251\246\354@\202\276I\rhG|\267\201\276\367Z8_\330\331\201\276+i\244)+\033\200\276\355d\306\224u#\177\276*\\\243\246\334\313}\276\315\377\010\333\370\240z\276\340\371a\025\n\360x\276\'\222\327\247}*w\276m\342ts\351\217t\276L\316a\343\247\235t\276\252\331Q\205P8s\276\026\267#\266!\241r\276\233\007p\366\'jr\276\215\355\265\240\367\306p\276H\257\274\232\362\327j\276\240\211c.\1776h\276\"\310\013\251\036\211`\276t\302\023X\312;a\276\236w\277h\030\300`\276\333\"\225\223\\\377_\276M}\267\271l\r`\276T\021O\267*P]\276i\024zToZ_\2769.\2055\005\232^\276\005\207\226zo\363Z\276=M*~\272_X\276\252\331Q\205P8S\276\031\'s(\022\367P\276r\265\022\325{\354N\276\251{\246\330\306XL\276\033\212\301\027\264\375L\276\251{\246\330\306XL\276\315\377\010\333\370\240J\276-\314\362\030\315!L\276\033\212\301\027\264\375L\276?\016$\032\346EK\276\033\212\301\027\264\375L\276\031\'s(\022\367P\276x\225\261\271\\\230[\276y\363\\f\346wb\276\375\224S\320\'\321f\276\003\027G\010\177\235l\276\265\3358\365\376\320n\276>_\316C!\326o\276\317\025\334\300z\253p\276\223\036\377\256\023\003r\276O>\261U\230\363r\276x;5-\356Ls\276\004u\362\264\010}s\2766\023\017\rkhs\276\277\213\322\370Y\262`\276\026\010\316\337\\1g\276\243\371\262\240o\214f\276O\217[\177\323\203g\276\262\313\224/\230Zg\276\rg5_P\237g\276~uP\236=Dh\276\211\026\351\036J\326g\276\343\261\211N\002\033h\276\221\267\201\237Vhg\276\251*\374\256\213\310g\276\251*\374\256\213\310g\276\rg5_P\237g\2766\034\341o\236#g\276yD\007\220!\010g\276p\243n\017\025vg\276\257[E\275\247\004i\276sdh\253@\\j\276\345r\203\352-\001k\276\036\372\020\212\244Sk\276\'\233\251\n\261\345j\276\356\023\034k:\223j\276\213\2068\221:,f\276(\371T\267:\305a\276\255I\241\367@\216a\276\\O\231H\225\333`\276\327\376L\010\217\022a\276\2135\216g\377\233a\276\020\206\332\247\005ea\276\244\250\010w4\374a\276\346\320.\227\267\340a\276\037X\2746.3b\2767\3136Fc\223b\276\233\007p\366\'jb\276Y\337I\326\244\205b\276y\363\\f\346wb\276Y\337I\326\244\205b\276\004u\362\264\010}c\276\177$\246t\002\264c\276^\020\223\344\300\301c\276\034\350l\304=\335c\276=\374\177T\177\317c\276\2418\271\004D\246c\276\354\001x\245\323\034c\276\210\305>\365\016Fc\276\312\355d\025\222*c\276%\211\005EJoc\276%\211\005EJoc\276\004u\362\264\010}c\276\210\305>\365\016Fc\276\301L\314\224\205\230c\276%\211\005EJoc\276F\235\030\325\213ac\276\2418\271\004D\246c\276\004u\362\264\010}c\276\004u\362\264\010}c\276\354\001x\245\323\034c\276\354\001x\245\323\034c\276O>\261U\230\363b\276\301L\314\224\205\230c\276g\261+e\315Sc\276\004u\362\264\010}c\276\301L\314\224\205\230c\276\026\267#\266!\241b\276\274\033\203\206i\\b\276\366\005_\025\202\265^\276\320\036\256#\256fT\276Z\361\355\233\013\374Y\276\277\213\322\370Y\262`\276,\205I\034\023\2729>\201\256\237m\377\255\377=\362\312\024\332\344P\033>\315\215[\324lp\037\276(\330Q\332\351$\033\276\337\317\214\325\205\224\016\276\201 Mt\213\336\372\275\375\354\252\020_\340\370\275\310S\026\203\3017\320=\301\301\315\261\226r\363=_W<\341z)\026>\027\226 \331\320\000\034>fj\202h\023\354 >\251\302O\325\200\300\036>\203\333\236\343\254q$>L\207\270\346\3555\">L\316a\343\247\235$>\361<\302\340p\201&>\236L\273^F\367\'>\304^pZ\354\016+>\026Ow\334\026\231)>\240\332\rX\272\306,>\240!\267Tt./>\007\345A\'\371\3221>\032\265\305!\206\3065>v\215\016!wJ6>v\215\016!wJ6>\204\"H\340f\3316>\003\177\363\341\211\2455>\226dy\341\177\3755>C-\311b\233\0135>\215\303\340`sk6>\301\370!\025}\341>>\274\033\203\206i\\B>\254\232K!|\036F>c\222\206\034\030\216I>\240\332\rX\272\306L>\236w\277h\030\300P>\327\376L\010\217\022Q>7\3136Fc\223R>\216\366\207\003+\202T>\216\366\207\003+\202T>@l\317\306o%R>{V\253U\210~N>$+Z\230\300\217L>\372$\004^7{H>\232X\032 c\372F>\023G\324C1KD>\247_\001\346\336\271B>\314\343c\350\020\002A>\365\242\020&\340\2562>\262c\350U\215R.>\303\027\307]2\247(>\272/\205\340k\255&>0]Eh\016\030!>L\207\270\346\3555\">;\323\331\336H\341\'>\361\203k\335*\351(>\315\215[\324lp/>Q\302\002\"\213\2325>{\017\002Y\316\026<>\245\345\260Fm;B>\rg5_P\237G>\304^pZ\354\016K>\304^pZ\354\016K>\273\275\327\331\337|K>\004\306\234\336C\rH>\265;\344\241\210\260E>|m\255\005X\366B>\344\223\206\307~\241A>\255oG\027\252U=>$+Z\230\300\217<>\037\360\017]#+9>\322\254\000\035\"69>\215Q3Z\347:;>\322\363\251\031\334\235;>\366\005_\025\202\265>>QPU\033\377iJ>\2279u\327\2554M>\372$\004^7{H>\026\010\316\337\\1G>\232X\032 c\372F>\326\240\241[\0053J>\344\303-\024i\221O>\366\005_\025\202\265N>\262\034?Y\323\352K>\304^pZ\354\016K>l3\037\235$ I>\254\232K!|\036F>\037\251f`i\303F>\037\251f`i\303F>\026\010\316\337\\1G>\265;\344\241\210\260E>\256\315\362\30335D>QPU\033\377iJ>?\016$\032\346EK>\326\240\241[\0053J>Z\361\355\233\013\374I>c\222\206\034\030\216I>u\324\267\0351\262H>u\324\267\0351\262H>\372$\004^7{H>\361\203k\335*\351H>u\324\267\0351\262H>\361\203k\335*\351H>u\324\267\0351\262H>Z\361\355\233\013\374I>Z\361\355\233\013\374I>\304^pZ\354\016K>?\016$\032\346EK>6m\213\231\331\263K>\273\275\327\331\337|K>\273\275\327\331\337|K>6m\213\231\331\263K>\262\034?Y\323\352K>\262\034?Y\323\352K>\230\227 \2047\024T>\265;\344\241\210\260U>X0\364\377\337\025W>\270\374\335=\264\226X>=M*~\272_X>\004\306\234\336C\rX>~uP\236=DX>~uP\236=DX>\301\235v\276\300(X>\323\337\247\277\331LW>\211\026\351\036J\326W>\rg5_P\237W>=M*~\272_X>\246\272\254<\233rY>\235\031\024\274\216\340Y>\326\240\241[\0053Z>QPU\033\377iZ>\005\207\226zo\363Z>\273\275\327\331\337|[>\262\034?Y\323\352[>\304^pZ\354\016[>\270\374\335=\264\226X>\270\374\335=\264\226X>\345!\331\300\362pV>\334\200@@\346\336V>ir%\001\3719V>ir%\001\3719V>\001\005\243B\030\'U>\276\334|\"\225BU>\367c\n\302\013\225U>\276\334|\"\225BU>\n\246;\303$\271T>\343`\337$\307\212S>\343`\337$\307\212S>^\020\223\344\300\301S>\252\331Q\205P8S>^\020\223\344\300\301S>\252\331Q\205P8S>\252\331Q\205P8S>%\211\005EJoS>\034\350l\304=\335S>Uo\372c\264/T>Uo\372c\264/T>\307}\025\243\241\324T>:\2140\342\216yU>\367c\n\302\013\225U>\265;\344\241\210\260U>\367c\n\302\013\225U>|\264V\002\022^U>r\023\276\201\005\314U>\265;\344\241\210\260U>\001\005\243B\030\'U>\205U\357\202\036\360T>Uo\372c\264/T>%\211\005EJoS>.*\236\305V\001S>\365\242\020&\340\256R>\376C\251\246\354@R>\365\242\020&\340\256R>pR\304\345\331\345R>7\3136Fc\223R>7\3136Fc\223R>\007V\352C\223\327\010\276\350\216\324\034^\035\020>\337\372\220\337W]\027>\202\224\365\346\362\t\002>\210@\350>*s\374=d\274\205<\370*\016\276Uo\372c\264/$\276\303\245\031W\246v-\276\240\332\rX\272\306l\276\263z\352\005]\312b>6m\213\231\331\263[>:\2140\342\216yU>\007\345A\'\371\322Q>\251{\246\330\306XL>\243\371\262\240o\214F>\332\277F\244\272\370C>\232X\032 c\372F>\252\331Q\205P8C>\274\033\203\206i\\B>\027\255\"\211\240x@>\262\034?Y\323\352;>\362\312\024\332\344P;>\310\304\276\237[<7>\264\255\221\250\024\3410>\'\003V\344\273\355#>\314\343c\350\020\002!>\023\006\323s\2016\333=r\265\022\325{\354\356\275\025\301$\343\242\311\024\276\371\226\261d\303\253#\276\003\361\240\350\025\3260\2765\3378\240e\3446\276\333\224B\232\350/;\276H\257\274\232\362\327:\276w\251\263\023_\351?\276\274\033\203\206i\\B\2761\353\227a\202\347E\276l3\037\235$ I\276u\324\267\0351\262H\276l3\037\235$ I\276\262\034?Y\323\352K\276\010H\220\026\233\331M\276\010H\220\026\233\331M\276\010H\220\026\233\331M\276r\265\022\325{\354N\276\333\"\225\223\\\377O\276e\3601\311\241mP\276\020\206\332\247\005eQ\276\225\326&\350\013.Q\276+i\244)+\033P\276i\024zToZO\276\377\246\367\225\216GN\2766m\213\231\331\263K\276l3\037\235$ I\276u\324\267\0351\262H\276\317\244]\204<\350C\276y\254\263i,\0200\276\251{\246\330\306X\034>1\353\227a\202\347%\276y\254\263i,\020 \276N\352\006\326\217<.\276pR\304\345\331\345\022\276`s\341\323b\310\037\276E\365o\025\303p\345\275\030QrH\362\223\005>\201 Mt\213\336\372={\201\257_ZG\'>\275N*)!s0>\350\r\327f\360\0372>9\376\335\350\032\2520>\265;\344\241\210\2605>Dtr_Us7>\322\254\000\035\"69>\252\331Q\205P8C>u\324\267\0351\262H>\004\306\234\336C\rH>\325\022Ob\221cE>\037\251f`i\303F>\315\377\010\333\370\240J>i\024zToZO>\376C\251\246\354@R>L\316a\343\247\235T>\367c\n\302\013\225U>\367c\n\302\013\225U>\265;\344\241\210\260U>g\261+e\315SS>\340\237\345\210\233\244P>i\024zToZO>\344\303-\024i\221O>\361\203k\335*\351H>\341-8\202\017tE>:E\207\345\324\021C>?U\315\026\240\255=>\010,\353#\263:4>N\352\006\326\217<\036>\025\301$\343\242\311\024>IZ\271p@r\r>\370\025\264\256U\256\005>\325fM\242Q\235\016>\225\035\320\344\305\225\023>(J\377\340uU\026>:a,\330\274\260\034>\362\312\024\332\344P\033>\226dy\341\177\375\025>`s\341\323b\310\037>\014\2229i\"h0>L\316a\343\247\2354>\326\240\241[\0053:>\203i\361\334 A9>\247\030X\351$R@>:\2140\342\216yE>:\2140\342\216yE>\325\022Ob\221cE>S\365\251\304B\261C><\250\325\324v\030?>C\346\037f\341\2432>\362\312\024\332\344P+>M\243]\331\325\324+>\303\245\031W\246v->\336%\225\351)&0>\265\364:\245\316H3>\203\333\236\343\254q4>P\t\254\036E\0028>\004\306\234\336C\r8>1y\352Z\366\266:>:\032\203\333\002I:>\351@~\t\2506@>\260\000\232f\353KB>\025z{\346\350aB>(J\377\340uUF>\243\371\262\240o\214F>\232X\032 c\372F>\025z{\346\350aB>g\261+e\315S3>\373k\255Z\361\342:>\310\013h\234\025\2449>,\260M&\345\2022>\026\335\311\325\212h\036\276\247_\001\346\336\2712\276<\250\325\324v\030?\276$+Z\230\300\217L\276\365\242\020&\340\256R\276~uP\236=DX\276l3\037\235$ Y\276\361\203k\335*\351X\276O\217[\177\323\203W\276\276\334|\"\225BU\276{V\253U\210~N\276\rg5_P\237G\276\r\256\336[\n\007:\276S\247S\261\214\312\243\275\354H!\242\215\2045>c\331/\031\322\365;>\352p%V\222&>>\376C\251\246\354@B>\265\364:\245\316HC>i\344\322\007\205jA>N\\\264\334\033m9>\326\240\241[\0053*\276\337A:\334\021\305I\276e\3601\311\241mP\2767\3136Fc\223R\276g\261+e\315SS\276+i\244)+\033P\276(J\377\340uUF\276\356\035\035\230\273\273<\276Y\252D\237Q\2247\276:\2140\342\216y\025\276\0028J\345\317=\023>\371\226\261d\303\253#>\037\251f`i\3036\276-\314\362\030\315!<\276\245\345\260Fm;B\276@l\317\306o%B\276i\344\322\007\205jA\276\005k\361\207\207TA\276\344\303-\024i\221?\276#\235\007\237L\3007\276u\324\267\0351\2628\276m\354u\240j\2706\2769\376\335\350\032\2520\276L\316a\343\247\2354\276\277j\317\033\t\022:\276\010\272=\035\'\n9\276\"\310\013\251\036\211@\276\354\001x\245\323\034C\276\211\026\351\036J\326G\276\026\010\316\337\\1G\276\004\306\234\336C\rH\276QPU\033\377iJ\276\273\275\327\331\337|K\276\273\275\327\331\337|K\276\221\267\201\237VhG\276\'\003V\344\273\355C\276\254\232K!|\036F\276\265;\344\241\210\260E\276\253\014\371\'\010OA\276\216\257\336\006q\032B\276\014\2229i\"h@\276\0220\322\223a\323?\276\366\325\267\310\227\305@\276\314\343c\350\020\002A\276P4\260(\027\313@\276\366\325\267\310\227\305@\276\361\256o\347\374\261A\276\231\312\307&\357*B\276\331x\235\247\000\221A\276\240\361\017\010\212>A\276\227\200\036\324g\234?\276^\311\351\347\006ZA\276L\207\270\346\3555B\276\365\242\020&\340\256B\276\256\315\362\30335D\276D`p\005S\"C\276\256\315\362\30335D\276\207\210\226%\326\006C\276\242\262\t\244\265$D\276c\222\206\034\030\216I\276\251{\246\330\306XL\276\204\367C\326\224\020N\276uFe$\275\342C\276\312\231\272\225\211s>\276\225\253\"\3369e8>:E\207\345\324\021#>(\037\373\326\243\214\035>\325Y\370^K\313\'>\026\010\316\337\\1\'>(\037\373\326\243\214->\326\240\241[\0053:>EInU\203\252>>;\277\327\204F\220C>)}\246\203-lD>o\037\035C\"\317D>\236\276he\322\'C>\\\226BEOCC>\216\366\207\003+\202D>\232X\032 c\372F>\245\345\260Fm;B>+i\244)+\033@>.\343\364\310\234\231@>\227\200\036\324g\234?>\226\362\313\332\363\314:>\243@\\\235)\3648>\351@~\t\2506@>\037~bV\227\372=>S\256\000\310\210IA>\223\243\177ET\027C>\266\020\340\227\266\347<>\014\2229i\"h0>\261\325\225\\\031\203)>\336\263\347\342\235\365$>\025z{\346\350a\022>\342\321\207Aa\217\n>f\005*\245\215\215\014\276\304^pZ\354\016+\276\314F\262\327\262\010-\276\320\327\004\'\364\3761\276\314*\r\345\312i3\276*f\244\323]\364?\276\320\036\256#\256fD\276:\2140\342\216yE\2761\353\227a\202\347E\276QPU\033\377iJ\276\rg5_P\237G\276\222E\324\230\3127<\276\020\206\332\247\005eA\2760\244\356d\310\177C\2766m\213\231\331\263;\276\371\226\261d\303\2533\276\2751\200LG\250\002\276L\207\270\346\3555\">\361<\302\340p\201&>`,8\327\250`->\266\202\215\236B\0308>\323:S\026\226\005>>\326\240\241[\0053:>\333\"\225\223\\\377?>\325\022Ob\221cE>\253S\242$\302\266C>\032n\034%\314^C>*6\375\206s\004B>\276\261x\030\303y<>\004\233\230\324qD?>\355d\306\224u#?>N\\\264\334\033m9>\233-\026\026\2211>>\372O\010h\tDA>\223\243\177ET\027C>\203\333\236\343\254qD>\242\262\t\244\265$D>\254\232K!|\036F>QPU\033\377iJ>\361\203k\335*\351H>l3\037\235$ I>Z\361\355\233\013\374I>\026\010\316\337\\1G>\211\026\351\036J\326G>\rg5_P\237G>\372$\004^7{H>\361\203k\335*\351H>\361\203k\335*\351H>\350\342\322\\\036WI>\326\240\241[\0053J>\004\306\234\336C\rH>\372$\004^7{H>Z\361\355\233\013\374I>\337A:\334\021\305I>u\324\267\0351\262H>H\257\274\232\362\327j>\036\372\020\212\244Sk>\316\256^\261\275\020f>\210\305>\365\016Fc>\221f\327u\033\330b>\036K\273\263\337\343_>B\317\035\266\021,^>\270\374\335=\264\226X>O\217[\177\323\203W>\367c\n\302\013\225U>\366\005_\025\202\265N>\361\203k\335*\351H>\260\000\232f\353KB>_W<\341z)6>\336%\225\351)& >\373\027\257\0321\251\001>\314F\262\327\262\010\035\276^\311\351\347\006Z!\276\315\377\010\333\370\240*\276\347)|Y\330\276+\276\272/\205\340k\255&\276\315\215[\324lp\037\276r\265\022\325{\354\036>\010,\353#\263:4\276c\275\212&\352V2\276\264\344\345\013\373O\014\276(J\377\340uU\026>\021x\200z\rg\346=\314*\r\345\312i\023>\336\263\347\342\235\365$>\303\320\035ax?6>#\017\265\245\330\360B>\2279u\327\2554M>\276\334|\"\225BU>\213\327\342\272u\274Z>\022\351(\227\247k]>\"\310\013\251\036\211`>\037X\2746.3b>\177$\246t\002\264c>\351\221(3\343\306d>6\034\341o\236#g>\262\313\224/\230Zg>\0339\027\356xmh>\265;\344\241\210\260u>\021\217\254\n9 u>\215>`\3122Wu>\360z\231z\367-u>\215>`\3122Wu>\234\020BY[%v>\236\310i\222SPu>\367c\n\302\013\225u>\351\221(3\343\306t>\244\250\010w4\374\201>o\232\234\254\341\272\203>\225\326&\350\013.\201>\215\355\265\240\367\306\200>\274\033\203\206i\\r>\002\275\312{\020Rt>\230\227 \2047\024t>\177$\246t\002\264s>\031\'s(\022\367P>\307}\025\243\241\324T>1\353\227a\202\347U>\254\232K!|\036V>\221\267\201\237VhW>F\356\302\376\306\361W>\020(/\373{\205Z>\276~\321u\013c^>1\232\3557GWa>\307}\025\243\241\324d>\345!\331\300\362pf>\345r\203\352-\001k>\337\222\344\005MUn>\276\323\252\277a\207q>\363\352\350\354\347\203s>\017\327\204\321@\365u>\372$\004^7{x>\270\374\335=\264\226x>\322\'\200\206\341!x>\345!\331\300\362pv>\n\246;\303$\271t>\312\355d\025\222*s>\307}\025\243\241\324t>ir%\001\3719v>\264\203\274h\220\205v>\203\235\307I&\305u>\327O\3671\312\242u>X0\364\377\337\025w>\204\356qsaUz>v%bGlB}>\223\311%e\275\336~>3R\025q?\202\200>\347\210V\320\257\013\201>\225\326&\350\013.\201>\357q\307\027\304r\201>\367Z8_\330\331\201>\376C\251\246\354@\202>`\310\272\035\271\354\202>g\261+e\315S\203>g\261+e\315S\203>\376C\251\246\354@\202>\340\237\345\210\233\244\200>\337\222\344\005MU~>\372$\004^7{x>v\203\r\364\365!t>9.\2055\005\232n>\372$\004^7{h>\037X\2746.3b>\307\037j\366\027\365]>\224x{;\202NZ>F\356\302\376\306\361W>QPU\033\377iZ>M}\267\271l\r`>\365\242\020&\340\256b>\316\256^\261\275\020f>4\254\221\375\255\315h>\014\270\337\210\213/l>`s\341\323b\310o>|c\254\330\326\315p>Z\227q\017\235\260q>\355\271\237\336\313Gr>\375\213\201m\364\025s>\272c[Mq1s>\035\240\224\3755\010s>6\023\017\rkhs>\301L\314\224\205\230s>\231OH\275/?s>g\261+e\315Ss>\333wn\335\262#s>\272c[Mq1s>\244\250\010w4\374q>\202\224\365\346\362\tr>9\203^\177[\276q>l\331\242\020\266\324p>\201\207\364c\244\272o>0\215\354\264\370\007o>r\265\022\325{\354n>`s\341\323b\310o>r\265\022\325{\354n>\320\300\002w$\207m>-\314\362\030\315!l>o\364\0309P\006l>\231\251\304I\236\212k>\005\207\226zo\363j>QPU\033\377ij>\367\264\264\353F%j>+\013\371|\241;i>\361\203k\335*\351h>4\254\221\375\255\315h>|\005\001,M\356i>\361\203k\335*\351h>\365\363\272O\033?g>\004\306\234\336C\rh>X0\364\377\337\025g>\305\r\3060\261~f>1\353\227a\202\347e>\001\005\243B\030\'e>Uo\372c\264/d>\"\031\266\322Y\031e>r\023\276\201\005\314e>\305\r\3060\261~f>\243\371\262\240o\214f>@\275y\360\252\265f>a\321\214\200\354\247f>L\316a\343\247\235d>\252\331Q\205P8c>\007\345A\'\371\322a>O>\261U\230\363b>=\374\177T\177\317c>\r\026\2135\025\017c>\026\267#\266!\241b>m\342ts\351\217d>\030x\035RM\207e>\"\031\266\322Y\031e>\327O\3671\312\242e>\"\031\266\322Y\031e>\"\031\266\322Y\031e>\340\360\217\262\3264e>\030x\035RM\207e>\n\246;\303$\271d>|\264V\002\022^e>\276\334|\"\225Be>[\240Cr\320ke>\265;\344\241\210\260e>\367c\n\302\013\225e>\265;\344\241\210\260e>\224\'\321\021G\276e>\213\2068\221:,f>\254\232K!|\036f>\0066\354P4cf>\340\360\217\262\3264e>\356\302qA\377\002f>yD\007\220!\010g>(J\377\340uUf>(J\377\340uUf>I^\022q\267Gf>(J\377\340uUf>\367c\n\302\013\225e>|\264V\002\022^e>\216\366\207\003+\202d>\301L\314\224\205\230c>\276\257>\334\335\034\221>\376C\251\246\354@\202>\253\221y\276Hc\202>\253\221y\276Hc\202>Q\366\330\216\220\036\202>\376C\251\246\354@\202>Y\337I\326\244\205\202>`\310\272\035\271\354\202>\272c[Mq1\203>2\243\277\232z\022\205>I^\022q\267G\206>\253\342#\350\203\363\206>\0339\027\356xm\210>\033\212\301\027\264\375\214>\330\266tA\207=\220>\357q\307\027\304r\221>Q\366\330\216\220\036\222>\253\221y\276Hc\222>\344<sAC \223>+\272NSf\253\224>\\|\327\216L\001\225>\001\3416_\224\274\224>+\272NSf\253\224>\t\312\247\246\250#\225>\301L\314\224\205\230\223>\325j\221\262\032R\222>P\230-\342\006?\213>\366\253\342\210\023j\206>\r\026\2135\025\017\203>}\275(eE\031y>\273\275\327\331\337|k>\'\354S4\354uo>\204\367C\326\224\020~>\272\005\260\240\347Q\214>\225\326&\350\013.\221>\306\230\257#\362\203\221>\215\355\265\240\367\306\220>\355d\306\224u#\217>\2523\316\021\277\203\213>\233a\354\202\226\265\212>\321oXM\351\366\210>\023P\246\246d\006\210>Bu\241)\243\340\205>Bu\241)\243\340\205>~l~;\n\211\204>~l~;\n\211\204>\376C\251\246\354@\202>\337\222\344\005MU~>\223\311%e\275\336~>\337\222\344\005MU~>\243\233\007\364\345\254\177>G\000g\304-h\177>+i\244)+\033\200>B$\367\377gP\201>I\rhG|\267\201>I\rhG|\267\201>\006-\032\356\000\250\202>\263z\352\005]\312\202>\r\026\2135\025\017\203>\024\377\373|)v\203>\3115=\334\231\377\203>\3115=\334\231\377\203>\r\026\2135\025\017\203>\301L\314\224\205\230\203>\301L\314\224\205\230\203>`\310\272\035\271\354\202>\r\026\2135\025\017\203>\3115=\334\231\377\203>#\321\335\013RD\204>~l~;\n\211\204>v\203\r\364\365!\204>\320\036\256#\256f\204>+\272NSf\253\204>\301L\314\224\205\230\203>\272c[Mq1\203>\244\250\010w4\374\201>\234\277\227/ \225\201>:;\206\270S\351\200>\223\311%e\275\336~>9.\2055\005\232~>\320\300\002w$\207}>\242J]\312\252\034{>)S\321C\251\020z>\343\261\211N\002\033x>\264\203\274h\220\205v>)\002\'\032n\200u>\n\246;\303$\271t>\261\302\302\314d\237s>%\211\005EJos>y\363\\f\346wr>\037X\2746.3r>\355\271\237\336\313Gr>\035\240\224\3755\010s>\361)\357P\274\235p>0\215\354\264\370\007o>\361\324\025\007fym>\240\332\rX\272\306l>\251{\246\330\306Xl>\331a\233\3670\031m>\331a\233\3670\031m>$+Z\230\300\217l>x\225\261\271\\\230k>\267M\210g\357&m>\033\212\301\027\264\375l>T\021O\267*Pm>\331a\233\3670\031m>\307\037j\366\027\365m>9.\2055\005\232n>\307\037j\366\027\365m>\240\332\rX\272\306l><\236\324\247\365\357l>m\204\311\306_\260m>\262\034?Y\323\352k>\345r\203\352-\001k>\213\2068\221:,f>L\316a\343\247\235d>pR\304\345\331\345b>L\316a\343\247\235d>\247i\002\023`\342d>\"\031\266\322Y\031e>v\203\r\364\365!d>\r\026\2135\025\017c>\026\267#\266!\241b>b\200\342V\261\027b>\026\267#\266!\241b>\312\355d\025\222*c>=\374\177T\177\317c>4[\347\323r=d>\252\331Q\205P8c>k!{\327\275\251a>e\3601\311\241m`>\036K\273\263\337\343_>\344\303-\024i\221_>T\021O\267*P]>fS\200\270Ct\\>6m\213\231\331\263[>\337A:\334\021\305Y>\rg5_P\237W>\037\251f`i\303V>\243\371\262\240o\214V>\276\334|\"\225BU>g\261+e\315SS>.*\236\305V\001S>7\3136Fc\223R>y\363\\f\346wR>\202\224\365\346\362\tR>S\256\000\310\210IQ>S\256\000\310\210IQ>\344\303-\024i\221O>\340\237\345\210\233\244P>+i\244)+\033P>{V\253U\210~N>$+Z\230\300\217L>(J\377\340uUF>\373\371\377Se\262/>-\367\366\"\237\3524\276\230\227 \2047\024T\276?\016$\032\346E[\276u\324\267\0351\262X\276a\321\214\200\354\247V\276O\217[\177\323\203W\276\026\010\316\337\\1W\276\026\010\316\337\\1W\276ir%\001\3719V\276\246\272\254<\233rY\276O>\261U\230\363b\276\257[E\275\247\004i\276\372u\256\207r\013m\276\325F%\317\226\347q\276+\272NSf\253t\276\037\251f`i\303v\276D6\233\305\316\306x\276\327X\311\224\375]y\276\374\345\375\371ba{\276\014\270\337\210\213/|\276\320\300\002w$\207}\2769.\2055\005\232~\276\355d\306\224u#\177\276G\000g\304-h\177\276\340\237\345\210\233\244\200\276\340\237\345\210\233\244\200\276\205\004EY\343_\200\276\243\233\007\364\345\254\177\276\223\311%e\275\336~\276\033\212\301\027\264\375|\276\262\034?Y\323\352{\276X\201\236)\033\246{\276\340\371a\025\n\360x\276Bu\241)\243\340u\276ir%\001\3719v\276c\211\264\271\344\322u\276\260\n\233\223ltt\276\320\036\256#\256ft\276\002\275\312{\020Rt\276\330\007\037k\302\315t\276\276\334|\"\225Bu\276T\267\322*\274\004u\276\3378hy\336\tv\276x\214\337V)\335w\276\032\201\357\264\200By\276\267D\266\004\274ky\276-{H\357\221\221w\2766\023\017\rkhs\276\317\025\334\300z\253p\276\3503}\206Y\347m\276\351@~\t\2506`\276\003\361\240\350\025\326@\276\327\376L\010\217\022A>\350\342\322\\\036WY>\r\026\2135\025\017c>x\225\261\271\\\230k>\220\256\257<#\255s>\016\037]\230H\312v>\033\212\301\027\264\375|>B$\367\377gP\201>\r\026\2135\025\017\203>\366\253\342\210\023j\206>H\257\274\232\362\327\212>G\000g\304-h\217>\315\201 k\006\353\221>\263z\352\005]\312\222>`\310\272\035\271\354\222>\211\241\322\021\213\333\222>\272c[Mq1\223>\344<sAC \223>\327\251s\2768\356\215>k!{\327\275\251q>\2418\271\004D\246S\276\363\352\350\354\347\203s\276\315\377\010\333\370\240z\276\021\340V4t\260y\276\273l-\260\244\354v\276\325F%\317\226\347q\276\340\360\217\262\3264e\276\361\203k\335*\351X\276\273\275\327\331\337|K\276\261GCc\245\2634>Kp\2666\036\276]>u\324\267\0351\262h>B\317\035\266\021,n>\351@~\t\2506p>\000\374\320\337\344kq>W\'\"\235\254Zs>\237\200\221\313K{t>z\374.\311\0313v>\313\3666x\305\345v>\374\334+\227/\246w>\374\334+\227/\246w>\"j`\374\224\251y>\242J]\312\252\034{>\374\345\375\371ba{>\300\356 \350\373\270|>\320\300\002w$\207}>\223\311%e\275\336~>G\000g\304-h\177>3R\025q?\202\200>\225\326&\350\013.\201>\244\250\010w4\374\201>\376C\251\246\354@\202>`\310\272\035\271\354\202>\330\007\037k\302\315\204>\350\331\000\372\352\233\205>PG\203\270\313\256\206>\350\331\000\372\352\233\205>#\321\335\013RD\204>2\243\277\232z\022\205>\215>`\3122W\205>\366\253\342\210\023j\206>\311\206\347\005\325\217\210>H\257\274\232\362\327\212>fS\200\270Ct\214>\300\356 \350\373\270\214>1E\024\356\3602\216>*\\\243\246\334\313\215>\310\327\221/\020 \215>\242J]\312\252\034\213>#\"\2105\215\324\210>\023P\246\246d\006\210>\375\224S\320\'\321\206>\320\036\256#\256f\204>Y\337I\326\244\205\202>\320\300\002w$\207}>\316\2670\024\361\313y>\372\0332\373\003\300t>*\\\243\246\334\313m>g\261+e\315Sc>p\013\033\351\037~ >\244\002\205\003\243Gz\276\233\262\226\254\321E\217\276\356\302qA\377\002\226\276\305:\004wh\244\232\276\337\222\344\005MU\236\276\3756\250#\236\361\237\276\340\237\345\210\233\244\240\276L\263\331\2162\255\240\276\361\0279_zh\240\276L\263\331\2162\255\240\276:;\206\270S\351\240\276\327\020\003\372\320G\241\276\266\306\315\224\311\265\240\276&\020\300\027p\340\237\276&\020\300\027p\340\237\276\266\306\315\224\311\265\240\276\317\'\222\262\274\340\240\276\347\210V\320\257\013\241\276m\243\200;\3604\240\276\002\220\2145Y,\240\2769.\2055\005\232\236\276\262\034?Y\323\352\233\276\347*\253#&,\232\276\023P\246\246d\006\230\276\327X\311\224\375]\231\276\321oXM\351\366\230\276}\275(eE\031\231\276X0\364\377\337\025\227\276\372\367\305\027\200U\224\276(\035\301\232\276/\222\276\300\356 \350\373\270\214\276\033\212\301\027\264\375|\276B~s\214\326\233y\276L\207\270\346\3555\022>b\200\342V\261\027r>\347\210V\320\257\013\201>2\243\277\232z\022\205>\023P\246\246d\006\210>P\230-\342\006?\213>d\024\236\254%\330\220>\230s\264\240\263\251\223>\233a\354\202\226\265\232>}\016\323\216\200\251\235>\243\233\007\364\345\254\237>O\351\327\013B\317\237>\317\'\222\262\274\340\240>\357q\307\027\304r\241>\355\313U\320\r}\242>B$\367\377gP\241>\2220\265\240U8\242>\323\304\037kd\\\243>\236\266\263\240\021\033\245>Bu\241)\243\340\245>1\375MS\304\034\246>m\364*e+\305\244>\013p\031\356^\031\244>\313\333\256#P\365\242>}ub\312\030\003\241>A\027\366|\031\001\237>\343\336\307\224\271@\234>\314#u\276|\013\233>\374\345\375\371ba\233>\"s2_\310d\235>n<\361\377W\333\234>\317\'\222\262\274\340\240>n<\361\377W\333\234>\234\020BY[%\226>\263z\352\005]\312\222>+i\244)+\033\220>2\243\277\232z\022\205>\014\270\337\210\213/l>\026\010\316\337\\1g>7\204\215I\251+@>@l\317\306o%r\276\366\374\214\262N\372\212\276\"s2_\310d\215\276\327\251s\2768\356\215\276\2523\316\021\277\203\213\276\321oXM\351\366\210\276\271\264\005w\254\301\207\276g\002\326\216\010\344\207\276\253\342#\350\203\363\206\276\366\253\342\210\023j\206\276o\232\234\254\341\272\203\276\263z\352\005]\312\202\276\376C\251\246\354@\202\276\234\020BY[%\206\276\356\023\034k:\223\212\276\215\355\265\240\367\306\220\276T\223fG8\232\224\276PG\203\270\313\256\226\276\005~\304\027<8\227\276\262\313\224/\230Z\227\2762\364i\304\265\242\231\2762\364i\304\265\242\231\276\337A:\334\021\305\231\276H\257\274\232\362\327\232\276-\250\2065I\267\233\276\300\356 \350\373\270\234\276\343\336\307\224\271@\234\276\024\241P\320\237\226\234\276\343\336\307\224\271@\234\276v%bGlB\235\276\306\230\257#\362\203\241\276\325j\221\262\032R\242\276\257.\007w\360\336\244\276\247E\226/\334w\244\276^\"I\326\002\367\243\276E\301\204\270\017\314\243\276\351\177rA\241\221\244\276\332\255\220\262x\303\243\276Y\337I\326\244\205\242\276\376C\251\246\354@\242\276\2220\265\240U8\242\276\276\257>\334\335\034\241\276\300\356 \350\373\270\234\276X0\364\377\337\025\227\276o\232\234\254\341\272\223\276v\203\r\364\365!\224\276\\|\327\216L\001\225\276\266\027x\276\004F\225\276\247E\226/\334w\224\276\320\036\256#\256f\224\276M\252\365\377#3\224\276\221\212CY\237B\223\276\205\004EY\343_\220\276\ty\375|m\223\220\2761E\024\356\3602\216\276n<\361\377W\333\214\276\224\'\321\021G\276u\276\333\"\225\223\\\377o\276\307}\025\243\241\324d\276\'\354S4\354u_\276\262\034?Y\323\352[\276ir%\001\3719V\276.*\236\305V\001S\276\2135\216g\377\233Q\276\022\351(\227\247kM\276\251{\246\330\306XL\276\203\333\236\343\254q\024\276.*\236\305V\001S>\276\334|\"\225BU>\026\010\316\337\\1W>r\023\276\201\005\314U>\305\274\033\007v\356Q>\351@~\t\2506P>\204\367C\326\224\020N>\372$\004^7{H>l3\037\235$ I>\337A:\334\021\305I>~uP\236=DH>l3\037\235$ I>\320\036\256#\256fD>\2623A\t\243b@>Q\227\376\027\271\321<>W\213\237V\234\316=>;\323\331\336H\3417>\254\232K!|\0366>0\244\356d\310\1773>?\016$\032\346E;>e7\333\305[\325B>-\314\362\030\315!L>r\023\276\201\005\314U>\315\377\010\333\370\240Z>\315\377\010\333\370\240Z>\014 \214b\2267E>\326\240\241[\0053Z\276\\O\231H\225\333p\276*\\\243\246\334\313}\2762\243\277\232z\022\205\276u\324\267\0351\262\210\276A\306KS\336p\212\276\262\034?Y\323\352\213\276\224x{;\202N\212\276:\2140\342\216y\205\276\033\212\301\027\264\375|\276\206^\301\345Q\253x\276\217\377Yf^=x\276PG\203\270\313\256v\276\303\257\032\204\'\237o\276c\222\206\034\030\216I\276m\354u\240j\2706\276\330\007\037k\302\315t\276Y\337I\326\244\205\202\276\3115=\334\231\377s\276:\2140\342\216yE\276F\235\030\325\213ac>uz;\221\302fp>\244\250\010w4\374q>\2135\216g\377\233q>\361)\357P\274\235p>G\000g\304-ho>\344\303-\024i\221o>\003\027G\010\177\235l><\236\324\247\365\357l>]\262\34777\342l>Y\337I\326\244\205b>\262\034?Y\323\352\213\276I\rhG|\267\201\276\205\004EY\343_\200\276*\\\243\246\334\313}\276\262\034?Y\323\352{\276\337\222\344\005MU~\276\223\311%e\275\336~\276\367c\n\302\013\225u\276\301L\314\224\205\230s\276\354R\"\317\016\255w\276\257[E\275\247\004y\276\372$\004^7{x\276v%bGlB}\276\340\237\345\210\233\244\200\276\033\212\301\027\264\375|\276\355d\306\224u#\177\276\356\023\034k:\223\212>\243\371\262\240o\214\226>n<\361\377W\333\214>PG\203\270\313\256\206>Y\337I\326\244\205\202>\021\340V4t\260y>9.\2055\005\232n>\026\010\316\337\\1W>7\321\336rm\346\013\276\274\033\203\206i\\R\276m\342ts\351\217d\276\025Yx\t\230\301k\276\033\337\232a\n\"p\276\357q\307\027\304rq\276iiS\236\305~r\276t\313\345\272\375\366t\276\203\235\307I&\305u\276a\321\214\200\354\247v\27603p(\212\274v\276\262\313\224/\230Zw\276x\214\337V)\335w\276\343\261\211N\002\033x\276\340\371a\025\n\360x\276\205\246\231\254Y\200y\276\321oXM\351\366x\276#\"\2105\215\324x\276\323\337\247\277\331Lw\276\300\224\244[\215mt\276H\257\274\232\362\327j\276\247\030X\351$RP\276u\324\267\0351\262X>\261\302\302\314d\237s>\347\210V\320\257\013\201>\337A:\334\021\305\211>\357q\307\027\304r\221>~l~;\n\211\224>\275\000\351\005\031\255\225>\023P\246\246d\006\230>A\306KS\336p\232>\343\336\307\224\271@\234>\333\365VM\245\331\233>\024\241P\320\237\226\234>Ec\331\013\206\354\234>5\221\367|]\036\234>\211C\'e\001\374\233>=zh\304q\205\234>\366\374\214\262N\372\232>\220\333\355\202\332\322\227>+\272NSf\253\224>d\024\236\254%\330\220>\366\374\214\262N\372\212>\234\020BY[%\206>\244\250\010w4\374\201>\320\300\002w$\207}>}\275(eE\031y>\341\250\267\353\316_t>\006\330@\244\252\203o>\343\261\211N\002\033h>\010H\220\026\233\331]>\004\306\234\336C\rH>\003\361\240\350\025\326 >\344\303-\024i\221O\276+\013\371|\241;Y\276(\371T\267:\305a\276\001\005\243B\030\'e\276\334\200@@\346\336f\276\221\267\201\237Vhg\276\343\261\211N\002\033h\276u\324\267\0351\262h\276+\013\371|\241;i\276\216G2-f\022i\276\036\372\020\212\244Sk\276\2016J:i*k\276\2279u\327\2554m\276\3756\250#\236\361o\276\033\337\232a\n\"p\276r\n\354\036\322\020r\276\r\026\2135\025\017s\2767\3136Fc\223r\276\230\227 \2047\024t\276\351\221(3\343\306t\276\237\200\221\313K{t\276]Xk\253\310\226t\2762\243\277\232z\022u\276c\211\264\271\344\322u\276\243\371\262\240o\214v\276O\217[\177\323\203w\276\rg5_P\237w\2766\034\341o\236#w\276\034\361>\'q\230w\276\206^\301\345Q\253x\276\224x{;\202Nz\276\374\345\375\371ba{\276H\257\274\232\362\327z\276\267D\266\004\274ky\276\365\363\272O\033?w\276\226\337\370J?\351t\276\376C\251\246\354@r\276\355d\306\224u#o\2766\034\341o\236#g\276R\377\252\361\303\331e\276\2418\271\004D\246c\276\321oXM\351\366h\276\361\203k\335*\351x\276+i\244)+\033\200\276\330\266tA\207=\200\276\272c[Mq1\203\276\215>`\3122W\205\276\205U\357\202\036\360\204\276~l~;\n\211\204\276\224\'\321\021G\276\205\276+\272NSf\253\204\276\0339\027\356xm\210\276_\031eG\364|\207\276\301\235v\276\300(\210\276\337A:\334\021\305\211\276\271\264\005w\254\301\207\2769\335\332\013\312\t\212\276\023P\246\246d\006\210\276\375\224S\320\'\321\206\276\023P\246\246d\006\210\276\271\264\005w\254\301\207\276I^\022q\267G\206\276\366\253\342\210\023j\206\276\350\331\000\372\352\233\205\2762\243\277\232z\022\205\276\034\350l\304=\335\203\276\340\237\345\210\233\244\200\276\320\300\002w$\207}\276(J\377\340uUv\276\247\030X\351$Rp\276-{H\357\221\221g\276\031\311\307{\210\027Z\276 \334\r\003!\332D\276`,8\327\250`\r>\316]\264\207\202\200A>\rg5_P\237G>\205U\357\202\036\360T>-\314\362\030\315!\\>g\261+e\315Sc>\332\277F\244\272\370c>\276\334|\"\225Be>\365\363\272O\033?g>\372$\004^7{h>\235\031\024\274\216\340i>\t\367\345\354_Ii>\205\246\231\254Y\200i>\000VMlS\267i>\005\207\226zo\363j>+\013\371|\241;i>6\034\341o\236#g>\n\246;\303$\271d>\301L\314\224\205\230c>\2418\271\004D\246c>\023G\324C1Kd>\263z\352\005]\312b>\2418\271\004D\246c>\216\366\207\003+\202d>\2418\271\004D\246c>\230\227 \2047\024d>\271\2533\024y\006d>4[\347\323r=d>Uo\372c\264/d>\373\323Y4\374\352c>O>\261U\230\363b>\324\216\375\225\236\274b>\r\026\2135\025\017c>\365\242\020&\340\256b>\263z\352\005]\312b>\357q\307\027\304ra>\376C\251\246\354@b>7\3136Fc\223b>\327\376L\010\217\022a>S\256\000\310\210Ia>k!{\327\275\251a>\225\326&\350\013.a>\007\345A\'\371\322a>\202\224\365\346\362\tb>\202\224\365\346\362\tb>\376C\251\246\354@b>b\200\342V\261\027b>O>\261U\230\363b>4[\347\323r=d>\3622\301\263\357Xd>%\211\005EJoc>g\261+e\315Sc>\221f\327u\033\330b>%\211\005EJoc>\3622\301\263\357Xd>\271\2533\024y\006d>\320\036\256#\256fd>\301L\314\224\205\230c>\034\350l\304=\335c>\260\n\233\223ltd>\004u\362\264\010}c>F\235\030\325\213ac>\365\242\020&\340\256b>\312\355d\025\222*c>\221f\327u\033\330b>\3622\301\263\357Xd>\351\221(3\343\306d>I^\022q\267Gf>\254\232K!|\036f>\216\366\207\003+\202d>\236\310i\222SPe>u\324\267\0351\262h>\026\010\316\337\\1g>\243\371\262\240o\214f>\244\250\010w4\374a>\323\337\247\277\331LW>\262\034?Y\323\352K>\320\036\256#\256fD>\\\226BEOCC>6C\214y\371\026\267\275\2279u\327\2554->\215\230\334V\241\242=>\026\335\311\325\212h.>\026\335\311\325\212h\036>\236Y\020\242L\311\016>Q\227\376\027\271\321<\276u\324\267\0351\262H\276\340\237\345\210\233\244P\276\365\242\020&\340\256R\276L\316a\343\247\235T\276Uo\372c\264/T\276=M*~\272_X\276\215\230\334V\241\242]\276\022\351(\227\247k]\276H\257\274\232\362\327Z\276X0\364\377\337\025\207\276\375\224S\320\'\321\206\276PG\203\270\313\256\206\276\253\342#\350\203\363\206\276\375\224S\320\'\321\206\276\375\224S\320\'\321\206\276X0\364\377\337\025\207\276\005~\304\027<8\207\276X0\364\377\337\025\207\276\253\342#\350\203\363\206\276\366\253\342\210\023j\206\276PG\203\270\313\256\206\276PG\203\270\313\256\206\276\366\253\342\210\023j\206\276\224\'\321\021G\276\205\276\356\302qA\377\002\206\276\350\331\000\372\352\233\205\276\356\302qA\377\002\206\276\350\331\000\372\352\233\205\276\224\'\321\021G\276\205\276\350\331\000\372\352\233\205\276:\2140\342\216y\205\276\215>`\3122W\205\276\205U\357\202\036\360\204\276:\2140\342\216y\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276\356\302qA\377\002\206\276I^\022q\267G\206\276\347*\253#&,\212\276\374\345\375\371ba\213\276\310\327\221/\020 \215\276\357q\307\027\304r\221\276\211\241\322\021\213\333\222\276\202\270a\312vt\222\276\006-\032\356\000\250\222\276g\261+e\315S\223\276\353%\344\210W\207\223\276`\310\272\035\271\354\222\276>\330\023q\373d\223\276\325j\221\262\032R\222\276\367Z8_\330\331\221\276*\\\243\246\334\313\215\276#\321\335\013RD\204\276+i\244)+\033\200\276\340\237\345\210\233\244\200\2763R\025q?\202\200\276B$\367\377gP\201\276\225\326&\350\013.\201\276B$\367\377gP\201\276\367Z8_\330\331\201\276\r\026\2135\025\017\203\276\301L\314\224\205\230\203\276v\203\r\364\365!\204\276\330\007\037k\302\315\204\276\234\020BY[%\206\276\234\020BY[%\206\276\224\'\321\021G\276\205\276:\2140\342\216y\205\276Bu\241)\243\340\205\276I^\022q\267G\206\276\234\020BY[%\206\276X0\364\377\337\025\207\276\rg5_P\237\207\2762\364i\304\265\242\211\276\205\246\231\254Y\200\211\276\224x{;\202N\212\276(A$\350\324:\326>\214\217\n\364m\347\211\276\234\020BY[%\326>\023P\246\246d\006\210\276\357q\307\027\304r\321>\224\'\321\021G\276\205\276:\2140\342\216y\205\276\320\036\256#\256f\204\276I^\022q\267Gv\276\347\210V\320\257\013\201\276\223\311%e\275\336~\276\355d\306\224u#\177\276\3756\250#\236\361\177\276\243\233\007\364\345\254\177\276\205\004EY\343_\200\276\340\237\345\210\233\244\200\276\330\266tA\207=\200\276\243\233\007\364\345\254\177\276\3756\250#\236\361\177\276\3756\250#\236\361\177\276\355d\306\224u#\177\276\243\233\007\364\345\254\177\276\330\266tA\207=\200\276:;\206\270S\351\200\276:;\206\270S\351\200\276\347\210V\320\257\013\201\276\263z\352\005]\312\202\276+\272NSf\253\204\276\356\302qA\377\002\206\276\375\224S\320\'\321\206\276#\"\2105\215\324\210\276\205\246\231\254Y\200\211\2769\335\332\013\312\t\212\276\224x{;\202N\212\276\374\345\375\371ba\213\276^j\017q/\r\214\276\327\251s\2768\356\215\276\365M7\334\211\212\217\276UB\274\035\375\t\220\276\\+-e\021q\220\276UB\274\035\375\t\220\276\002\220\2145Y,\220\276\205\004EY\343_\220\276\276\257>\334\335\034\221\276\367Z8_\330\331\221\276(\035\301\232\276/\222\276\376C\251\246\354@\222\276(\035\301\232\276/\222\276(\035\301\232\276/\222\276\315\201 k\006\353\221\276s\346\177;N\246\221\276Q\366\330\216\220\036\222\2767\357\242)\347\375\222\276\024\377\373|)v\223\276o\232\234\254\341\272\223\276~l~;\n\211\224\276\'nk\304\371\277\226\276\005~\304\027<8\227\2766@MS\"\216\227\276D\022/\342J\\\230\276u\324\267\0351\262\230\276\362_\377\371\246~\230\276D\022/\342J\\\230\276o\353F\326\034K\230\276\372HpA\273\345\230\276g\002\326\216\010\344\227\276\221\212CY\237B\223\276\374\345\375\371ba\213\276v\203\r\364\365!\204\2763R\025q?\202\200\276\022\230~ml\333x\276O>\261U\230\363r\276\211\026\351\036J\326g\276\327\376L\010\217\022a\276+\013\371|\241;Y\276\305\274\033\007v\356Q\276\n\246;\303$\271D\2760]Eh\016\0301\276h\370\324a\207\2735\276\377\030\245\234\032x9\276\203\333\236\343\254qD\276:\2140\342\216yE\276\273\275\327\331\337|K\2760\215\354\264\370\007_\276\254\232K!|\036f\276\372\312\207\321\310/p\276\373\323Y4\374\352s\276\037\251f`i\303v\276\031\311\307{\210\027z\276\033\212\301\027\264\375|\276\243\233\007\364\345\254\177\276\244\250\010w4\374\201\276\024\377\373|)v\203\276\224\'\321\021G\276\205\276\023P\246\246d\006\210\2769\335\332\013\312\t\212\276\347*\253#&,\212\276\014\270\337\210\213/\214\2761E\024\356\3602\216\276O\351\327\013B\317\217\276UB\274\035\375\t\220\276\002\220\2145Y,\220\276\\+-e\021q\220\276\244\250\010w4\374\221\276\253\221y\276Hc\222\276\244\250\010w4\374\221\276s\346\177;N\246\221\276\215\355\265\240\367\306\220\276\266\306\315\224\311\265\220\276}\016\323\216\200\251\215\276\356\023\034k:\223\212\276+\013\371|\241;\211\276\023P\246\246d\006\210\276\253\342#\350\203\363\206\276_\031eG\364|\207\276\rg5_P\237\207\276\rg5_P\237\207\276\271\264\005w\254\301\207\276X0\364\377\337\025\207\276_\031eG\364|\207\276\rg5_P\237\207\276\005~\304\027<8\207\276\005~\304\027<8\207\276_\031eG\364|\207\276\005~\304\027<8\207\276X0\364\377\337\025\207\276\005~\304\027<8\207\276\375\224S\320\'\321\206\276\375\224S\320\'\321\206\276\375\224S\320\'\321\206\276\253\342#\350\203\363\206\276\262\313\224/\230Z\207\276\253\342#\350\203\363\206\276X0\364\377\337\025\207\276\005~\304\027<8\207\276\253\342#\350\203\363\206\276\253\342#\350\203\363\206\276\253\342#\350\203\363\206\276\253\342#\350\203\363\206\276\005~\304\027<8\207\276\253\342#\350\203\363\206\276\375\224S\320\'\321\206\276\253\342#\350\203\363\206\276X0\364\377\337\025\207\276\375\224S\320\'\321\206\276PG\203\270\313\256\206\276Bu\241)\243\340\205\276\224\'\321\021G\276\205\276\340\360\217\262\3264\205\276\340\360\217\262\3264\205\276\340\360\217\262\3264\205\276\350\331\000\372\352\233\205\276\340\360\217\262\3264\205\276\224\'\321\021G\276\205\276\224\'\321\021G\276\205\276\350\331\000\372\352\233\205\276\350\331\000\372\352\233\205\276:\2140\342\216y\205\276\340\360\217\262\3264\205\276\350\331\000\372\352\233\205\276\215>`\3122W\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276\215>`\3122W\205\276:\2140\342\216y\205\276\340\360\217\262\3264\205\276\224\'\321\021G\276\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276\215>`\3122W\205\276\215>`\3122W\205\276\340\360\217\262\3264\205\276:\2140\342\216y\205\276\350\331\000\372\352\233\205\276\215>`\3122W\205\276\350\331\000\372\352\233\205\276\350\331\000\372\352\233\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276\350\331\000\372\352\233\205\276:\2140\342\216y\205\276\215>`\3122W\205\276\224\'\321\021G\276\205\276\350\331\000\372\352\233\205\276Bu\241)\243\340\205\276\224\'\321\021G\276\205\276:\2140\342\216y\205\276Bu\241)\243\340\205\276:\2140\342\216y\205\276:\2140\342\216y\205\276\224\'\321\021G\276\205\276:\2140\342\216y\205\276Bu\241)\243\340\205\276Bu\241)\243\340\205\276Bu\241)\243\340\205\276\234\020BY[%\206\276Bu\241)\243\340\205\276\234\020BY[%\206\276I^\022q\267G\206\276\215>`\3122W\205\276\215>`\3122W\205\276\262\310@\031\023\261\302\275\300z$\265\334\n\301\275\226dy\341\177\375\305\275\0038J\345\317=\303\275\226dy\341\177\375\305\275jN\316\r#\360\312\275\262\310@\031\023\261\322\275Z\200E\177q\367\322\275\235=k\257d*\325\275\337\372\220\337W]\327\275(\221\250\335/\275\330\275x\000\262\251\354I\331\275q\'\300\333\007\035\332\275\254\013\364=\026#\335\275\375z\375\t\323\257\335\275.\334G\262\240\032\343\275S\247S\261\214\312\343\275\321H\255C\216\003\351\275\254\013\364=\026#\355\275\200g\366pEF\355\275M\352\006\326\217<\356\275\2452\002p1\366\355\275\336%\225\351)&\360\275\"F\t\t\277_\356\275\330\257\361\n\347\377\354\275\0038J\345\317=\343\275\031\337\304Afc\332\275\321H\255C\216\003\331\275(\221\250\335/\275\330\275x\000\262\251\354I\331\2756C\214y\371\026\327\275\200\331\243w\321v\330\275x\000\262\251\354I\331\275\273\275\327\331\337|\333\275 \270\266\017K\220\331\275\216\213\207\023\233\320\326\275\330!\237\021s0\330\275\200\331\243w\321v\330\275\005T\357\327\267\334\334\275cu\334?>\303\333\275\014-\341\245\234\t\334\275\254\013\364=\026#\335\275\236Y\020\242L\311\336\275\254\013\364=\026#\335\2756C\214y\371\026\327\275\374^X\027\353\020\324\275E\365o\025\303p\325\275\346\323\202\255<\212\326\275\200\331\243w\321v\330\275\321H\255C\216\003\331\275\321H\255C\216\003\331\275=\034~G\336C\326\275\346\323\202\255<\212\326\275\216\213\207\023\233\320\326\275\356\254t{!\267\325\275E\365o\025\303p\325\275=\034~G\336C\326\275\337\372\220\337W]\327\275(\221\250\335/\275\330\275\031\337\304Afc\332\275\311o\273u\251\326\331\275\337\372\220\337W]\327\275/j\232\253\024\352\327\275 \270\266\017K\220\331\275\311o\273u\251\326\331\275 \270\266\017K\220\331\275q\'\300\333\007\035\332\275\375z\375\t\323\257\335\275M\352\006\326\217<\336\275p\013\033\351\037~\340\275\236Y\020\242L\311\336\275\262\310@\031\023\261\342\275\253\357NK.\204\343\275(\003V\344\273\355\343\275\302\010w\256P\332\345\275[\016\230x\345\306\347\275\207\262\225E\266\243\347\275\321H\255C\216\003\351\275[\234\352qY\226\354\275/\370\354\244\210\271\354\275\236Y\020\242L\311\356\275\252\250\245Nt\034\361\275\n\021<\263\264j\362\275\235=k\257d*\365\275\031\230\033E\254\373\367\2757\2125v\263~\371\275>\252\320@R\023\373\275\201\256\237m\377\255\377\275\177KQ~]\247\003\276E\365o\025\303p\005\276\007V\352C\223\327\010\276>8#:\306\342\017\276\247\030X\351$R\020\276\033m\027;\3322\017\276\315\215[\324lp\017\276[\234\352qY\226\014\276\347\250~\243j\301\r\276\252\250\245Nt\034\001\276\252\250\245Nt\034\001\276\272\004\201\326\231\344\r\276\323\221Q\254#f\007\276\341\265\342Ny\360\020\276\247_\001\346\336\271\022\276\0028J\345\317=\023\276\225\035\320\344\305\225\023\276\247_\001\346\336\271\022\276^\020\223\344\300\301\023\276\025\301$\343\242\311\024\276\247_\001\346\336\271\022\276\337\355;\234Q\213\020\276\\UAu\237.\n\276\342\374\213K3X\003\276[\016\230x\345\306\367\275x\000\262\251\354I\371\275i2)\033;Q\001\276=\216+Njt\001\276^\020\223\344\300\301\003\276\221\324+|03\005\276x+\266\263\276\022\362\275\266\021\345\201\250\023\001\276e\242\333\265\353\206\000\276\026\010\316\337\\1\007\276\201 Mt\213\336\n\276\375z\375\t\323\257\r\276,!\366B\177\207\t\276\324\330\372\250\335\315\t\276j\007%\021i\210\010\276\\UAu\237.\n\276M\243]\331\325\324\013\276\203\333\236\343\254q\024\276\026\010\316\337\\1\027\276\026\010\316\337\\1\027\276\361<\302\340p\201\026\276\314q\266\341\204\321\025\276pR\304\345\331\345\022\276\314\270_\336>9\030\276\361\203k\335*\351\030\276\2504\375\333\014\361\031\276\204\"H\340f\331\026\276\226dy\341\177\375\025\276\250\246\252\342\230!\025\276r\340\026\337M\265\027\276\225\035\320\344\305\225\023\276pR\304\345\331\345\022\276\n\312\222\266\372\002\020\276\222\251\'r^j\014\276\247_\001\346\336\271\022\276\026\373x\234V_\020\276\025\301$\343\242\311\024\276:\2140\342\216y\025\276^\020\223\344\300\301\023\276\336\263\347\342\235\365\024\276\0028J\345\317=\023\276\250\246\252\342\230!\025\276\226dy\341\177\375\025\276uE`:\313\266\017\276\204\"H\340f\331\026\276\226dy\341\177\375\025\276y\254\263i,\020 \276\204\260\232\331\332\250\033\276\336\210\343\330\313,\034\276\362\312\024\332\344P\033\276\362\312\024\332\344P\033\276rni\330\301\204\034\276B\237vi\'< \276(\037\373\326\243\214\035\276\251{\246\330\306X\034\276(\037\373\326\243\214\035\276:a,\330\274\260\034\276\204\367C\326\224\020\036\276\251\302O\325\200\300\036\276\336\210\343\330\313,\034\276\251{\246\330\306X\034\276\226\362\313\332\363\314\032\276\315\377\010\333\370\240\032\276(\330Q\332\351$\033\276\315\377\010\333\370\240\032\276\336\210\343\330\313,\034\276`,8\327\250`\035\276\026\335\311\325\212h\036\276\004\233\230\324qD\037\276<\250\325\324v\030\037\276\251\302O\325\200\300\036\276\314F\262\327\262\010\035\276\341\317\214\325\205\224\036\2769\376\335\350\032\252 \276\315\215[\324lp\037\276\336%\225\351)& \276r\265\022\325{\354\036\276\363\021\276\326\236\270\035\276<\250\325\324v\030\037\276\363\021\276\326\236\270\035\276\314F\262\327\262\010\035\276:a,\330\274\260\034\276\363\021\276\326\236\270\035\276\310\232\277\177{\237\002\276\004\233\230\324qD\377\275\312\375\ro\035\246\376\2750?\226\241B!\377\275\004\233\230\324qD\377\275r\265\022\325{\354\376\275\310S\026\203\3017\000\276\300z$\265\334\n\001\276\212m\347\264\3276\001\276\212m\347\264\3276\001\276\312\375\ro\035\246\376\275{tZ\034Tu\000\276\220`\203\t\311\007\376\275\330!\237\021s0\370\275\n\237\216\254(:\367\275!q\r\023\221(\367\275T\356\374\255F2\366\275\262\201\227\034YI\360\275>8#:\306\342\357\275\373\027\257\0321\251\361\275\345E0\264\310\272\361\275\336l>\346\343\215\362\275pR\304\345\331\345\362\275\346\214\331\260\202\"\364\275\336\263\347\342\235\365\364\275\030QrH\362\223\365\275q\231m\342\223M\365\275\216D\336\026\341h\364\2756\374\342|?\257\364\275\374\245\001\024\245x\366\275\244]\006z\003\277\366\2756\374\342|?\257\364\275\225\035\320\344\305\225\363\275\031\n\311K8,\363\275\271\2412\347\367\335\361\275\310\232\277\177{\237\362\275 \343\272\031\035Y\362\275pR\304\345\331\345\362=\rZ\340\033J\315\000>\244\317\263\200\217\357\001>\031\n\311K8,\003>\323\003\377\262\257\226\002>$s\010\177l#\003>\2751\200LG\250\002>\202\224\365\346\362\t\002>\336l>\346\343\215\002>\314*\r\345\312i\003>\0038J\345\317=\003>\206$CLB\324\002>H>\024~X\323\003>\367\316\n\262\233F\003>\323\003\377\262\257\226\002>\0038J\345\317=\003>H>\024~X\323\003>H>\024~X\323\003>\374^X\027\353\020\004>\377\356\245|:\333\004>\317\272ZJ\0324\004>bY7MV$\002>\016\241\211\030\0045\003>iy\322\027\365\270\003>D\256\306\030\t\t\003>(\003V\344\273\355\003>xr_\260xz\004>\320\001\004G\324\233\006>$\001[x\340\362\007>\241[\013\016(\304\n>g\276\200\250\323%\n>>\252\320@R\023\013>r\265\022\325{\354\016>\262\201\227\034YI\020>\'\274\254\347\001\206\021>\035\266\273\243o\225\r>M\243]\331\325\324\013>\260T\230\246\253\205\013>;\323\331\336H\341\007>7\321\336rm\346\013>\253\304JA\\\273\n>\032&n> \313\014>\2452\002p1\366\r>M\010\266\234[3\020>Q\354\001Bk7\n>\267-\212t\220\262\n>\226\362\313\332\363\314\n>\\UAu\237.\n>\301O \253\nB\010>\013\3467\251\342\241\t>\362\312\024\332\344P\013>\026Ow\334\026\231\t>B\363t\251\347u\t>updD\235\177\010>I\314fw\314\242\010>,!\366B\177\207\t>\013\3467\251\342\241\t>T5\246\252\000\232\010>4\372\347\020d\264\010>x\000\262\251\354I\t>$\001[x\340\362\007>\3775Oy\364B\007>\235=k\257d*\005>\203\333\236\343\254q\004>\031\303\037O~\304\000>\023M|p;\236\375=\337\317\214\325\205\224\376=\023M|p;\236\375=\320\217V@Hk\373=\356:\307t\225\206\372=\264\344\345\013\373O\374=\255R\235:\320\212\377=\\\343\223n\023\376\376=\247\030X\351$R\000>\333\334\360\200\224\303\001>\373\027\257\0321\251\001>i2)\033;Q\001>\006\201\356Me\240\001>2%\354\0326}\001>\230ftM[\370\001>\2751\200LG\250\002>:E\207\345\324\021\003>\370\025\264\256U\256\005>(J\377\340uU\006>\254}\241D\242S\010>\\UAu\237.\n>\257\r\357\251\361\035\t>\356\254t{!\267\005>\351\325}\031\030\205\002>M\243]\331\325\324\373=\226\362\313\332\363\314\372=\321\326\377<\002\323\375=\263+\217\010\265\267\376=\236\022g\245\222a\374=\217\3220\020U8\371=M\243]\331\325\324\373=\2279u\327\2554\375=\236\022g\245\222a\374=\3743T\r\031H\373=\320\217V@Hk\373=\302\335r\244~\021\375=\330\257\361\n\347\377\374=\244\353Xsw\216\373=q\'\300\333\007\035\372=>c\'D\230\253\370=r\340\026\337M\265\367=\330!\237\021s0\370=\374\245\001\024\245x\366=\021x\200z\rg\366=\320\001\004G\324\233\366=i\300{\024\257 \366=\207k\354H\374;\365=\235=k\257d*\365=\031\n\311K8,\363=\271\350\333\343\261E\364=\253\357NK.\204\363=\355e\313~gO\363=\253\357NK.\204\363=\327\223L\030\377`\363=L\207\270\346\3555\362=\252\250\245Nt\034\361=\364>\275LL|\362=\262\310@\031\023\261\362=6\2659\200\205G\362=\206$CLB\324\362=bY7MV$\362=\364>\275LL|\362=\235=k\257d*\365=\030QrH\362\223\365=\337A:\334\021\305\371=>\252\320@R\023\373=\004\rF\333\375t\372=rni\330\301\204\374=\023\006\323s\2016\373=rni\330\301\204\374=(\003V\344\273\355\003>\000\304\241rh\022\014>\214\027\337\2403\245\017>L\207\270\346\3555\022>\250\246\252\342\230!\025>\361\203k\335*\351\030>\204\260\232\331\332\250\033>`,8\327\250`\035>\362\312\024\332\344P\033>\251\302O\325\200\300\036>0\244\356d\310\177#>Uo\372c\264/$>\336\263\347\342\235\365$>\225\035\320\344\305\225#>\363\021\276\326\236\270\035>\272v.\335%\025\031>\225\253\"\3369e\030>_W<\341z)\026>\361<\302\340p\201\026>\247\355S\337R\211\027>\027\226 \331\320\000\034>\251\302O\325\200\300\036>L\207\270\346\3555\">\272\2412\347\367\335!>r\265\022\325{\354\036>\027\226 \331\320\000\034>\226\362\313\332\363\314\032>\337A:\334\021\305\031>(J\377\340uU\026>\272\350\333\343\261E\024>\360\365\030\344\266\031\024>\003\177\363\341\211\245\025>q\231m\342\223M\025>\'\274\254\347\001\206\021>\272\2412\347\367\335\021>\361\256o\347\374\261\021>\337l>\346\343\215\022>\264I>\317\200\256\020>x\000\262\251\354I\t>\n\237\216\254(:\007>\253\304JA\\\273\n>\303$\034\2418y\017>YSF\t\3043\016>3A\221\r\036\034\013>X\014\235\014\n\314\013>6C\214y\371\026\007>\244\026]}IW\004>^\020\223\344\300\301\003>\247_\001\346\336\271\002>\364>\275LL|\002>W\360\367\031\"-\002>\0038J\345\317=\003>Z\200E\177q\367\002>\2568\363\263\303\346\001>r\265\022\325{\354\376=\217\031\332\014\017\240\373=\302\226\311\247\304\251\372=\253\304JA\\\273\372=F\312k\013\361\247\374=\210@\350>*s\374=/\370\354\244\210\271\374=\347a\325\246\260Y\373=\235\313\275\250\330\371\371=\346\032,\252\366\361\370=T5\246\252\000\232\370=j\007%\021i\210\370=\355\363\035x\333\036\370=\200\331\243w\321v\370=0\261C\250\316Q\372=\337A:\334\021\305\371=L\\\264\334\033m\371=\311o\273u\251\326\371=\235\313\275\250\330\371\371=\200\331\243w\321v\370=M\025\013\340a\005\367=[\307\356{+_\365=b\240\340I\020\214\364=bY7MV$\362=\300z$\265\334\n\361=\216\3754\032\'\001\362=\354\036\"\202\255\347\360=\373\027\257\0321\251\361=\262\310@\031\023\261\362=S\247S\261\214\312\363=iy\322\027\365\270\363=\2536\370G\350\353\365=!q\r\023\221(\367=>c\'D\230\253\370=\330!\237\021s0\370=L\\\264\334\033m\371=\346\323\202\255<\212\366=\310\232\277\177{\237\362=\n\312\222\266\372\002\360=T\303\370\243ti\355=\217\031\332\014\017\240\353=\302\226\311\247\304\251\352=\207\262\225E\266\243\347=2%\354\0326}\001>\rZ\340\033J\315\000>\247\030X\351$R\000>\255R\235:\320\212\377=\312\375\ro\035\246\376=\032&n> \313\374=\264\344\345\013\373O\374=\365Zb?4\033\374=\217\031\332\014\017\240\373=(\330Q\332\351$\373=\023\006\323s\2016\373=>\252\320@R\023\373=[\234\352qY\226\374=\236\022g\245\222a\374=\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q=\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227q\275\021\352-\201\231\227\201\275\226dy\341\177\375\225\275\031\337\304Afc\252\275\236Y\020\242L\311\256\275p\013\033\351\037~\260\275p\013\033\351\037~\260\275\262\310@\031\023\261\262\275S\247S\261\214\312\263\275p\013\033\351\037~\260\275\021\352-\201\231\227\261\275\236Y\020\242L\311\256\275\226dy\341\177\375\245\275S\247S\261\214\312\243\275\226dy\341\177\375\225\275\226dy\341\177\375\225\275\031\337\304Afc\212\275\031\337\304Afc\212\275\021\352-\201\231\227q\275\021\352-\201\231\227\201=\031\337\304Afc\212=\021\352-\201\231\227\221=\226dy\341\177\375\225=S\247S\261\214\312\243=S\247S\261\214\312\243=\236Y\020\242L\311\236=\330!\237\021s0\250=\262\310@\031\023\261\262=\226dy\341\177\375\265=\262\310@\031\023\261\262=\236Y\020\242L\311\256=\021\352-\201\231\227\261=\262\310@\031\023\261\262=\021\352-\201\231\227\261=\262\310@\031\023\261\262=\021\352-\201\231\227\261=\262\310@\031\023\261\262=\262\310@\031\023\261\262=S\247S\261\214\312\263=S\247S\261\214\312\263=\021\352-\201\231\227\261=[\234\352qY\226\254=\236Y\020\242L\311\256=\226dy\341\177\375\245=\031\337\304Afc\212=\021\352-\201\231\227\201=\021\352-\201\231\227q=\021\352-\201\231\227q\275\021\352-\201\231\227\201\275\021\352-\201\231\227q\275\226dy\341\177\375\225\275\236Y\020\242L\311\236\275\236Y\020\242L\311\236\275\021\352-\201\231\227\241\275p\013\033\351\037~\260\275[\234\352qY\226\254\275S\247S\261\214\312\243\275\021\352-\201\231\227\241\275\236Y\020\242L\311\236\275\021\352-\201\231\227\241\275\330!\237\021s0\250\275S\247S\261\214\312\243\275\226dy\341\177\375\245\275\031\337\304Afc\232\275\031\337\304Afc\232\275[\234\352qY\226\254\275\262\310@\031\023\261\262\275\364\205fI\006\344\264\275S\247S\261\214\312\303\2756C\214y\371\026\307\2756C\214y\371\026\307\275x\000\262\251\354I\311\275x\000\262\251\354I\311\275\014-\341\245\234\t\314\275\014-\341\245\234\t\314\275[\234\352qY\226\314\275[\234\352qY\226\314\275\014-\341\245\234\t\314\275jN\316\r#\360\312\275jN\316\r#\360\312\275\273\275\327\331\337|\313\275\031\337\304Afc\312\275\031\337\304Afc\312\275\311o\273u\251\326\311\275\0038J\345\317=\303\275\273\275\327\331\337|\273\275x\000\262\251\354I\271\275\226dy\341\177\375\265\275\262\310@\031\023\261\262\275\236Y\020\242L\311\256\275[\234\352qY\226\254\275[\234\352qY\226\254\275[\234\352qY\226\254\275\330!\237\021s0\250\275\236Y\020\242L\311\256\275[\234\352qY\226\254\275\031\337\304Afc\252\275[\234\352qY\226\254\275"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3567
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 3567
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1500
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  input: "tensors/component_6"
  input: "tensors/component_7"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/Hu1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu2/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu3/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu4/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu5/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu6/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Hu7/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\007\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.41403934359550476
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.41403934359550476
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\034\000\000\000\035\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3244428336620331
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3244428336620331
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 29
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\035\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/hiddenlayer_2/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/hiddenlayer_2/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2/activation/tag"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_3/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_3/Cast"
  input: "dnn/zero_fraction_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 7
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/labels"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (dnn/head/labels:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (dnn/head/labels:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/labels"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/labels"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/labels:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/labels:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/labels"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/labels"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/labels"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/Const"
  input: "^dnn/head/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/Mul"
  input: "dnn/head/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/ExpandDims"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/ExpandDims"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/ExpandDims_grad/Shape"
  op: "Shape"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/ExpandDims_grad/Reshape"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "dnn/head/gradients/dnn/head/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  op: "PreventGradient"
  input: "dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Identity"
  op: "Identity"
  input: "dnn/head/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dnn/head/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/head/beta1_power/Assign"
  op: "Assign"
  input: "dnn/head/beta1_power"
  input: "dnn/head/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/beta1_power/read"
  op: "Identity"
  input: "dnn/head/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Identity_1"
  op: "Identity"
  input: "dnn/head/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "dnn/head/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/head/beta2_power/Assign"
  op: "Assign"
  input: "dnn/head/beta2_power"
  input: "dnn/head/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/beta2_power/read"
  op: "Identity"
  input: "dnn/head/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_0/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 29
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 29
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_1/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 29
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/hiddenlayer_2/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/kernel/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/kernel/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "dnn/dnn/logits/kernel/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/kernel/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/kernel/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/kernel/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/bias/part_0/Adam/Identity"
  op: "Identity"
  input: "dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/bias/part_0/Adam"
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "dnn/dnn/logits/bias/part_0/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/dnn/logits/bias/part_0/Adam_1/Identity"
  op: "Identity"
  input: "dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/bias/part_0/Adam_1"
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "dnn/dnn/logits/bias/part_0/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/dnn/logits/bias/part_0/Adam_1/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dnn/head/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "dnn/head/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/kernel/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/logits/kernel/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/kernel/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/logits/kernel/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/bias/part_0/Identity"
  op: "Identity"
  input: "dnn/head/Adam/update_dnn/logits/bias/part_0/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/update_dnn/logits/bias/part_0/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/learning_rate"
  input: "dnn/head/Adam/beta1"
  input: "dnn/head/Adam/beta2"
  input: "dnn/head/Adam/epsilon"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Adam/update_dnn/logits/bias/part_0/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adam/mul"
  op: "Mul"
  input: "dnn/head/beta1_power/read"
  input: "dnn/head/Adam/beta1"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/kernel/part_0/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/Assign"
  op: "Assign"
  input: "dnn/head/beta1_power"
  input: "dnn/head/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/Adam/mul_1"
  op: "Mul"
  input: "dnn/head/beta2_power/read"
  input: "dnn/head/Adam/beta2"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/kernel/part_0/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/Adam/Assign_1"
  op: "Assign"
  input: "dnn/head/beta2_power"
  input: "dnn/head/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/Adam/update"
  op: "NoOp"
  input: "^dnn/head/Adam/Assign"
  input: "^dnn/head/Adam/Assign_1"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/hiddenlayer_2/kernel/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/bias/part_0/ResourceApplyAdam"
  input: "^dnn/head/Adam/update_dnn/logits/kernel/part_0/ResourceApplyAdam"
}
node {
  name: "dnn/head/Adam/value"
  op: "Const"
  input: "^dnn/head/Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_2/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/hiddenlayer_2/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adam/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adam_1/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adam/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adam_1/Assign"
  input: "^dnn/head/beta1_power/Assign"
  input: "^dnn/head/beta2_power/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_2/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_2/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/head/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/head/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/head/beta1_power"
        string_val: "dnn/head/beta2_power"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/logits/bias/part_0/Adam"
        string_val: "dnn/dnn/logits/bias/part_0/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/head/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/head/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/hiddenlayer_2/kernel/part_0"
        string_val: "dnn/hiddenlayer_2/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/head/beta1_power"
        string_val: "dnn/head/beta2_power"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
        string_val: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam"
        string_val: "dnn/dnn/logits/kernel/part_0/Adam_1"
        string_val: "dnn/dnn/logits/bias/part_0/Adam"
        string_val: "dnn/dnn/logits/bias/part_0/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/hiddenlayer_2/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 10
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Read_12/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/Identity_24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/Read_13/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_14/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/Read_14/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_15/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/Read_15/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_16/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/Read_16/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/Identity_32"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_17/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/Read_17/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/Identity_34"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_18/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/Read_18/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/Identity_36"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_19/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/Read_19/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/Identity_38"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_20/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/Read_20/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/Identity_40"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_21/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/Read_21/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/Identity_42"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_22/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/Read_22/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/Identity_44"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_23/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/Read_23/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/Identity_46"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_630d9150a66649b2ba315250d6880df5/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "dnn/head/beta1_power"
        string_val: "dnn/head/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/head/beta1_power"
  input: "dnn/head/beta2_power"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_24/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/Read_24/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/Identity_48"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_25/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/Read_25/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/Identity_50"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_26/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/Read_26/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/Identity_52"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_27/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/Read_27/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/Identity_54"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_28/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/Read_28/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/Identity_56"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_29/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/Read_29/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/Identity_58"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_30/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/Read_30/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_61"
  op: "Identity"
  input: "save/Identity_60"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_31/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_62"
  op: "Identity"
  input: "save/Read_31/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_63"
  op: "Identity"
  input: "save/Identity_62"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_32/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_64"
  op: "Identity"
  input: "save/Read_32/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_65"
  op: "Identity"
  input: "save/Identity_64"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_33/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_66"
  op: "Identity"
  input: "save/Read_33/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_67"
  op: "Identity"
  input: "save/Identity_66"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_34/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_68"
  op: "Identity"
  input: "save/Read_34/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_69"
  op: "Identity"
  input: "save/Identity_68"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_35/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_70"
  op: "Identity"
  input: "save/Read_35/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_71"
  op: "Identity"
  input: "save/Identity_70"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_36/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_72"
  op: "Identity"
  input: "save/Read_36/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_73"
  op: "Identity"
  input: "save/Identity_72"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_37/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_74"
  op: "Identity"
  input: "save/Read_37/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_75"
  op: "Identity"
  input: "save/Identity_74"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_38/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_76"
  op: "Identity"
  input: "save/Read_38/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_77"
  op: "Identity"
  input: "save/Identity_76"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_39/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_78"
  op: "Identity"
  input: "save/Read_39/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_79"
  op: "Identity"
  input: "save/Identity_78"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_40/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_80"
  op: "Identity"
  input: "save/Read_40/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_81"
  op: "Identity"
  input: "save/Identity_80"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_41/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_82"
  op: "Identity"
  input: "save/Read_41/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_83"
  op: "Identity"
  input: "save/Identity_82"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_42/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_84"
  op: "Identity"
  input: "save/Read_42/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_85"
  op: "Identity"
  input: "save/Identity_84"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_43/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_86"
  op: "Identity"
  input: "save/Read_43/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_87"
  op: "Identity"
  input: "save/Identity_86"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_44/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_88"
  op: "Identity"
  input: "save/Read_44/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_89"
  op: "Identity"
  input: "save/Identity_88"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_45/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_90"
  op: "Identity"
  input: "save/Read_45/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_91"
  op: "Identity"
  input: "save/Identity_90"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_46/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_92"
  op: "Identity"
  input: "save/Read_46/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_93"
  op: "Identity"
  input: "save/Identity_92"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_47/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_94"
  op: "Identity"
  input: "save/Read_47/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_95"
  op: "Identity"
  input: "save/Identity_94"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam_1"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adam"
        string_val: "dnn/logits/bias/t_0/Adam_1"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adam"
        string_val: "dnn/logits/kernel/t_0/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "28 0,28"
        string_val: "28 0,28"
        string_val: "28 0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "29 0,29"
        string_val: "29 0,29"
        string_val: "29 0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "16 0,16"
        string_val: "16 0,16"
        string_val: "16 0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "8 0,8"
        string_val: "8 0,8"
        string_val: "8 0,8"
        string_val: "16 8 0,16:0,8"
        string_val: "16 8 0,16:0,8"
        string_val: "16 8 0,16:0,8"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_49"
  input: "save/Identity_51"
  input: "save/Identity_53"
  input: "save/Identity_55"
  input: "save/Identity_57"
  input: "save/Identity_59"
  input: "save/Identity_61"
  input: "save/Identity_63"
  input: "save/Identity_65"
  input: "save/Identity_67"
  input: "save/Identity_69"
  input: "save/Identity_71"
  input: "save/Identity_73"
  input: "save/Identity_75"
  input: "save/Identity_77"
  input: "save/Identity_79"
  input: "save/Identity_81"
  input: "save/Identity_83"
  input: "save/Identity_85"
  input: "save/Identity_87"
  input: "save/Identity_89"
  input: "save/Identity_91"
  input: "save/Identity_93"
  input: "save/Identity_95"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_96"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "dnn/head/beta1_power"
        string_val: "dnn/head/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/head/beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/head/beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/Read_1/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/bias/t_0/Adam_1"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam"
        string_val: "dnn/hiddenlayer_2/kernel/t_0/Adam_1"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adam"
        string_val: "dnn/logits/bias/t_0/Adam_1"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adam"
        string_val: "dnn/logits/kernel/t_0/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "28 0,28"
        string_val: "28 0,28"
        string_val: "28 0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "7 28 0,7:0,28"
        string_val: "29 0,29"
        string_val: "29 0,29"
        string_val: "29 0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "28 29 0,28:0,29"
        string_val: "16 0,16"
        string_val: "16 0,16"
        string_val: "16 0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "29 16 0,29:0,16"
        string_val: "8 0,8"
        string_val: "8 0,8"
        string_val: "8 0,8"
        string_val: "16 8 0,16:0,8"
        string_val: "16 8 0,16:0,8"
        string_val: "16 8 0,16:0,8"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_97"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_97"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_98"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam"
  input: "save/Identity_98"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_99"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adam_1"
  input: "save/Identity_99"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_100"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_100"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_101"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam"
  input: "save/Identity_101"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_102"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adam_1"
  input: "save/Identity_102"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_103"
  op: "Identity"
  input: "save/RestoreV2_1:6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_103"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_104"
  op: "Identity"
  input: "save/RestoreV2_1:7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam"
  input: "save/Identity_104"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_105"
  op: "Identity"
  input: "save/RestoreV2_1:8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adam_1"
  input: "save/Identity_105"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_106"
  op: "Identity"
  input: "save/RestoreV2_1:9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_106"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_107"
  op: "Identity"
  input: "save/RestoreV2_1:10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam"
  input: "save/Identity_107"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_108"
  op: "Identity"
  input: "save/RestoreV2_1:11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adam_1"
  input: "save/Identity_108"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_109"
  op: "Identity"
  input: "save/RestoreV2_1:12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias/part_0"
  input: "save/Identity_109"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_110"
  op: "Identity"
  input: "save/RestoreV2_1:13"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam"
  input: "save/Identity_110"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_111"
  op: "Identity"
  input: "save/RestoreV2_1:14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/bias/part_0/Adam_1"
  input: "save/Identity_111"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_112"
  op: "Identity"
  input: "save/RestoreV2_1:15"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  input: "save/Identity_112"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_113"
  op: "Identity"
  input: "save/RestoreV2_1:16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam"
  input: "save/Identity_113"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_114"
  op: "Identity"
  input: "save/RestoreV2_1:17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_2/kernel/part_0/Adam_1"
  input: "save/Identity_114"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_115"
  op: "Identity"
  input: "save/RestoreV2_1:18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_115"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_116"
  op: "Identity"
  input: "save/RestoreV2_1:19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam"
  input: "save/Identity_116"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_117"
  op: "Identity"
  input: "save/RestoreV2_1:20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adam_1"
  input: "save/Identity_117"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_118"
  op: "Identity"
  input: "save/RestoreV2_1:21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_118"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_119"
  op: "Identity"
  input: "save/RestoreV2_1:22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam"
  input: "save/Identity_119"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_120"
  op: "Identity"
  input: "save/RestoreV2_1:23"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adam_1"
  input: "save/Identity_120"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
versions {
  producer: 27
}
